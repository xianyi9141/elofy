'use strict';
// REMOÇÃO DE AUTOFILL DE CAMPOS - ESTAVAM ATRAPALHANDO FUNÇÕES DE SELECT COMBO BOX
// Foi preciso timer por que existem inputs colocados depois da renderização da tela, principalmente pelo select2 (personalização de combo)
$(document).ready(function() {
      setTimeout(function() {
            $('input').each(function(index, item) {
                  $(item).attr('autocomplete', 'new-password')
            });
            $('select').each(function(index, item) {
                  $(item).attr('autocomplete', 'new-password')
            });
      }, 1000);
});
var elofy = angular.module('elofyApp', ['ngRoute', 'ngSanitize', 'Services', 'luegg.directives', 'linkify', 'angularMoment', 'pascalprecht.translate', 'yaru22.angular-timeago', 'ngQuill']);
elofy.config(['ngQuillConfigProvider', function(ngQuillConfigProvider) {
      ngQuillConfigProvider.set(null, null, 'custom placeholder')
}])
elofy.config(['$translateProvider', function($translateProvider) {
      // adicionando português direto no código por que éa língua padrão no momento
      // e será carregada direto, antes mesmo de outras que forem chamadas, para evitar campos sem informação em um FOUC - Flash of untranslated content
      var translationsPT = {
            UI: {
                  ACTIVE: "Ativo",
                  UNACTIVE: "Inativo",
                  EDIT: "Editar",
                  YES: "Sim",
                  NO: "Não",
                  NEW: "Novo",
                  FILL_THE_RED_FIELDS: "Por favor preencha os campos destacados em vermelho.",
                  CLOSE: "Fechar",
                  SAVE: "Salvar",
                  SAVING: "Salvando",
                  REMOVE: "Remover",
                  REMOVAL_ASKCONFIRMATION: "Tem certeza de que gostaria de remover?",
                  REMOVAL_CONFIRMATION: "Remoção Concluída!",
                  SAVED: "Salvo!",
                  SEARCH_FOR_TAGS: "Pesquise por Tags",
                  SEARCH_FOR_NAME: "Pesquise por Nome",
                  EDIT_PROFILE: "Editar Perfil",
                  LOGOUT: "Sair",
                  LOGIN_IN: "Logando",
                  NAME: "Nome",
                  DESCRIPTION: "Descrição",
                  TYPE: "Tipo",
                  ENCHARGED: "Responsável",
                  USERS: "Usuários",
                  SELECT_USER: "Selecione um Usuário",
                  TEAM: "Time",
                  TEAMS: "Times",
                  YEAR: "Ano",
                  LINK: "Link",
                  QUARTERS: "Trimestres",
                  QUARTER: "Trimestre",
                  MONTH: "Mês",
                  TWO_MONTH: "Bimestre",
                  SEMESTER: "Semestre",
                  EMAIL: "E-mail",
                  EMAIL_LABEL: "E-mail:",
                  PASSWORD: "Senha",
                  LOGIN: "Entrar",
                  SEND: "Enviar",
                  ERROR: "Erro!",
                  SENT_EMAIL: "E-mail Enviado!",
                  NOT_AVAILABLE: "N/A",
                  FROM: "De",
                  PRIVATE: "Privado",
                  PUBLIC: "Público",
                  NO_RECORDS_FOUND: "Não foram encontrados registros",
                  DEADLINE: "Prazo",
                  COMPLETED: "Completa",
                  LATE: "Atrasada",
                  PENDING: "Pendente",
                  PROGRESS: "Andamento",
                  PERSON: "Pessoa",
                  ALL: "Todos",
                  EMPLOYEES: "Funcionários",
                  CONSULT: "Consultar",
                  CONTINUE: "Continuar",
                  BEGIN: "Iniciar",
                  NEXT: "Avançar",
                  BACK: "Voltar",
                  FINISH: "Finalizada",
                  MANAGER: "Administrador",
                  DATE: "Data",
                  IMAGE: "Imagem",
                  CHANGE_PASSWORD: "Alterar Senha",
                  CURRENT_PASSWORD: "Senha Atual",
                  NEW_PASSWORD: "Nova Senha",
                  CONFIRM_PASSWORD: "Nova Senha",
                  CANCEL: "Cancelar",
                  ACCOMPLISHED: "Concluído",
                  NOT_STARTED: "Não Iniciado",
                  IN_PROGRESS: "Em Andamento",
                  DELETE: "Excluir",
                  WEIGHTS: "Pesos",
                  REACHED: "Atingido",
                  NOT_REACHED: "Não Atingido",
                  OR: "ou",
                  ENDED: "Finalizado",
                  ATTACHMENTS_LABEL: "anexos:",
                  HORAS: "Horas",
                  CANCELED: "Cancelado",
                  USER: "Usuário",
                  USERNAME: "Nome de usuário",
                  STATE: "Estado",
                  //  Itens de menu Pseudoviews
                  RECURSOS_HUMANOS: "Recursos Humanos",
                  PAINEIS: "Painéis",
                  ADMIN: "Admin",
                  CONFIGURACOES: "Configurações",
                  LANGUAGE: "Idioma",
                  PORTUGUESE: "Português",
                  ENGLISH: "Inglês",
            },
            LOGIN: {
                  REMEMBER_ME: "Lembrar de mim",
                  FORGOT_YOUR_PASSWORD: "Esqueceu dua senha?",
                  EMAIL_OR_PASSWORD_INCORRECT: "E-mail ou senha incorretos.",
                  INVALID_LOGIN: "Login Inválido",
                  RECOVER_PASSWORD: "Recuperar Senha",
                  RECOVER_PASSWORD_INFO: "Informe seu e-mail e enviaremos instruções para você recuperar sua conta.",
                  WE_SENT_AN_EMAIL_TO: "Enviamos um e-mail para",
                  SENT_INSTRUCTIONS: "com as instruções e o link para você trocar a senha. Caso você não receba o e-mail em alguns minutos, verifique a sua caixa de spam ou repita o processo.",
            },
            // namespaces views em portugues por organização
            OBJETIVOS: {
                  INDIVIDUAL_TYPE: "Individual",
                  FOR_THE_TEAM_TYPE: "Para o Time",
                  SHARED_TYPE: "Compartilhado",
                  LINK_DRIVER: "Direcionador",
                  LINK_OBJECTIVE: "Objetivo",
                  MY_GOALS: "Meus Objetivos",
                  NEW_PERSONAL_GOAL: "Novo Objetivo Pessoal",
                  NEW_GOAL: "Novo Objetivo",
                  SELECT_GOAL: "Selecione um Objetivo",
                  GOALS: "Objetivos",
                  GOAL: "Objetivo",
            },
            MEU_PERFIL: {
                  TITLE: "Meu Perfil",
                  PROFILE: "Perfil",
                  YOU: "Voce",
                  YOUR_TEAM: "Seu Time",
                  CICLE_REVISION: "Revisão do ciclo",
                  CICLE_REVISIONS: "Revisões em Ciclos",
                  NEW_CICLE_REVIEW_LABEL: "Novo ciclo de revisão",
                  CICLE: "Ciclo",
                  SELECT_CICLE: "Selecione um ciclo",
                  HI_NAME: "Olá, {{username}}!",
                  WELCOME_BACK: "Bem Vindo de Volta",
                  FEEDBACK: "Feedback",
                  FEEDBACKS: "Feedbacks",
                  ASK_FEEDBACK: "Solicitar Feedback",
                  GIVE_FEEDBACK: "Enviar Feedback",
                  REPLY_FEEDBACK: "Responder Feedback",
                  SHARE_FEEDBACK: "Compartilhar Feedback",
                  UPDATES: "Atualizações",
                  UPDATE: "Atualização",
                  NEW_UPDATE: "Nova Atualização",
                  ADMISSION_DATE: "Data de admissão",
                  EDIT_YOUR_PROFILE: "Edite seu Perfil",
                  REVISED: "Revisada",
                  NOT_REVISED: "Não Revisada",
                  SEE_UPDATE: "Ver Atualização",
                  STILL_NO_UPDATE: "Sem atualizações ainda.",
                  LAST_UPDATES: "Últimas Atualizações",
                  RECEIVED: "Enviados para mim",
                  GIVEN: "Enviados por mim",
                  REQUESTED_FOR_ME: "Solicitados para mim",
                  REQUESTED_BY_ME: "Solicitados por mim",
                  ACTIVITIES: "Atividades",
                  PERIOD: "Periodo:",
                  CURRENT_WEEK: "Semana Atual",
                  LAST_WEEK: "Última Semana",
                  TWO_WEEKS_BEFORE: "2 Semanas Atrás",
                  THREE_WEEKS_BEFORE: "3 Semanas Atrás",
                  SELECT_PERDIOD: "Selecione Período",
                  SEE_MORE_COMMENTS: "Veja mais comentários",
                  WRITE_A_COMMENT: "Escreva um comentário.",
                  ROLE_LABEL: "Cargo:",
                  TEAM_NAME_LABEL: "Nome Time:",
                  VALUES: "Competências comportamentais",
                  VALUES_LABEL: "Competências comportamentais:",
                  VALUES_NOT_FOUND: "Competências comportamentais não encontrados",
                  SKILLS: "Competencias",
                  SKILLS_LABEL: "Competencias:",
                  SKILLS_NOT_FOUND: "Competências comportamentais não encontrados",
                  GENERAL: "Geral",
                  UPDATE_DATE: "Data de Atualização",
                  REVIEW: "Revisão",
                  NO_OBJECTIVES_FOR_CICLE: "Não foram encontrados objetivos para este usuário e ciclo.",
                  HOW_AVALIATE_OBJECTIVES_CICLE: "Como voce avalia resultados em relacao aos objectivos planejados para o ciclo?",
                  UNSATISFACTORY: "Insatisfatório",
                  EXCELENT: "Excelente",
                  NEEDS_TO_IMPROVE: "Precisa Melhorar",
                  MEETS: "Atende",
                  MEETS_VERY_WELL: "Atende Muito Bem",
                  EXCEPTIONAL: "Excepcional",
                  SURPASSES_EXPECTATIONS: "Ultrapassa as Expectativas",
                  KEY_RESULT: "Resultados Chave",
                  NO_KEY_RESULT: "Nenhum Resultado Chave",
                  EVALUATE_PERFORMANCE_INDIVIDUALLY: "Avalie individualmente o desempenho com relacao as Competências comportamentais.",
                  FILL_POTENCIAL_QUESTIONARY: "Preencha o questionario para a avaliacao de potencial da pessoa.",
                  WRITE_YOUR_ANSWER: "Escreva sua resposta",
                  NO_QUESTIONS_FOR_POTENCIAL_EVALUATION: "Não foram encontradas perguntas para avaliação de potencial.",
                  FINAL_SCORE: "Pontuacao Final",
                  EVALUATE_EXPECTATIONS: "Avalie de uma forma geral o atendimento deste colaborador às expectativas da empresa",
                  DESCRIBE_CONTRIBUTOR: "Use este espaço para descrever uma pouco mais sobre o colaborador.",
                  WRITE_YOUR_OBS: "Escreva aqui suas observações",
                  PERFORMANCE: "Desempenho",
                  FINAL_PERFORMANCE_GRADE_LABEL: "Nota final de Performance:",
                  FOR_WHOM_THE_FEEDBACK_IS: "Para quem é o feedback?",
                  WHATS_YOUR_FEEDBACK: "Qual seu feedback",
                  WHICH_VALUES: "Quais competências comportamentais foram identificados?",
                  SEE_VALUES_DESCRIPTIONS: "Veja descrição das competências comportamentais",
                  ASK_FEEDBACK_FOR: "Solicitar Feedback para?",
                  COMPANY_VALUES: "Company values",
                  QUESTIONS_WERENT_FOUND: "Não foram encontradas perguntas.",
                  DESCRIBE_YOUR_ANSWER: "Descreva sua resposta aqui",
                  TOO_LOW: "Muito Baixo",
                  LOW: 'Baixo',
                  NORMAL: 'Normal',
                  HIGH: 'Alto',
                  TOO_HIGH: 'Muito Alto',
                  GREATER: 'Greater',
                  VIEW_CHECKIN: "View Check in",
                  SITUATION: "Situação",
                  ADD_SKILL: "Adicionar Competência",
                  PRESS_ENTER_AFTER_SKILL: "Pressione ENTER após informar o nome da Competência.",
                  MY_EVALUATION: "Minha Avaliação",
                  ACTION_WILL_REMOVE_ACTIVITY: "Essa ação removerá a atividade do perfil",
                  REMOVE_ACTIVITY_FROM_PROFILE: "Remover a atividade do Perfil?",
                  END_ACTIVITY: "Concluir Atividade",
                  END_ACTIVITY_QUESTION: "A ação de concluir a atividade irá removê-la de seu perfil. Deseja prosseguir?",
            },
            //objetivos-globais.html
            VISAO_EMPRESA: {
                  TITLE: "Visão Empresa",
                  NEW_DRIVER: "Novo direcionador",
                  DRIVERS: "Direcionadores",
                  PERCENT_COMPLETED: "% Completo",
                  TOTAL_GOALS: "Total de Objetivos",
                  PROGRESS: "Progresso",
                  KEY_RESULTS: "Resultados Chave",
                  KEY_RESULT: "Resultado Chave",
                  MEASUREMENT: "Medição",
                  MARK: "Meta",
                  ACTIVITIES: "Atividades",
                  ACTIVITY: "Atividade",
                  TO_BEGGIN_GOAL_REGISTER: "Para iniciar o cadastro de objetivos você deve primeiro cadastrar um time.",
                  GO_TO_TEAM_EDITION: "Ir para Edição de Times.",
                  CORESPONSIBLES: "Corresponsáveis",
                  TEAMS_SLASH_WEIGHT: "Times/Pesos",
                  THE_SUM_MUST_BE_TEN: "A Soma dos valores de todos os times deve totalizar (10).",
                  CONTRIBUITORS: "Contribuidores",
            },
            OKRS: {
                  TITLE: "OKR's",
                  DESTACADO: "Destacados",
                  DIRECIONADOR: "Direcionador",
                  OBJETIVO: "Objetivos",
                  OKRS_VISION: "Visão Okr's",
                  HIERARCHICAL_VISION: "Visão Okr's",
                  MY_OKRS: "Meus OKR's",
                  ACTIVITIES: "Atividades",
                  FILTER_BY: "Filtrar Por:",
                  TYPE_YOUR_SEARCH: "Digite sua pesquisa aqui",
                  SITUATION: "Situação",
                  ALL_USERS: "Todos Usuários",
                  ALL_TEAMS: "Todos Times",
                  TEAM_LABEL: "Time:",
                  SELECT_YEAR: "Selecione o Ano",
                  CLEAN_FILTERS: "Limpar Filtros",
                  APPLY_FILTERS: "Aplicar Filtros",
                  START: "Início",
                  END: "Fim",
                  MEASUREMENT_LABEL: "Medição:",
                  MEASUREMENT: "Medição",
                  MEASUREMENTS: "Medições",
                  MARK: "Meta:",
                  YOUR_OKRS: "Seus OKR's",
                  YOUR_GOALS: "Seus Objetivos",
                  MY_ACTIVITIES: "Minhas Atividades",
                  EXPORT_CSV: "Exportar CSV",
                  ACTIVITY: "Atividade",
                  PARTICIPANTS: "Participantes",
                  VALUE_LABEL: "Valor:",
                  PERCENTAGE: "Porcentagem",
                  CONTRIBUITORS: "Contribuidores",
                  TAGS: "Tags",
            },
            AVALIACAO_DE_DESEMPENHO: {
                  TITLE: "Avaliação de Desempenho",
                  NEW_EVALUATION: "Nova Avaliação",
                  CONTRIBUITORS_NAME: "Nome do Colaborador",
                  ADMISSION_LABEL: "Admissão:",
                  PERFORMANCE: "Resultados",
                  POTENTIAL: "Potencial",
                  SKILLS: "Competencias",
                  DEVELOPMENT: "Desenvolvimento",
                  CICLE: "Ciclo",
                  GENERAL: "Geral",
                  UPDATE_DATE: "Data de Atualização",
                  CONSULT: "Consultar",
                  NO_USER_RECORDS: "Desculpe, não foi possível encontrar informações para este usuário.",
                  PROGRESS: "Progresso",
                  KEY_RESULTS: "Resultados Chave",
                  END_DATE: "Data Fim",
                  MEASUREMENT: "Medição",
                  MARK: "Meta",
                  GOALS_NOT_FOUND: "Não foram encontrados objetivos",
                  NO_QUESTIONS_FOUND: "Não foram encontradas Perguntas",
                  UNSATISFACTORY: "Insatisfatório",
                  NEEDS_TO_IMPROVE: "Precisa Melhorar",
                  MEETS: "Atende",
                  MEETS_VERY_WELL: "Atende Muito Bem",
                  SURPASSES_EXPECTATIONS: "Ultrapassa as Expectativas",
                  EXCEPTIONAL: "Excepcional",
                  PERFORMANCE_SCORE: "Pontuação Desempenho",
                  POTENTIAL_SCORE: "Pontuação Desempenho",
                  INSUFFICIENT: "Insufuciente",
                  INSUFFICIENT_DESCRIPTION: "Avalia Movimentação ou Desligamento. Gestão de Consequência: Plano de Melhoria de Performance.",
                  QUESTIONABLE: "Questionável",
                  QUESTIONABLE_DESCRIPTION: "Apoiar incremento de desempenho / avaliar movimentação ou desligamento. Gestão de Consequência: Entender contexto para movimentação lateral.",
                  RIDDLE: "Enigma",
                  RIDDLE_DESCRIPTION: "Avaliar se está com desafio adequado. Foco em impulsionar resultado. Gestão de Consequência: Entender contexto para movimentação lateral.  ",
                  EFFECTIVE: "Eficaz",
                  EFFECTIVE_DESCRIPTION: "Feedback. Avaliar impacto do comportamento no time/ avaliar movimentação ou desligamento. Gestão de Consequência: Manutenção na posição e desenvolvimento de potenciais sucessores. ",
                  SUPPORTER: "Mantenedor",
                  SUPPORTER_DESCRIPTION: "Suporte para melhoria de desempenho e feedback. Gestão de Consequência: Manutenção na posição (2 a 3 anos).  ",
                  STRONG_PERFORMANCE: "Forte Empenho",
                  STRONG_PERFORMANCE_DESCRIPTION: "Foco em desenvolvimento, feedback focado em comportamento. Gestão de Consequência: Aproveitar a capacidade de entrega e planejar movimentação (1 ano). ",
                  COMMITED: "Comprometido",
                  COMMITED_DESCRIPTION: "Foco em desenvolvimento, feedback - avaliar impacto no time. Gestão de Consequência: Ações de capacitação para atualização. Ser facilitador de treinamento. ",
                  STRONG_EFFORT: "Forte Desempenho",
                  STRONG_EFFORT_DESCRIPTION: "Foco em acompanhamento e melhoria de resultado. Gestão de Consequência: Oportunidade para alavancar de desempenho com movimentação lateral. ",
                  HIGH_POTENTIAL: "Alto Potencial",
                  HIGH_POTENTIAL_DESCRIPTION: "Foco em retenção. Ampliar desafios e avaliar potencial para eventual movimentação. Gestão de Consequência: Progressão na carreira agora, potencial sucessor. ",
                  BEGIN: "Início",
                  END: "Fim",
                  EVALUATE_CONTRIBUITER: "Avalie de uma forma geral o atendimento deste colaborador às expectativas da empresa",
                  USE_SPACE_ABOUT_CONTRIBUITOR: "Use este espaço para descrever uma pouco mais sobre o colaborador.",
                  THANKS: "Obrigado",
                  FINISHED_EVALUATION: "Avaliação Finalizada",
                  YEAR_LABEL: "Ano:",
                  QUARTERS_LABEL: "Trimestres:",
                  SELF_EVALUATION: "Autoavaliação",
                  MANAGER_EVALUATION: "Avaliação como Gestor"
            },
            RELATORIO_DE_AVALIACOES: {
                  TITLE: "Relatório de Avaliações",
                  PERCENTAGE: "Porcentagem",
                  KEY_RESULTS: "Resultados Chave",
            },
            PEOPLEDEVELOPMENT: {
                  TITLE: "Desenvolvimento Pessoal",
            },
            PAINEL_DE_OBJETIVOS: {
                  TITLE: "Painel de Objetivos",
                  DASHBOARD: "Dashboard",
                  WELCOME: "Bem-vindo ao Elofy",
                  TOTAL_GOALS: "Total de Objetivos",
                  ACHIEVED_GOALS_TOTAL: "Total de Objetivos Atingidos",
                  CANCELED_GOALS_TOTAL: "Total de Objetivos Cancelados",
                  QNTY_GOALS_TEAM: "Quantidade de Objetivos por time:",
                  NOT_FINISHED_GOALS: "Objetivos atingidos, não atingidos, cancelados e pendentes:",
                  PERCENTAGE_ACHIEVED: "% de Objetivos Atingidos por Time:",
                  TOTAL_GOALS_CICLE: "Total de Objetivos por Ciclo:",
                  FILTER: "Filtrar:",
            },
            PAINEL_DE_DESEMPENHO: {
                  TITLE: "Painel de Desempenho",
                  PERFORMANCE_EVALUATIONS: "Avaliações de Desempenho",
                  FILTER: "Filtrar:",
                  GENERAL_VIEW: "Visão Geral",
                  EVATUATIONS_TOTAL: "Total de Avaliações",
                  FINISHED_EVALUATIONS: "Avaliaçoes Finalizadas",
                  PERFORMANCE_AVERAGE: "Média Desempenho",
                  POTENTIAL_PERFORMANCE: "Média Potencial",
                  EVALUATED_BASE: "Base Avaliada",
                  PERFORMANCE: "Desempenho",
                  POTENTIAL: "Potencial",
                  DETAILS: "Detalhes",
                  USER_DETAILS: "Detalhes Usuários",
                  LAST_UPDATE: "Última Atualização:",
                  LAST_UPDATE_NOT_DEFINED: "Última Atualização: N/D",
            },
            TIMES: {
                  TITLE: "Times",
                  MY_TEAM: "Meu Time",
                  SELECT_TEAM: "Selecione um Time",
                  ADD_TEAM: "Adicionar Time",
                  CREATE_NEW: "Cirar novo Time",
                  TEAM_EDITION: "Edição de Times",
                  PARENT_TEAM: "Time Pai",
                  MEMBERS: "Integrantes",
                  STATUS: "Status",
            },
            USUARIOS: {
                  TITLE: "Usuários",
                  CREATE_NEW: "Criar novo Usuário",
                  USER_EDITION: "Edição de Usuários",
                  MANAGER: "Administrador",
                  APPRAISER: "Administrador",
                  TEAM_LABEL: "Time:",
                  EDIT_PROFILE: "Editar Perfil",
                  ADMISSION_DATE: "Data de Admissão",
                  ROLE: "Cargo",
                  ROLE_TIP: "Please press enter after typing Cargo or select Cargo.",
                  PERMISSIONS: "Permissões",
                  VIEW_GOALS: "Visualiza todos objetivos e resultados chave",
                  MAKE_EVALUATION: "Realiza avaliação de desempenho colaboradores",
                  STATUS: "Status",
                  NIVEL: "Nível de Responsabilidade",
            },
            CARGOS: {
                  TITLE: "Cargos",
                  NEW_POST: "Novo Cargo",
                  POSTS_MAINTENANCE: "Manutenção de Cargos",
                  POST_NAME: "Nome do Cargo",
                  PEOPLE: "Pessoas",
                  REGISTER_MAINTENANCE: "Cadastro/Manutenção de Cargos",
                  POST_TITLE: "Cadastro/Manutenção de Cargos",
                  AVERAGE_HIRE_TIME: "Tempo Médio de Contratação",
                  CRITICAL: "Crítico",
                  STATUS: "Status",
                  SKILLS: "Competências",
                  SELECT_SKILLS: "Selecione Competências",
                  ATTACHED_SKILLS: "Competências Vinculadas",
                  ADD_NEW_SKILLS: "Adicionar novas competências",
                  POTENTIAL: "Potencial",
                  SELECT_QUESTIONARY: "Selecione o questionário para avaliação",
            },
            QUESTIONARIOS: {
                  TITLE: "Questionários",
                  ALL_QUESTIONARIES: "Todos Questionários",
                  TYPE_POTENTIAL: "Potencial",
                  TYPE_CHECKIN: "Checkin",
                  TYPE_360: "Avaliação 360",
                  TYPE_OTHER: "Outro",
                  TYPE_NID: "Não identificado",
                  QUESTIONARY_INFORMATION: "Informações do Questionário",
                  QUESTIONARY_NAME: "Nome do Questionário",
                  INFORM_QUESTIONARY_NAME: "Informe o nome para este questionário",
                  WHATS_THE_QUESTIONARY_TYPE: "Qual o tipo do questionário",
                  QUESTIONS: "Questões",
                  ADD_QUESTION: "Adicionar questão",
                  ALL_QUESTIONS_TYPES: "Todos tipos de questão",
                  QUESTION_TYPE_YN: "Sim/Não",
                  QUESTION_TYPE_MULTIPLE: "Múltipla Questão",
                  QUESTION_TYPE_QUALITATIVE: "Qualitativa",
                  QUESTION_TYPE_RATING: "Rating",
                  QUALITATIVE_QUESTION_YN: "Pergunta Qualitativa Sim ou Não",
                  WRITE_YOUR_YN_QUESTION: "Escreva sua pergunta de resposta Sim ou Não",
                  MULTIPLE_QUESTION: "Pergunta de Múltipla Escolha",
                  WRITE_YOUR_MULTIPLE_QUESTION: "Escreva sua pergunta de múltipla escolha",
                  ANSWER_TEXT: "Texto da resposta",
                  PERCENTUAL_WEIGHT: "Peso percentual",
                  ADD_ONE_MORE_ANSWER: "Adicionar mais uma resposta",
                  QUALITATIVE_TEXTUAL_ANSWER: "Pergunta Qualitativa Textual",
                  WRITE_YOUR_QUALITATIVE_TEXTUAL_QUESTION: "Escreva sua pergunta de resposta textual",
                  RATING_QUESTION: "Pergunta Rating",
                  WRITE_YOUR_RATING_QUESTION: "Escreva sua pergunta de resposta em rating",
                  CHANGE_FOR_HEARTS: "trocar para corações",
                  CHANGE_FOR_STARS: "trocar para estrelas",
            },
            EMPRESA: {
                  TITLE: "Empresa",
                  COMPANY_CONFIGURATION: "Configurações",
                  CONFIGURATIONS: "Configurações",
                  MAIN_CONTACT: "Principal Contato",
                  OKRS_REVISION_PERIOD: "PERÍODO DE REVISÃO DE OKR's",
                  NAME_THE_COMPANY: "Nomeie a empresa",
                  NAME_THE_CONTACT: "Escreva o nome do contato na empresa",
                  MAIN_CONTACT_NAME: "Entre com o nome do principal contato",
                  MISSION: "Missão",
                  MISSION_PLACEHOLDER: "DEscreva sua missão",
                  VISION: "Visão",
                  VISION_PLACEHOLDER: "Descreva a visão de sua empresa",
                  PURPOSE: "Propósito",
                  PURPOSE_PLACEHOLDER: "Conte-nos sobre o propósito de sua empresa",
                  EMPLOYEE_COUNT: "Número de Colaboradores",
                  EMPLOYEE_COUNT_PLACEHOLDER: "Contagem de empregados",
                  LICENSE_COUNT: "Número de Licenças",
                  LICENSE_COUNT_PLACEHOLDER: "Contagem de Licenças",
                  PAY_DAY: "Vencimento",
                  PAY_DAY_PLACEHOLDER: "Data de pagamento em formato DD/MM/YYYY",
                  NINE_BOX: "NINE BOX",
                  X_AXIS: "X axis",
                  Y_AXIS: "Y axis",
                  PERFORMANCE: "Performance",
                  ACCOMPLISHMENT: "Desempenho",
                  DEVELOPMENT: "Desenvolvimento",
                  POTENTIAL: "Potencial",
                  COMPETENCE: "Competência",
                  COMPETENCES: "Competências",
                  CLASSIFICATION_PARAMETERS: "Parâmetros de classificação",
                  EVALUATION_STEPS: "ETAPAS DE AVALIAÇÃO",
                  VALUES: "Competências comportamentais",
                  NEW_VALUES: "Novas competências comportamentais",
                  NEW_VALUE: "Novo valor",
                  ENTER_VALUES_NAME: "Entre com o nome da competência comportamental",
                  TYPE_VALUE: "Digite a competências comportamentais",
                  ADDED_VALUES: "Já adicionados",
                  ADD_NEW: "Adicionar Novo",
                  RESET: "Apagar",
            },
            INTEGRATION: {
                  TITLE: "Integração",
                  INTEGRATIONS: "Integrações",
                  ALL_INTEGRATIONS: "Todas Integrações",
                  CREATE_NEW_INTEGRATION: "Criar novas integraçoes",
                  NEW_INTEGRATION_INFO: "Informação da nova integração",
                  INTEGRATION_NAME: "Nome da integração",
                  TYPE_NAME: "Digite um nome para sua integração",
                  WHATS_THE_TYPE: "Qual o tipo de sua integração?",
                  STATUS: "Status",
                  SQL: "SQL",
                  WEBSERVICE: "WebService",
                  HOST_NAME_ADDRESS: "Endereço do HOST",
                  DATABASE_NAME: "Nome do banco de dados",
                  PORT: "Porta",
                  HERE_SQL: "Aqui vai seu código SQL",
                  SQL_RESULTS: "Resustados SQL",
                  HERE_RESULTS: "Aqui vai seu resultado SQL",
                  SOAP_ADDRESS: "Endereço SOAP",
                  NAMESPACE: "Namespace",
                  NAMESPACE_PLACEHOLDER: "TraceSisitemas",
                  OPERATION: "Operação",
                  OPERATION_PLACEHOLDER: "medirKeyresult",
                  RETURN_PARAM: "Parametro De Retorno",
            },
            FOOTER: {
                  GET_IN_TOUCH: "Fale Conosco",
                  COPYRIGHT: "© 2018 Elofy Gestão de Performance Contínua.",
                  GROUPS: "Grupos",
                  STRATEGIC_GROUPS: "Grupos Estratégicos",
                  SEE_ALL: "ver todos",
                  SEE_LESS: "ver menos",
                  GROUPS_BY_AFFINITY: "Grupos por Afinidade",
                  NEW_GROUP: "Novo Grupo",
            },
            SURVEY: {
                  TITLE: "Pesquisas",
                  QUESTIONS: "Questões",
            },
            FEEDBACK: {
                  TITLE: "Feedback",
                  MAIN_QUESTION: "O que você deseja fazer?",
                  ASK_FEEDBACK: "Solicitar um Feedback",
                  GIVE_FEEDBACK: "Enviar um Feedback",
                  WRITE_NOTE: "Escrever uma Nota",
                  MESSAGE: "Mensagem da solicitação",
                  COMPLETE_FEEDBACK_MSG: "Ao enviar este feedback você está contribuindo para o desenvolvimento pessoal e profissional das pessoas envolvidas.",
                  COMPLETE_REQUEST_MSG: "Sua solicitação de feedback foi enviada com sucesso. Aguarde sua resposta.",
                  COMPLETE_NOTE_MSG: "Sua nota privada foi salva.",
                  YOU_SHOULDNT_BE_HERE: "Algo deu errado, você não deveria estar aqui :(",
                  THANKS: "Obrigado!",
                  BACK_TO_PROFILE: "Voltar para o perfil",
                  GIVE_MORE_FEEDBACK: "Conceder mais feedbacks",
                  ASK_MORE_FEEDBACK: "Solicitar mais feedbacks",
                  ADD_ANOTHER_PRIVATE_NOTE: "Adicionar mais notas",
                  WANT_TO_CONNECT_ONE_OR_MORE: "Deseja relacionar a um ou mais",
                  VALUES_QUESTION: "Competências Comportamentais?"
            },
            CONFIGURACAO_CICLO: {
                  VALOREAPPRISIALEVOLUCAOANSWER: {
                        VALOR_01: "Não Apresenta",
                        VALOR_02: "Em Desenvolvimento",
                        VALOR_03: "Dentro da Expectativa",
                        VALOR_04: "Supera a Expectativa"
                  },
                  VALOREAPPRISIALEVOLUCAOFIVEANSWER: {
                        VALOR_01: "Inaceitável",
                        VALOR_02: "Insatisfatório",
                        VALOR_03: "Médio",
                        VALOR_04: "Bom",
                        VALOR_05: "Excelente",
                  }
            },
            PERFORMANCE_PESSOAL: {
                  EXPLANATION_GRADE: {
                        FOUR_RULER: {
                              FIRST_TITLE: "Não apresenta",
                              FIRST_EXPLANATION: "Não apresenta os comportamentos no dia-a-dia.",
                              SECOND_TITLE: "Em desenvolvimento",
                              SECOND_EXPLANATION: "O comportamento é inconstante. Há a necessidade de desenvolvimento.",
                              THIRD_TITLE: "Dentro da expectativa",
                              THIRD_EXPLANATION: "Apresenta os comportamentos no dia-a-dia conforme o que é esperado para o cargo.",
                              FOURTH_TITLE: "Supera a expecativa",
                              FOURTH_EXPLANATION: "Supera as espectativas: é procurado para ajudar, sugere melhorias e promove a mudança",
                        },
                        FIVE_RULER: {
                              FIRST_TITLE: "Não apresenta",
                              FIRST_EXPLANATION: "Não apresenta os comportamentos no dia-a-dia.",
                              SECOND_TITLE: "Em desenvolvimento",
                              SECOND_EXPLANATION: "O comportamento é inconstante. Há a necessidade de desenvolvimento.",
                              THIRD_TITLE: "Dentro da expectativa",
                              THIRD_EXPLANATION: "Apresenta os comportamentos no dia-a-dia conforme o que é esperado para o cargo.",
                              FOURTH_TITLE: "Supera a expecativa",
                              FOURTH_EXPLANATION: "Supera as espectativas: é procurado para ajudar, sugere melhorias e promove a mudança",
                              FIFTH_TITLE: "Quinto valor",
                              FFIFTH_EXPLANATION: "Quinto Supera as espectativas: é procurado para ajudar, sugere melhorias e promove a mudança",
                        }
                  }
            },

            CARREIRA: {
                  TITLE: "Carreira",
                  PDI: "PDI",
                  CROSSFEED: "Crossfeed",
                  PERFORMANCE_PESSOAL: "Performance Pessoal",
                  PERFORMANCE_TIME: "Performance do Time",
                  RESPONSE_TO_ME: "Respondidos para mim",
                  RESPONSE_FOR_ME: "Respondido por mim",
                  SENT: "Solicitados",
                  RECEIVED: "Recebidos",
                  DECLINE_FOR_ME: "Rejeitados por mim",
                  DECLINE_TO_ME: "Rejeitados para mim",
                  MY_SENT: "Solicitadas para mim",
                  SENT_TO_ME: "Minhas Solicitações",
                  MY_SENT_ARCHIVE: "Arquivadas",
                  COMPETENCIAS: "Competências Técnicas",
                  ITEMS: "Ítens Avaliados"
            },

            ATIVIDADES: {
                  TITLE: "Atividades",
            },
      };
      $translateProvider.useSanitizeValueStrategy('escape').translations('pt', translationsPT).useStaticFilesLoader({
            prefix: 'assets/t10n/',
            suffix: '.json'
      }).preferredLanguage('pt').fallbackLanguage('pt').registerAvailableLanguageKeys(['en', 'pt', 'pt_EI', 'pt_PM', 'pt_SP','pt_MA', 'pt_ZE','pt_SI', 'pt_CO', 'pt_KI', 'pt_CL'], {
            // 'en_US': 'en',
            // 'en_UK': 'en',
            'en_*': "en",
            'pt_BR': 'pt',
            'pt_EI': 'pt_EI',
            'pt_PM': 'pt_PM',
            'pt_SP': 'pt_SP',
            'pt_MA': 'pt_MA',
            'pt_ZE': 'pt_ZE',
            'pt_SI': 'pt_SI',
            'pt_CO': 'pt_CO',
            'pt_KI': 'pt_KI',
            'pt_CL': 'pt_CL',
            '*': 'pt'
      });
}]);
if (window.location.href.indexOf('planejamento') > -1) {
      angular.
      module('elofyApp').
      config(['$locationProvider', '$routeProvider',
            function config($locationProvider, $routeProvider) {
                  $routeProvider.
                  when('/', {
                        templateUrl: baseurl + 'assets/portal/templates/objetivos-globais.html?pattern=1',
                        controller: 'globalCtrl'
                  }).
                  when('/:objectiveId', {
                        templateUrl: baseurl + 'assets/portal/templates/detalhes-global.html?lnocache=1',
                        controller: 'detailsCtrl'
                  }).
                  when('/tatic/:taticId/:keyId?/:activityId?', {
                        templateUrl: baseurl + 'assets/portal/templates/detalhes-tatico.html?pattern=1',
                        controller: 'taticCtrl'
                  }).
                  otherwise('/');
            }
      ]);
}
if (window.location.href.indexOf('survey') > -1) {
      angular.
      module('elofyApp').
      config(['$locationProvider', '$routeProvider',
            function config($locationProvider, $routeProvider) {
                  $routeProvider.
                  when('/:surveyId/:evaluatedUserId?', {
                        templateUrl: baseurl + 'assets/portal/templates/survey/survey-answer.html',
                        controller: 'surveyCtrl'
                  }).
                  otherwise('/');
            }
      ]);
}
if (window.location.href.indexOf('cycleconfiguration') > -1) {
      angular.
      module('elofyApp').
      config(['$locationProvider', '$routeProvider',
            function config($locationProvider, $routeProvider) {
                  $routeProvider.
                  when('/:cycleid/:type', {
                        templateUrl: baseurl + 'assets/portal/templates/cycleconfiguration/cycleconfiguration-gerenciar.html?fja=V1.4.7.3'
                  }).
                  when('/', {
                        templateUrl: baseurl + 'assets/portal/templates/cycleconfiguration/cycle-configuration.html?fja=V1.4.7.3',
                  }).
                  otherwise('/');
            }
      ]);
}
if (window.location.href.indexOf('feedback') > -1) {
      angular.
      module('elofyApp').
      config(['$locationProvider', '$routeProvider',
            function config($locationProvider, $routeProvider) {
                  $routeProvider.
                  when('/:action?/:objId?', {
                        template: '<span ng-init="doAction()"></span>',
                  }).
                  otherwise('/');
            }
      ]);
}
/* if (window.location.href.indexOf('category') > -1) {
 angular.
 module('elofyApp').
 config(['$locationProvider', '$routeProvider',
 function config($locationProvider, $routeProvider) {
 $routeProvider.
 when('/', {
 templateUrl: baseurl + 'assets/portal/templates/category/form.html',
 controller: 'CategoryCtrl'
 }).
 otherwise('/');
 }
 ]);
 }
 if (window.location.href.indexOf('competencias') > -1) {
 angular.
 module('elofyApp').
 config(['$locationProvider', '$routeProvider',
 function config($locationProvider, $routeProvider) {
 $routeProvider.
 when('/', {
 templateUrl: baseurl + 'assets/portal/templates/competencias/form.html',
 controller: 'CompetenciasCtrl'
 }).
 otherwise('/');
 }
 ]);
 } */
'use strict';
elofy.filter('timeago', function() {
      // In the return function, we must pass in a single parameter which will be the data we will work on.
      // We have the ability to support multiple other parameters that can be passed into the filter optionally
      return function(input) {
            var output;
            // Do filter work here
            output = moment(input).fromNow()
            return output;
      }
});
elofy.filter('capitalize', function() {
      return function(input) {
            return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
      }
});
function decryptJson(response) {
      var res = response.response;
      var encryption = new Encryption();
      var nonceValue = 'elofy_nonce';
      var decrypted = encryption.decrypt(res, nonceValue);
      return JSON.parse(decrypted);
}
function formatMonetary(param) {
      
      var val = Math.round(Number(param) *100) / 100;
      if (isNaN(val)) return "0,00";
      var parts = val.toString().split(".");
      var integerPart = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ".");
      var decimalPart = ",00";
      if (parts[1]) {
            if (parts[1].length == 1) decimalPart = "," + parts[1] + "0";
            else decimalPart = "," + parts[1];
      }
      var num =  integerPart + decimalPart;
      return num;
}

function formatPercent(param) {
    var val = Math.round(Number(param) *100) / 100;
    if (isNaN(val)) return "0,00";
    var parts = val.toString().split(".");
    var integerPart = parts[0];
    var decimalPart = ",00";
    if (parts[1]) {
        if (parts[1].length == 1) decimalPart = "," + parts[1] + "0";
        else decimalPart = "," + parts[1];
    }
    var percent =  integerPart + decimalPart;
    return percent;
}

function formatInteger(param) {
    var val = Math.round(Number(param) *100) / 100;
    if (isNaN(val)) return "0";
    var parts = val.toString().split(".");
    
    return parts[0];
} 

function formatDecimal3(param) {
    var val = Math.round(Number(param) *1000) / 1000;
    if (isNaN(val)) return "0,000";
    var parts = val.toString().split(".");
        var integerPart = parts[0];
        var decimalPart = ",000";
        if (parts[1]) {
            if (parts[1].length == 1) decimalPart = "," + parts[1] + "00";
            else if (parts[1].length == 2) decimalPart = "," + parts[1] + "0";
            else decimalPart = "," + parts[1];
      }
      var num =  integerPart + decimalPart;
    
      return num;
}

function formatMonetaryShort(param) {
      var symbols = [
            { value: 1, symbol: '' },
            { value: 1e3, symbol: 'k' },
            { value: 1e6, symbol: 'M' },
            { value: 1e9, symbol: 'G' },
            { value: 1e12, symbol: 'T' },
            { value: 1e15, symbol: 'P' },
            { value: 1e18, symbol: 'E' }
      ];
      var digits = 3;
      const numToCheck = Math.abs(param);
      for (let i = symbols.length - 1; i >= 0; i--) {
            if (numToCheck >= symbols[i].value) {
                  const newNumber = (param / symbols[i].value).toFixed(digits);
                  return newNumber+symbols[i].symbol;
            }
      }
      return '0';
}
function formatPattern(param, pattern) {
      if (pattern == 1) return formatMonetary(param);
      else if (pattern == 2) return formatPercent(param);
      else if (pattern == 3) return formatInteger(param);
      else if (pattern == 5) return formatDecimal3(param);
      else if (pattern == 6) return formatMonetaryShort(param);
      else return param;
}
angular.module('Services', ['ngResource']).
factory('$years', function($rootScope, $q, $filter) {
      return {
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getYearByCompany',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var years = response.year;
                              for (var i = 0, leng = years.length; i < leng; i++) {
                                    years[i] = Number(years[i]);
                              };
                              resp.resolve(years);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$cycles', function($rootScope, $q, $filter) {
      return {
            getAll: function(id_usuario) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllCyclesByUser',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario
                        },
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getLastCycle: function(id_usuario) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getLastCycleByUser',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario
                        },
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            get: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleByIdObjetivo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getByYear: function(year) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCyclesByYear',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              year: year
                        },
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getCyclePeriod: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCyclePeriod',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getModifyCycleDetail: function(id_ciclo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getModifyCycleDetail',
                        method: 'POST',
                        dataType: 'json',
                        data: {id_ciclo: id_ciclo},
                        error: function() {},
                        success: function(response) {
                              response.inicio_vigencia = moment(response.inicio_vigencia).format('DD/MM/YYYY');
                              response.fim_vigencia = moment(response.fim_vigencia).format('DD/MM/YYYY');
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            insertCiclo: function(modifyData, replicas) {
                  var data = {
                        id_ciclo: modifyData.id_ciclo,
                        id_janela: modifyData.id_janela,
                        nome_ciclo: modifyData.nome_ciclo,
                        inicio_vigencia: modifyData.inicio_vigencia,
                        fim_vigencia: modifyData.fim_vigencia,
                        metologia: modifyData.metologia,
                        replicar_indicadores: modifyData.replicar_indicadores,
                        aberto: modifyData.aberto,
                        replicas: replicas
                  };
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'insertCiclo',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            editCiclo: function(modifyData, replicas) {
                  var data = {
                        id_ciclo: modifyData.id_ciclo,
                        id_janela: modifyData.id_janela,
                        nome_ciclo: modifyData.nome_ciclo,
                        inicio_vigencia: modifyData.inicio_vigencia,
                        fim_vigencia: modifyData.fim_vigencia,
                        metologia: modifyData.metologia,
                        replicar_indicadores: modifyData.replicar_indicadores,
                        aberto: modifyData.aberto,
                        replicas: replicas
                  };
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editCiclo',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getCyclesIdByDate: function(date) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCyclesIdByDate',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              date: date
                        },
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getCylesForSettings: function(nome = null, aberto = null, ativos = null) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCylesForSettings',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                                nome: nome,
                                aberto: aberto,
                                active: ativos
                        },
                        error: function() {},
                        success: function(response) {
                              for (var i = 0, leng = response.length; i < leng; i++) {
                                    response[i].inicio_vigencia = moment(response[i].inicio_vigencia).format('DD/MM/YYYY');
                                    response[i].fim_vigencia = moment(response[i].fim_vigencia).format('DD/MM/YYYY');
                              };
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            GetReviewById: function(user_id, avalicao_id, id_time, id_janela, id_ciclo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'GetReviewById',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              avalicao_id: avalicao_id,
                              team: id_time,
                              year: id_janela,
                              cycle: id_ciclo,
                        },
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getRevisionCycleByCompany: function(company_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getRevisionCycleByCompany',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              company_id: company_id,
                        },
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$dashboard', function($rootScope, $q, $filter) {
      return {
            get: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDashboard',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var dash = response;
                              resp.resolve(dash);
                        }
                  });
                  return resp.promise;
            },
            getNotifications: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getLastNotifications',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCycleNotifications: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleNotifications',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$surveys', function($rootScope, $q, $filter) {
      return {
            getAll: function(groupByType = true) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllSurvey?group_by_type=' + groupByType,
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getAllQuickSurvey: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllQuickSurvey',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getSurveyQuestionsById: function(id_questionario, id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getSurveyQuestionsById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_questionario': id_questionario,
                              'id_pesquisa': id_pesquisa
                        },
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getEvaluatedUsersBySurveyId: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getEvaluatedUsersBySurveyId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_pesquisa': id_pesquisa
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getSurveyQuestionsBySurveyId: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getSurveyQuestionsBySurveyId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_pesquisa': id_pesquisa
                        },
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            saveQuickSurvey: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveQuickSurvey',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var tatics = response;
                              resp.resolve(tatics);
                        }
                  });
                  return resp.promise;
            },
            saveNewSurvey: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveNewSurvey',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var tatics = response;
                              resp.resolve(tatics);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$globals', function($rootScope, $q, $filter) {
      return {
            get: function(year) {
                  
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGlobalGoalsYear',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              year: year
                        },
                        error: function() {},
                        success: function(response) {
                              var globals = response;
                              angular.forEach(globals, function(result, key) {
                                    angular.forEach(result.keys, function(keyresult, key1) {
                                          keyresult.last_date = moment(keyresult.last_date).format('DD/MM/YYYY');
                                    });
                              });
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            getTags: function(year) {
                  var resp = $q.defer();
                  var campoTag = $('#campoTag').val();
                  $.ajax({
                        url: baseurl + 'getGlobalGoalsYearTags',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              year: year,
                              campoTag: campoTag
                        },
                        error: function() {},
                        success: function(response) {
                              var globals = response;
                              angular.forEach(globals, function(result, key) {
                                    angular.forEach(result.keys, function(keyresult, key1) {
                                          keyresult.last_date = moment(keyresult.last_date).format('DD/MM/YYYY');
                                    });
                              });
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            updateRchaveDetails: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateRchaveDetails',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function(data) {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getGlobalsCycles: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGlobalsCycles',
                        method: 'GET',
                        dataType: 'json',
                        error: function(data) {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_objectives: function(year, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGlobalGoalsYearObjetivoPessoal',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              year: year,
                              type: type
                        },
                        error: function() {},
                        success: function(response) {
                              var globals = response;
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            details: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDetailsGoalsById',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {},
                        success: function(response) {
                              var details = response;
                              for (var i = 0, length = details.teams.length; i < length; i++) {
                                    details.teams[i].value = Number(details.teams[i].value);
                              };
                              resp.resolve(details);
                        }
                  });
                  return resp.promise;
            },
            tree: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGlobalsTree',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {},
                        success: function(response) {
                              var tree = response;
                              resp.resolve(tree);
                        }
                  });
                  return resp.promise;
            },
            favorite: function(id, favorite) {
                  var resp = $q.defer();
                  var method = favorite ? 'removeObjetivoFavorito' : 'addObjetivoFavorito';
                  $.ajax({
                        url: baseurl + method,
                        method: 'post',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {},
                        success: function(response) {
                              var favorites = response.favorites;
                              resp.resolve(favorites);
                        }
                  });
                  return resp.promise;
            },
            insert: function(data) {
                  if (data.teams) {
                        for (var i = 0, length = data.teams.length; i < length; i++) {
                              delete(data.teams[i].$$hashKey)
                        };
                  }
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addObjetivoGlobal',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var globals = response.globals;
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            edit: {
                  title: function(id, title) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editNameGlobal',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    nome: title
                              },
                              error: function() {},
                              success: function(response) {
                                    var title = response.nome;
                                    resp.resolve(title);
                              }
                        });
                        return resp.promise;
                  },
                  user: function(id, userId) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editResponsableGlobal',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    responsavel: userId
                              },
                              error: function() {},
                              success: function(response) {
                                    var user = response.responsible;
                                    resp.resolve(user);
                              }
                        });
                        return resp.promise;
                  },
                  users: {
                        remove: function(id, userId) {
                              var resp = $q.defer();
                              $.ajax({
                                    url: baseurl + 'removeCoResponsableGlobal',
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {
                                          id: id,
                                          responsavel: userId
                                    },
                                    error: function() {},
                                    success: function(response) {
                                          var users = response.coresponsaveis;
                                          resp.resolve(users);
                                    }
                              });
                              return resp.promise;
                        },
                        add: function(id, userId) {
                              var resp = $q.defer();
                              $.ajax({
                                    url: baseurl + 'addCoResponsableGlobal',
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {
                                          id: id,
                                          id_usuario: userId
                                    },
                                    error: function() {},
                                    success: function(response) {
                                          var users = response.coresponsaveis;
                                          resp.resolve(users);
                                    }
                              });
                              return resp.promise;
                        }
                  },
                  tags: {
                        remove: function(id, tagId) {
                              var resp = $q.defer();
                              $.ajax({
                                    url: baseurl + 'removeTagObjetive',
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {
                                          id: id,
                                          id_etiqueta: tagId
                                    },
                                    error: function() {},
                                    success: function(response) {
                                          var tags = response.etiquetas;
                                          resp.resolve(tags);
                                    }
                              });
                              return resp.promise;
                        },
                        add: function(id, tag) {
                              var resp = $q.defer();
                              $.ajax({
                                    url: baseurl + 'addTagObjetive',
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {
                                          id: id,
                                          id_etiqueta: tag
                                    },
                                    error: function() {},
                                    success: function(response) {
                                          var tags = response.etiquetas;
                                          resp.resolve(tags);
                                    }
                              });
                              return resp.promise;
                        }
                  },
                  color: function(id, color) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editColorObjetive',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    cor: color
                              },
                              error: function() {},
                              success: function(response) {
                                    var color = response.cor;
                                    resp.resolve(color);
                              }
                        });
                        return resp.promise;
                  },
                  description: function(id, description) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editDescriptionObjetive',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    descricao: description
                              },
                              error: function() {},
                              success: function(response) {
                                    var description = response.descricao;
                                    resp.resolve(description);
                              }
                        });
                        return resp.promise;
                  },
                  teams: function(id, teams) {
                        var resp = $q.defer();
                        for (var i = 0, length = teams.length; i < length; i++) {
                              delete(teams[i].$$hashKey)
                        };
                        $.ajax({
                              url: baseurl + 'editTeamsPesos',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id_objetivo: id,
                                    teams: teams
                              },
                              error: function() {},
                              success: function(response) {
                                    var teams = response.teams;
                                    resp.resolve(teams);
                              }
                        });
                        return resp.promise;
                  }
            }
      }
}).
factory('$objetivos', function($rootScope, $q, $filter) {
      
      return {
            getAll: function(id_user) {
                  
                  var resp = $q.defer();
                  
                  $.ajax({
                        url: baseurl + 'searchObjectivesByGestor',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_user': id_user
                        },
                        error: function() {
                              console.log('Erro!',id_user);
                        },
                        success: function(response) {
                              var dados = response;
                              resp.resolve(dados);
                        }
                  });
                  return resp.promise;
            }
      }
}).        
factory('$tatics', function($rootScope, $q, $filter) {
      return {
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getTaticsGoals',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var okrs = response;
                              for (var i = 0, leng = okrs.length; i < leng; i++) {
                                    okrs[i].status = Number(okrs[i].status);
                              };
                              resp.resolve(okrs);
                        }
                  });
                  return resp.promise;
            },
            getAll: function(year, id_time, id_cycle, id_user, is_estrategico, situation, type, color, workflow) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'searchAllGlobalTaticByUser',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'year': year,
                              'id_time': id_time,
                              'id_cycle': id_cycle,
                              'id_user': id_user,
                              'is_estrategico': is_estrategico,
                              'situation': situation,
                              'type': type,
                              'color': color,
                              'workflow': workflow
                        },
                        error: function() {},
                        success: function(response) {
                              var okrs = response;
                              for (var i = 0, leng = okrs.length; i < leng; i++) {
                                    okrs[i].status = Number(okrs[i].status);
                              };
                              resp.resolve(okrs);
                        }
                  });
                  return resp.promise;
            },
            getAllHierarchicaltatics: function(year, id_time, id_cycle, id_usuario, is_estrategico, situation, type, color) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'searchAllGlobalTaticByUserHierarchical',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'year': year,
                              'id_time': id_time,
                              'id_cycle': id_cycle,
                              'id_usuario': id_usuario,
                              'is_estrategico': is_estrategico,
                              'situation': situation,
                              'type': type,
                              'color': color
                        },
                        error: function() {},
                        success: function(response) {
                              var okrs = response;
                              for (var i = 0, leng = okrs.length; i < leng; i++) {
                                    okrs[i].status = Number(okrs[i].status);
                              };
                              resp.resolve(okrs);
                        }
                  });
                  return resp.promise;
            },
            getMyAllGlobaltatics: function(year, id_time, id_cycle, id_user) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'searchMyAllGlobalTatic',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'year': year,
                              'id_time': id_time,
                              'id_cycle': id_cycle,
                              'id_user': id_user
                        },
                        error: function() {},
                        success: function(response) {
                              
                              var okrs = response;
                              for (var i = 0, leng = okrs.length; i < leng; i++) {
                                    okrs[i].status = Number(okrs[i].status);
                              };
                              resp.resolve(okrs);
                        }
                  });
                  return resp.promise;
            },
            getImportKeyResults: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getImportKeyResults',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var keyresults = response;
                              for (var i = 0, leng = keyresults.length; i < leng; i++) {
                                    keyresults[i].status = 0;
                              };
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getImportIndicadors: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getImportIndicadors',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var keyresults = response;
                              for (var i = 0, leng = keyresults.length; i < leng; i++) {
                                    keyresults[i].status = 0;
                              };
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            removeKeyresultContrataMetas: function(key_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'removeKeyresultContrataMetas',
                        method: 'POST',
                        dataType: 'json',
                        data:{'key_id': key_id},
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            searchmyactivitiesokr: function(user_id, id_time, situation) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'searchMyAllActivitiesOkr',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'user_id': user_id,
                              'id_time': id_time,
                              'situation': situation
                        },
                        error: function() {},
                        success: function(response) {
                              var okrs = response;
                              for (var i = 0, leng = okrs.length; i < leng; i++) {
                                    okrs[i].status = Number(okrs[i].status);
                              };
                              resp.resolve(okrs);
                        }
                  });
                  return resp.promise;
            },
            download_activity_csv: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'downloadAllActivitiesOkr',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var tatics = response;
                              resp.resolve(tatics);
                        }
                  });
                  return resp.promise;
            },
            get_parent_objectives: function(year, goal_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGlobalParentGoalsYear',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              year: year,
                              goal_id: goal_id,
                        },
                        error: function() {},
                        success: function(response) {
                              var globals = response;
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            getObjectivoComments: function(id_objectivo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getObjectivoComments',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_objectivo: id_objectivo
                        },
                        error: function() {},
                        success: function(response) {
                              var globals = response;
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            saveObjectivoComments: function(id_objectivo, parent_id, comment) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveObjectivoComments',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_objectivo: id_objectivo,
                              parent_id: parent_id,
                              comment: comment
                        },
                        error: function() {},
                        success: function(response) {
                              var globals = response;
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            likeobjetivo: function(comment) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'likeobjetivo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_objetivo_comentario: comment.id_objetivo_comentario
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveObjectivoEmojiFaces: function(id_objectivo, id_objetivo_comentario, emoji) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveObjectivoEmojiFaces',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_objectivo: id_objectivo,
                              id_objetivo_comentario: id_objetivo_comentario,
                              tipo: emoji
                        },
                        error: function() {},
                        success: function(response) {
                              var globals = response;
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            get_child_objectives: function(year, goal_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGlobalChildGoalsYear',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              year: year,
                              goal_id: goal_id,
                        },
                        error: function() {},
                        success: function(response) {
                              var globals = response;
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            getResultadosDetailsById: function(id_key) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getResultadosDetailsById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_key: id_key,
                        },
                        error: function() {},
                        success: function(response) {
                              var globals = response;
                              resp.resolve(globals);
                        }
                  });
                  return resp.promise;
            },
            editKeyresultDetailMedicao: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editKeyresultDetailMedicao',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllForProfile: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGoalsTaticsProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var okrs = response;
                              for (var i = 0, leng = okrs.length; i < leng; i++) {
                                    okrs[i].status = Number(okrs[i].status);
                              };
                              resp.resolve(okrs);
                        }
                  });
                  return resp.promise;
            },
            getKeyresultHistory: function(id, forma) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getKeyresultHistory',
                        method: 'POST',
                        dataType: 'json',
                        data: {keyresult_id: id, forma:forma},
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            editKeyresultHistory: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editKeyresultHistory',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        processData: false,
                        contentType: false,
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            exportOkr: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'exportOkr',
                        method: 'POST',
                        dataType: 'json',
                        data: {

                        },
                        error: function(e) {},
                        success: function(response) {
                              console.log("exportOkr:", response);
                        }
                  });
                  return resp.promise;
            },
            user_goals: function(userid, cycle) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserGoals',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              user: userid,
                              cycle: cycle
                        },
                        error: function() {},
                        success: function(response) {
                              var tatics = response;
                              resp.resolve(tatics);
                        }
                  });
                  return resp.promise;
            },
            user_goals_for_review: function(userid, cycle_start, cycle_end) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserGoalsForReviewProfile',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              user: userid,
                              cycle_start: cycle_start,
                              cycle_end: cycle_end,
                        },
                        error: function() {},
                        success: function(response) {
                              var tatics = response;
                              resp.resolve(tatics);
                        }
                  });
                  return resp.promise;
            },
            getbyparentid: function(parent_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGoalsByParentIdOkr',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              parent_id: parent_id,
                        },
                        error: function() {},
                        success: function(response) {
                              var tatics = response;
                              resp.resolve(tatics);
                        }
                  });
                  return resp.promise;
            },
            details: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDetailsGoalsTaticsById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {},
                        success: function(response) {

                              var tatics = response;
                        
                              //console.log('tatics:>', tatics);
                              if (typeof tatics.weight != "undefined" && tatics.weight != null) {
                                    tatics.weight = Number(tatics.weight);
                                    var init = tatics.init.split('-');
                                    var end = tatics.end.split('-');
                                    tatics.init = init[2] + '/' + init[1] + '/' + init[0];
                                    tatics.end = end[2] + '/' + end[1] + '/' + end[0];
                              } else {
                                    tatics.init = '';
                                    tatics.end = '';
                              }
                              resp.resolve(tatics);
                              angular.forEach(tatics.keys, function(result, key) {
                                    angular.forEach(result.activities, function(taticact, key1) {
                                          taticact.end = moment(taticact.end).format('DD/MM/YYYY');
                                          console.log('5'+taticact.pattern);
                                    });
                              });
                        }
                  });
                  return resp.promise;
            },
            insert: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addObjetiveTatic',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var tatics = response;
                              resp.resolve(tatics);
                        }
                  });
                  return resp.promise;
            },
            /* tatic favorite */
            updateEstrategico: function(taticid, estrategico) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateEstrategico',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              taticid: taticid,
                              estrategico: estrategico
                        },
                        error: function() {},
                        success: function(response) {
                              var tatics = response;
                              resp.resolve(tatics);
                        }
                  });
                  return resp.promise;
            },
            /* tatic favorite end */
            insertobjectivetatic: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addObjetiveTaticProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var tatics = response;
                              resp.resolve(tatics);
                        }
                  });
                  return resp.promise;
            },
            deactive_objectivo: function(objectivo_id, active) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'changeObjectivoStatusById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              objectivo_id: objectivo_id,
                              active: active
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var channel = response;
                              resp.resolve(channel.canal);
                        }
                  });
                  return resp.promise;
            },
            editProgress: function(id, value) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editProgress',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id,
                              value: value
                        },
                        success: function(response) {
                              var title = response.value;
                              resp.resolve(title);
                        }
                  });
                  return resp.promise;
            },
            edit: {
                  title: function(id, title) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editNameTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    nome: title
                              },
                              error: function() {},
                              success: function(response) {
                                    var title = response.nome;
                                    resp.resolve(title);
                                    /*
                                    $.ajax({
                                          url: baseurl + 'resendObjective',
                                          method: 'POST',
                                          dataType: 'json',
                                          data: {
                                                id_objetivo: id
                                          }
                                    });
                                    */
                                    //$('#tags-status').hide();
                              }
                        });
                        return resp.promise;
                  },
                  updategoaltype: function(id, type) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editTypeTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    tipo: type
                              },
                              error: function() {},
                              success: function(response) {
                                    resp.resolve(response);
                              }
                        });
                        return resp.promise;
                  },
                  removecycle: function(id, id_ciclo) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'removeCycleTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    id_ciclo: id_ciclo
                              },
                              error: function() {},
                              success: function(response) {
                                    if (!response.error) {
                                          var tipo = response;
                                          resp.resolve(tipo);
                                    } else {
                                          alert(response.error_message);
                                    }
                              }
                        });
                        return resp.promise;
                  },
                  removeshrdteam: function(id, id_time) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'removeSharedTeam',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    id_time: id_time
                              },
                              error: function() {},
                              success: function(response) {
                                    if (!response.error) {
                                          var tipo = response;
                                          resp.resolve(tipo);
                                    } else {
                                          alert(response.error_message);
                                    }
                              }
                        });
                        return resp.promise;
                  },
                  addcycle: function(id, id_ciclo) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'addCycleTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    id_ciclo: id_ciclo
                              },
                              error: function() {},
                              success: function(response) {
                                    var tipo = response;
                                    resp.resolve(tipo);
                              }
                        });
                        return resp.promise;
                  },
                  addteamobj: function(id, id_time) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'addSharedTeamTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    id_time: id_time
                              },
                              error: function() {},
                              success: function(response) {
                                    var tipo = response;
                                    resp.resolve(tipo);
                              }
                        });
                        return resp.promise;
                  },
                  updategoalstatus: function(id, status) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editStatusTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    status: status
                              },
                              error: function() {},
                              success: function(response) {
                                    var status = response.status;
                                    resp.resolve(status);
                              }
                        });
                        return resp.promise;
                  },
                  updategoaltags: function(id, tags) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editTagsTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    tags: tags
                              },
                              error: function() {},
                              success: function(response) {
                                    resp.resolve(response);
                              }
                        });
                        return resp.promise;
                  },
                  updateativotype: function(id, active) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editAtivoTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    active: active
                              },
                              error: function() {},
                              success: function(response) {
                                    var active = response.active;
                                    resp.resolve(active);
                              }
                        });
                        return resp.promise;
                  },
                  updatecortype: function(id, value) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editCorTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    value: value
                              },
                              error: function() {},
                              success: function(response) {
                                    var active = response.cor;
                                    resp.resolve(active);
                              }
                        });
                        return resp.promise;
                  },
                  cycles: function(id, cycles) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editCyclesTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    cycles: cycles
                              },
                              error: function() {
                                    //
                              },
                              success: function(response) {
                                    var cycles = response.cycles;
                                    resp.resolve(cycles);
                              }
                        });
                        return resp.promise;
                  },
                  team: function(id, teamId) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editarTeamsObjetive',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    id_time: teamId
                              },
                              error: function() {
                                    //
                              },
                              success: function(response) {
                                    var user = response.team;
                                    resp.resolve(user);
                              }
                        });
                        return resp.promise;
                  },
                  user: function(id, userId) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editResponsableTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    responsavel: userId
                              },
                              error: function() {
                                    //
                              },
                              success: function(response) {
                                    var user = response.responsible;
                                    resp.resolve(user);
                              }
                        });
                        return resp.promise;
                  },
                  users: {
                        remove: function(id, userId) {
                              var resp = $q.defer();
                              $.ajax({
                                    url: baseurl + 'removeCoResponsableTatic',
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {
                                          id: id,
                                          responsavel: userId
                                    },
                                    error: function() {
                                          //
                                    },
                                    success: function(response) {
                                          var users = response.coresponsaveis;
                                          resp.resolve(users);
                                    }
                              });
                              return resp.promise;
                        },
                        add: function(id, userId) {
                              var resp = $q.defer();
                              $.ajax({
                                    url: baseurl + 'addCoResponsableTatic',
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {
                                          id: id,
                                          id_usuario: userId
                                    },
                                    error: function() {
                                          //
                                    },
                                    success: function(response) {
                                          var users = response.coresponsaveis;
                                          resp.resolve(users);
                                    }
                              });
                              return resp.promise;
                        }
                  },
                  tags: {
                        remove: function(id, tagId) {
                              var resp = $q.defer();
                              $.ajax({
                                    url: baseurl + 'removeTagTatic',
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {
                                          id: id,
                                          id_etiqueta: tagId
                                    },
                                    error: function() {
                                          //
                                    },
                                    success: function(response) {
                                          var tags = response.etiquetas;
                                          resp.resolve(tags);
                                    }
                              });
                              return resp.promise;
                        },
                        add: function(id, tag) {
                              var resp = $q.defer();
                              $.ajax({
                                    url: baseurl + 'addTagTatic',
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {
                                          id: id,
                                          id_etiqueta: tag
                                    },
                                    error: function() {
                                          //
                                    },
                                    success: function(response) {
                                          var tags = response.etiquetas;
                                          resp.resolve(tags);
                                    }
                              });
                              return resp.promise;
                        }
                  },
                  weight: function(id, weight) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editPesoTatic',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    weight: weight
                              },
                              error: function() {
                                    //
                              },
                              success: function(response) {
                                    var weight = response.peso;
                                    resp.resolve(weight);
                              }
                        });
                        return resp.promise;
                  },
                  goalparentdata: function(id, estrategico, parent_id /* , link_type */ ) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editGoalParentData',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    estrategico: estrategico,
                                    parent_id: parent_id
                                    /* ,
                                     link_type: link_type */
                              },
                              error: function() {
                                    //
                              },
                              success: function(response) {
                                    var goaldata = response.goaldata;
                                    resp.resolve(goaldata);
                              }
                        });
                        return resp.promise;
                  },
                  description: function(id, description) {
                        var resp = $q.defer();
                        $.ajax({
                              url: baseurl + 'editDescriptionObjetive',
                              method: 'POST',
                              dataType: 'json',
                              data: {
                                    id: id,
                                    descricao: description
                              },
                              error: function() {
                                    //
                              },
                              success: function(response) {
                                    var description = response.descricao;
                                    resp.resolve(description);
                              }
                        });
                        return resp.promise;
                  }
            }
      }
}).
factory('$key', function($rootScope, $q, $filter) {
      return {
            details: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDetailsKeyById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var key = response;
                              for (var i = 0, leng = key.activities.length; i < leng; i++) {
                                    var init = key.activities[i].init.split('-');
                                    var end = key.activities[i].end.split('-');
                                    key.activities[i].init = init[2] + '/' + init[1] + '/' + init[0];
                                    key.activities[i].end = end[2] + '/' + end[1] + '/' + end[0];
                              };
                              key.weight = Number(key.weight);
                              resp.resolve(key);
                        }
                  });
                  return resp.promise;
            },
            insert: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addResultadoChave',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var keys = response.keys;
                              resp.resolve(keys);
                        }
                  });
                  return resp.promise;
            },
            addIndicador: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addIndicador',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var keys = response.keys;
                              resp.resolve(keys);
                        }
                  });
                  return resp.promise;
            },
            import: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'importResultadoChave',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            edit: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editResultadoChave',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var keys = response.keys;
                              resp.resolve(keys);
                        }
                  });
                  return resp.promise;
            },
            deleteKeyResultsByid: function(key_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'deleteResultadoChave',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id': key_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var keys = response.keys;
                              resp.resolve(keys);
                        }
                  });
                  return resp.promise;
            },
            measure: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addMedicao',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        processData: false,
                        contentType: false,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    for (var i = 0, leng = response.medicoes.length; i < leng; i++) {
                                          response.medicoes[i].date = moment(response.medicoes[i].date).format('DD/MM/YYYY');
                                    };
                                    resp.resolve(response);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            measureList: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMedicaoByIdRChave',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var measures = response.medicoes;
                                    for (var i = 0, leng = measures.length; i < leng; i++) {
                                          measures[i].date = moment(measures[i].date).format('DD/MM/YYYY');
                                    };
                                    resp.resolve(measures);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            getMedicaosByIdKey: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMedicaosByIdKey',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var measures = response.medicoes;
                                    for (var i = 0, leng = measures.length; i < leng; i++) {
                                          measures[i].date = moment(measures[i].date).format('DD/MM/YYYY');
                                    };
                                    resp.resolve(measures);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            getContratosByIdKey: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getContratosByIdKey',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_user: function(id) {
                  var resp = $q.defer();
                  console.log("update_user in key");
                  $.ajax({
                        url: baseurl + 'update_user',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              console.log("error");
                        },
                        success: function(response) {
                              console.log(response);
                              resp.resolve(response);
                        }
                  });
                  console.log(resp.promise);
                  return resp.promise;
            }
      }
}).
factory('$activities', function($rootScope, $q, $filter) {
      return {
            details: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDetailsActivities',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var init = response.init.split('-');
                              var end = response.end.split('-');
                              response.init = init[2] + '/' + init[1] + '/' + init[0];
                              response.end = end[2] + '/' + end[1] + '/' + end[0];
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            insert: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addAtividade',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    for (var i = 0, leng = response.activities.length; i < leng; i++) {
                                          var init = response.activities[i].init.split('-');
                                          var end = response.activities[i].end.split('-');
                                          response.activities[i].init = init[2] + '/' + init[1] + '/' + init[0];
                                          response.activities[i].end = end[2] + '/' + end[1] + '/' + end[0];
                                    };
                                    resp.resolve(response.activities);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            edit: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editAtividade',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    for (var i = 0, leng = response.activities.length; i < leng; i++) {
                                          var init = response.activities[i].init.split('-');
                                          var end = response.activities[i].end.split('-');
                                          response.activities[i].init = init[2] + '/' + init[1] + '/' + init[0];
                                          response.activities[i].end = end[2] + '/' + end[1] + '/' + end[0];
                                    };
                                    resp.resolve(response.activities);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            getActivityChartData1: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getActivityChartData1',
                        method: 'POST',
                        dataType: 'json',
                        data: {},
                        error: function(data) {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getActivityChartData2: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getActivityChartData2',
                        method: 'POST',
                        dataType: 'json',
                        data: {},
                        error: function(data) {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            updateActivityProgress: function(id, finished, cancelled, percentage) {
                  var resp = $q.defer();
                  var flag = finished ? 1 : 0;
                  flag = cancelled ? 3 : flag;
                  $.ajax({
                        url: baseurl + 'updateActivityProgress',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              activity_id: id,
                              flag: flag,
                              percentage: percentage
                        },
                        error: function(data) {
                              console.log("error:", data);
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            updateActivityDetails: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateActivityDetails',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function(data) {
                              console.log("update detail error:", data);
                        },
                        success: function(response) {
                              resp.resolve(response);
                              console.log("update success", response);
                        }
                  });
                  return resp.promise;
            },
            addActivityDetails: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addActivityDetails',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function(data) {
                              console.log("add detail error:", data);
                        },
                        success: function(response) {
                              resp.resolve(response);
                              console.log("add success", response);
                        }
                  });
                  return resp.promise;
            },
            updateSituationToFinished: function(activity_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateSituationToFinished',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              activity_id: activity_id
                        },
                        error: function(data) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            addActivityComment: function(id, comment) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addActivityComment',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              activity_id: id,
                              comment: comment
                        },
                        error: function(data) {
                              console.log("error:", data);
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getActivityComments: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getActivityComments',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              activity_id: id
                        },
                        error: function(data) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getActivityObjectives: function(filter, params) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getActivityObjectives',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              filter: filter,
                              f_responsavel: params.responsavels,
                              f_cycle: params.cycle,
                              f_team: params.team
                        },
                        error: function(data) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getActivityResultados: function(objective_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getActivityResultados',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              objective_id: objective_id
                        },
                        error: function(data) {
                              console.log("error:", data);
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            isValidImage: function(src) {
                  var deferred = $q.defer();
                  var image = new Image();
                  image.onerror = function() {
                        deferred.resolve(false);
                  };
                  image.onload = function() {
                        deferred.resolve(true);
                  };
                  image.src = src;
                  return deferred.promise;
            }
      }
}).factory('$results', function($rootScope, $q, $filter) {
      var selectedNineBoxDetails = [];
      return {
            saveNineBoxDetails:function (data) {
                selectedNineBoxDetails = data;
                console.log("save:", data);
            },
            getNineBoxDetails:function () {
                  console.log("get:", selectedNineBoxDetails);
                return selectedNineBoxDetails;
            },
            list: function(user_id, team_id, cycle_id, nivel_id, gestor_id, notGestor) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllRevisaoCiclo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_time': team_id,
                              'id_cycle': cycle_id,
                              'id_user': user_id,
                              'id_nivel': nivel_id,
                              'id_gestor': gestor_id,
                              'gestor': notGestor
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            performanceDoTime: function(cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getRevisaoCicloPerformanceDoTime',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_cycle': cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getYouTimeByUserCycle: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getYouTimeByUserCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_user': user_id,
                              'id_cycle': cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getYouTimeByIdProtocol: function(id_protocolo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getYouTimeByIdProtocol',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_protocolo': id_protocolo
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getYouTimeNotification: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getYouTimeNotification',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            closeYouTimeByIdProtocol: function(id_protocolo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'closeYouTimeByIdProtocol',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_protocolo': id_protocolo
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            confirmYouTimeByIdProtocol: function(id_protocolo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'confirmYouTimeByIdProtocol',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_protocolo': id_protocolo
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            generateResultPDF: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'generateResultPDF',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function(e) {
                              console.log("error:", e);
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            list9box: function(teams = null, cycles = null, responsibles = null, nivies = null, usuarios = null) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllRevisaoCiclo9Box',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              teams: teams,
                              cycles: cycles,
                              responsibles: responsibles,
                              nivies: nivies,
                              usuarios: usuarios
                        },
                        error: function(e) {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update9box: function(id_revisao_ciclo_score, nine_box_value) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateNineBoxByUser',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo_score: id_revisao_ciclo_score,
                              nine_box_value: nine_box_value,
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update9boxdetails: function(id_revisao_ciclo_score, nine_box_value, feedback) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateNineBoxDetailsByUser',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo_score: id_revisao_ciclo_score,
                              nine_box_value: nine_box_value,
                              feedback: feedback
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            reset9boxcalibrado: function(id_revisao_ciclo_score) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'resetNineBoxCalibrado',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo_score: id_revisao_ciclo_score
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCommentsByValue: function(id_usuario, id_ciclo, id_valores, id_tipo_avaliacao) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCommentsByValue',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              id_ciclo: id_ciclo,
                              id_valores: id_valores,
                              id_tipo_avaliacao: id_tipo_avaliacao
                        },
                        error: function() {
                              //  
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCommentsByResultado: function(id_usuario, id_ciclo, id_pergunta, id_tipo_avaliacao) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCommentsByResultado',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              id_ciclo: id_ciclo,
                              id_pergunta: id_pergunta,
                              id_tipo_avaliacao: id_tipo_avaliacao
                        },
                        error: function() {
                              //  
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCommentsByCompetencia: function(id_usuario, id_ciclo, id_competencia, id_tipo_avaliacao) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCommentsByCompetencia',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              id_ciclo: id_ciclo,
                              id_competencia: id_competencia,
                              id_tipo_avaliacao: id_tipo_avaliacao
                        },
                        error: function() {
                              //  
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCommentsByPotencial: function(id_usuario, id_ciclo, id_pergunta, id_tipo_avaliacao) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCommentsByPotencial',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              id_ciclo: id_ciclo,
                              id_pergunta: id_pergunta,
                              id_tipo_avaliacao: id_tipo_avaliacao
                        },
                        error: function() {
                              //  
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCommentsByOutraEtapa: function(id_usuario, id_ciclo, id_pergunta, id_tipo_avaliacao) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCommentsByOutraEtapa',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              id_ciclo: id_ciclo,
                              id_pergunta: id_pergunta,
                              id_tipo_avaliacao: id_tipo_avaliacao
                        },
                        error: function() {
                              //  
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCareerVisibleByCycle: function(cycle = null) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCareerVisibleByCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              cycle: cycle
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getResultsFromUserByCycle: function(user_id = null, cycle = null) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getResultsFromUserByCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle: cycle
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCompetenciaFromUserByCycle: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCompetenciaFromUsuarioByCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getOutraEtapaFromUserByCycle: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getOutraEtapaFromUsuarioByCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            grantEvaluationAccess: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'grantEvaluationAccess',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getEvaluationAccess: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getEvaluationAccess',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            revokeEvaluationAccess: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'revokeEvaluationAccess',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getValoresFromUsuarioByCycle: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getValoresFromUsuarioByCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getPotencialFromUsuarioByCycle: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPotencialFromUsuarioByCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getResultadoFromUsuarioByCycle: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getResultadoFromUsuarioByCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getUserAveragesScores: function(user_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserAveragesScores',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getSingleScoresByRevisaoCicloId: function(revisao_ciclo_id, user_id, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getSingleScoresByRevisaoCicloId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              revisao_ciclo_id: revisao_ciclo_id,
                              user_id: user_id,
                              type: type
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveCalibratedScores: function(scores) {
                  console.log("enviando", scores);
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveCalibratedScores',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              scores: angular.toJson(scores)
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveCalibratedAverage: function(id, newAverage, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveCalibratedAverage',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo_score: id,
                              calibrated_average: newAverage,
                              type: type
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveScoreSuggestion: function(id, suggestion) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveScoreSuggestion',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo_score: id,
                              id_recomendacao: suggestion
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$feedbacks', function($rootScope, $q) {
      return {
            list: function(teams = null, teamsRemetente = null, users = null, usersRemetente = null, tipos_feedback = null, acaos=null, ini_date = null, end_date = null, filtroSemRetorno = null) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllFeedbacksByCompany',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              teams: teams,
                              teamsRemetente: teamsRemetente,
                              users: users,
                              usersRemetente: usersRemetente,
                              acaos: acaos,
                              tipos_feedback: tipos_feedback,
                              ini_date: ini_date,
                              end_date: end_date,
                              filtroSemRetorno: filtroSemRetorno
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getFeedbackChartData: function(teams = null, teamsRemetente = null, users = null, usersRemetente = null, tipos_feedback = null, acaos=null, ini_date = null, end_date = null, filtroSemRetorno = null) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getFeedbackChartData',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              teams: teams,
                              teamsRemetente: teamsRemetente,
                              users: users,
                              usersRemetente: usersRemetente,
                              acaos: acaos,
                              tipos_feedback: tipos_feedback,
                              ini_date: ini_date,
                              end_date: end_date,
                              filtroSemRetorno: filtroSemRetorno
                        },
                        error: function(data) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getFeedbackComments: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getFeedbackComments',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              feedback_id: id
                        },
                        error: function(data) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            addFeedbackComment: function(id, comment, touser) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addFeedbackComment',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              feedback_id: id,
                              comment: comment,
                              touser: touser
                        },
                        error: function(data) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$indicators', function($rootScope, $q) {
      return {
            list: function(nome = null, times = null, responsavels = null, objectives = null, cycles = null, active = null) {
                  var resp = $q.defer();
                  var data = {
                              nome: nome,
                              times: times,
                              responsavels: responsavels,
                              objectives: objectives,
                              cycles: cycles,
                              active: active
                        };
                  $.ajax({
                        url: baseurl + 'getAllKeyResults',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getRchaveHistory: function(codigo = null, nome = null) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getRchaveHistory',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              codigo: codigo,
                              nome: nome
                        },
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getRchaveHistoryDetailsById: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getRchaveHistoryDetailsById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id:id
                        },
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveRchaveHistory: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveRchaveHistory',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveRchaveHistoryHeader: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveRchaveHistoryHeader',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            addRchaveHistoryHeader: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addRchaveHistoryHeader',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveRchaveHistoryValues: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveRchaveHistoryValues',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getObjectives: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getObjectives',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              
                        },
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCodigoes: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCodigoes',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              
                        },
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getRchaveHistoricNames: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getRchaveHistoricNames',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              
                        },
                        error: function() {
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$elos', function($rootScope, $q) {
      return {
            insert: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'setElo',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        processData: false,
                        contentType: false,
                        error: function() {},
                        success: function(response) {
                              resp.resolve();
                        }
                  });
                  return resp.promise;
            },
            unread: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUnreadElosTotal',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            markEloAsRead: function(arrayIds) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'markEloAsRead',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              ids: arrayIds
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            like: function(elo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'likeElo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: elo.id
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            deleteFeed: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'deleteFeed',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            editFeed: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editFeed',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        processData: false,
                        contentType: false,
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            comment: function(elo, comment, mencoes) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'commentElo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: elo.id,
                              comment: comment,
                              mencoes: mencoes
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getComments: function(elo, lastLoadedId, limit) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getEloComments',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'elo_id': elo.id,
                              'lastLoadedId': lastLoadedId,
                              'limit': limit
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getLikes: function(elo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getLikesFromElo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id': elo.id
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getByCompany: function(companyId, limit, lastEloIdLoaded, hashtagFilter) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getElosByCompanyId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'companyId': companyId,
                              'limit': limit,
                              'lastEloIdLoaded': lastEloIdLoaded,
                              'hashtagFilter': hashtagFilter
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            toMe: function(limit, lastEloIdLoaded) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getElosIHaveBeenMentioned',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'limit': limit,
                              'lastEloIdLoaded': lastEloIdLoaded
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getStats: function(topHashHourInterval) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getElosStatsFromCurrentUser',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'tophash_hour_interval': topHashHourInterval
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$zapier', function($rootScope, $q) {
      return {
            getToken: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getZapierToken',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getApiToken: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getApiToken',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            generateToken: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'generateZapierToken',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            generateApiToken: function(expire_date) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'generateApiToken',
                        method: 'POST',
                        dataType: 'json',
                        data:{ 'expire_date': expire_date },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$users', function($rootScope, $q) {
      return {
            me: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserLoggedIn',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                             var user = decryptJson(response);
                               // var user = response;
                              for (var i = 0, leng = user.feed.length; i < leng; i++) {
                                    user.feed[i].timeAgo = moment(user.feed[i].date).fromNow();
                              };
                              user.data_aniversario = user.data_aniversario ? moment(user.data_aniversario).format('DD/MM/YYYY') : false;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            change_user_password: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'changeUserPasswordProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              $('#SolicitarModal').modal('hide');
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            removeSocialAccount: function(type, id_usuario) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'removeSocialAccount',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              type: type,
                              id_usuario: id_usuario
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            setUserProfilePicture: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'setUserProfilePicture',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            cancelToSaveImage: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'cancelToSaveImage',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllUserForCompanyActive',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getByTypeOrLevel: function(type, level) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllUserFromCompanyByTypeOrLevel',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'type': type,
                              'level': level
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getGestors: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGestors',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getUsersFromGestor: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllUsersFromGestor',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getUsersFromGestorByCycle: function(id_cycle) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllUsersFromGestorByCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_cycle': id_cycle
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getAllUsersCombo: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllUsersCombo',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            get_team_users: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllUserForTeamProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            get_current_user_team_member: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCurrentUserTeamMember',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            all: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllUserForCompany',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getAllUserForCompanyId: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllUserForCompanyId',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getMatrizProjects: function(nome, responsavel, corresponsavel, ativo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMatrizProjects',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              nome: nome,
                              responsavel: responsavel,
                              corresponsavel: corresponsavel,
                              ativo: ativo
                        },
                        error: function() {
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getMatrizProjectsForCompany: function(nome, responsavel, corresponsavel, ativo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMatrizProjectsForCompany',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            /*getMatrizProjectsForUser: function(userid) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMatrizProjectsForUser',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              userid: userid
                        },
                        error: function() {
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },*/
            insertMatrizProjects: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'insertMatrizProjects',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            editMatrizProjects: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editMatrizProjects',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {},
                        success: function(response) {
                              var cycles = response;
                              resp.resolve(cycles);
                        }
                  });
                  return resp.promise;
            },
            getUsersNotInGivenCycle: function(cycleId, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUsersNotInGivenCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId,
                              'type': type
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getUsersForPeerSelection: function(cycleId) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUsersForPeerSelection',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getIdRevisaoCycleById: function(cycleId) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getIdRevisaoCycleById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            profile: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'searchMyAllGlobalTaticProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            profileacivities: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAcivitiesProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            activities_career: function(id_usuario, ativade_time, situacao) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAcivitiesProfileCareer',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              ativade_time: ativade_time,
                              situacao: situacao
                        },
                        error: function(e) {
                              console.log("error:", e);
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_activities_hierarchy: function(id_usuario, filter, params) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAcivitiesHierarchy',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              filter: filter,
                              f_responsavel: params.responsavels,
                              f_cycle: params.cycle,
                              f_team: params.team,
                              filter_time: params.filter_time
                        },
                        error: function(e) {},
                        success: function(response) {
                              console.log("query success: ", response);
                              for (var i = 0, leng = response.length; i < leng; i++) {
                                    response[i].fim = moment(response[i].fim).format('DD/MM/YYYY');
                                    response[i].init = moment(response[i].init).format('DD/MM/YYYY');
                              };
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            activities_career_hierarchy: function(id_usuario, filter, params, objid) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAcivitiesProfileCareerHierarchy',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              filter: filter,
                              f_responsavel: params.responsavels,
                              f_cycle: params.cycle,
                              f_team: params.team,
                              objid: objid
                        },
                        error: function(e) {
                              console.log("error hierarchy:", e);
                        },
                        success: function(response) {
                              for (var i = 0, leng = response.length; i < leng; i++) {
                                    response[i].fim = moment(response[i].fim).format('DD/MM/YYYY');
                                    response[i].init = moment(response[i].init).format('DD/MM/YYYY');
                              };
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            activity_detail_career: function(activity_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAcivityDetailProfileCareer',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              activity_id: activity_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            dismissActivity: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'dismissAcivitiesProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_user_updates: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserUpdatesProfile',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_search_user_updates: function(user_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getSearchUserUpdatesProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            search_user_data: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'searchUserDataProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_user_update_by_id: function($id_protocolo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserUpdateByIDProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_protocolo': $id_protocolo
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_search_user_update_by_id: function($id_protocolo, user_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getSearchUserUpdateByIDProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_protocolo': $id_protocolo,
                              'user_id': user_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_privacy_and_review_status: function($id_protocolo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserStatusByIDProtocoloProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_protocolo': $id_protocolo
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_search_user_privacy_and_review_status: function($id_protocolo, user_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getSearchUserStatusByIDProtocoloProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_protocolo': $id_protocolo,
                              'user_id': user_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            checkin_status_update_by_id: function($id_protocolo, $status) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'checkinStatusUpdateById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_protocolo': $id_protocolo,
                              'status': $status
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_questionerios_profile: function(tipo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserQuestionsForUpdatesProfile',
                        method: 'POST',
                        dataType: 'json',
                        data:{tipo:tipo},
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            avalicao_details_by_id: function(user_id, year, cycle) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAvalicaoDetailsById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              year: year,
                              cycle: cycle
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_profile_goal_detail: function(goal_id, user_id, cycle) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getProfileGoalDetailById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              goal_id: goal_id,
                              user_id: user_id,
                              cycle: cycle
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_avalicao_detail_ciclo: function(user_id, cycle, avalicao_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAvalicaoDetailDetailById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle: cycle,
                              avalicao_id: avalicao_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_fases_by_ciclo_id: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getFasesByCycleId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id,
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_ciclo_component_type: function(user_id, cycle_id, click_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getComponentType',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              cycle_id: cycle_id,
                              click_id: click_id,
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_user_update_profile: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveUserUpdateDataProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            save_user_update_career: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveUserUpdateDataCareer',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            save_user_comment: function($answer_id, $comment) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveUserCommentProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'answer_id': $answer_id,
                              'comment': $comment
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            delete_comment: function($comment_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'deleteCommentProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'comment_id': $comment_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var user = response;
                              resp.resolve(user);
                        }
                  });
                  return resp.promise;
            },
            get_my_team_by_empresa: function(start_date, end_date) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMyTimeForProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              start_date: start_date,
                              end_date: end_date
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            withoutTeam: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserWithoutTeam',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            myCompencias: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMyCompenciasProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            my_skill_profile: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMySkillsProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            my_received_feedback_profile: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMyFeedbacksProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            getFeedbackById: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getFeedbackById',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id': id,
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_feedback_notification: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getFeedbackNotification',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var feedbacks = response;
                              resp.resolve(feedbacks);
                        }
                  });
                  return resp.promise;
            },
            get_feedback_reply_notification: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getFeedbackReplyNotification',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var feedbacks = response;
                              resp.resolve(feedbacks);
                        }
                  });
                  return resp.promise;
            },
            read_feedback_notification: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'readFeedbackNotification',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var feedbacks = response;
                              resp.resolve(feedbacks);
                        }
                  });
                  return resp.promise;
            },
            read_feedback_reply_notification: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'readFeedbackReplyNotification',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var feedbacks = response;
                              resp.resolve(feedbacks);
                        }
                  });
                  return resp.promise;
            },
            user_received_feedback_profile: function(user_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserFeedbacksProfile',
                        method: 'POST',
                        data: {
                              'user_id': user_id
                        },
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var feedbacks = response;
                              resp.resolve(feedbacks);
                        }
                  });
                  return resp.promise;
            },
            getUserFeedbacksByCycleId: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserFeedbacksByCycleId',
                        method: 'POST',
                        data: {
                              'user_id': user_id,
                              'cycle_id': cycle_id,
                        },
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var feedbacks = response;
                              resp.resolve(feedbacks);
                        }
                  });
                  return resp.promise;
            },
            getUserGoalsByCycleId: function(user_id, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserGoalsByCycleId',
                        method: 'POST',
                        data: {
                              'user_id': user_id,
                              'cycle_id': cycle_id,
                        },
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var feedbacks = response;
                              resp.resolve(feedbacks);
                        }
                  });
                  return resp.promise;
            },
            my_given_feedback_profile: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMyGivenFeedbacksProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            my_private_notes_profile: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMyPrivateNotesProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            my_requested_feedback_profile: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMyRequestedFeedbacksProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            my_requested_feedback_by_me: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMyRequestedFeedbacksByMe',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            my_performance_potencial_profile: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMyPerformancePotentialProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            insertfeedback: function(tousers, description, valore_id, ratingScore, tipo_feedback, idFeedback) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'insertMyFeedbackProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              tousers: tousers,
                              description: description,
                              valore_id: valore_id,
                              score: ratingScore,
                              tipo_feedback: tipo_feedback,
                              idFeedback: idFeedback,
                        },
                        error: function() {},
                        success: function(response) {
                              $('#SolicitarModal').modal('hide');
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            insertprivatenotes: function(to_user, description, valore_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'insertMyPrivateNoteProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              to_user: to_user,
                              description: description,
                              valore_id: valore_id,
                        },
                        error: function() {},
                        success: function(response) {
                              $('#SolicitarModal').modal('hide');
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            requestfeedback: function(user, description, prazo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'requestFeedbackProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              requestuser: user,
                              description: description,
                              prazo: prazo,
                        },
                        error: function() {},
                        success: function(response) {
                              $('#SolicitarModal').modal('hide');
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            update_todo_profile: function(activity_id, todo, atraso) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateTodoProfile',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              activity_id: activity_id,
                              todo: todo,
                              atraso: atraso,
                        },
                        error: function() {},
                        success: function(response) {
                              $('#SolicitarModal').modal('hide');
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            insert: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'new_user_data',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        processData: false,
                        contentType: false,
                        error: function(e) {
                              console.log("---error:--", e);
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var users = response.users;
                                    resp.resolve(users);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            details: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDetailsUser',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              user_id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var details = response;
                              details.birthday = details.birthday ? moment(details.birthday).format('DD/MM/YYYY') : false;
                              details.dismissal = details.dismissal ? moment(details.dismissal).format('DD/MM/YYYY') : false;
                              details.nascimento = details.nascimento ? moment(details.nascimento).format('DD MMMM') : false;
                              resp.resolve(details);
                        }
                  });
                  return resp.promise;
            },
            detailsByIds: function(ids) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDetailsUsers',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              ids: ids
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var details = response;
                              resp.resolve(details);
                        }
                  });
                  return resp.promise;
            },
            edit: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editUserData',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        processData: false,
                        contentType: false,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var user = response.user;
                                    resp.resolve(user);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            emplogoupload: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editUserImg',
                        type: 'POST',
                        data: data,
                        dataType: 'json',
                        contentType: false,
                        processData: false,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              $('#emp-logo-user-img').modal('hide');
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getmyteammembers: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getmyteammembers',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            adminusuariosTime: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAdminusuariosTime',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            nonadminusuariosTime: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getNonadminusuariosTime',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            lastevaluations: function(id_usuario) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getLastEvaluations',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            userpotentialreviewforprofile: function(id_usuario, avalicao_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserPotentialForReviewProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              avalicao_id: avalicao_id
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            userpotentialByCycle: function(id_usuario, cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'userpotentialByCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              cycle_id: cycle_id
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            userskillsforreview: function(id_usuario, avalicao_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserSkillsForReview',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              avalicao_id: avalicao_id,
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            uservaloresforreview: function(id_usuario, avalicao_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserValoresForReview',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              avalicao_id: avalicao_id,
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_desmpenho_by_id: function(user_id, ciclo, desempnho) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateDesempnhoById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: user_id,
                              id_ciclo: ciclo,
                              desempnho: desempnho
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_final_values_reviews: function(avalicao_id, valore, desempnho, performance, avaliacao_quali, geral) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateFinalReviewById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              avalicao_id: avalicao_id,
                              valore: valore ? valore : 0,
                              desempnho: desempnho ? desempnho : 0,
                              performance: performance ? performance : 0,
                              avaliacao_quali: avaliacao_quali,
                              geral: geral,
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_valores_skills_by_id: function(form_data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateValoreSkillsById',
                        method: 'POST',
                        dataType: 'json',
                        data: form_data,
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            savepotentialanswersprofile: function(answers) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'savePotentialAnswersForReviewProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: answers,
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            userpdi: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserPDI',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            savenewperformance: function(newperformances) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveNewPerformance',
                        method: 'POST',
                        dataType: 'json',
                        data: newperformances,
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            /*savecurrentsession: function(userid, id_protocolo_avaliacao, id_ciclo, year) {
             var resp = $q.defer();
             $.ajax({
             url: baseurl + 'saveCurrentSession',
             method: 'POST',
             dataType: 'json',
             data: {
             userid: userid,
             id_protocolo_avaliacao: id_protocolo_avaliacao,
             id_ciclo: id_ciclo,
             year: year
             },
             error: function() {
             
             },
             success: function(response) {
             resp.resolve(response);
             }
             });
             
             return resp.promise;
             },*/
            savepotentialanswers: function(answers) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'savePotentialAnswers',
                        method: 'POST',
                        dataType: 'json',
                        data: answers,
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveskills: function(skills) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveSkills',
                        method: 'POST',
                        dataType: 'json',
                        data: skills,
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            savegeral: function(geral, avaliacao_quali) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveGeral',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              geral: geral,
                              avaliacao_quali: avaliacao_quali
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_cycle_review_time: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleReviewTime',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_user_pdi_review: function(id_protocolo_avaliacao) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserPDIReview',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_protocolo_avaliacao
                        },
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getselecteduserteam: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserTeam',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getDetails: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserProfileById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              user_id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_question_data_profile: function(id_questionario, user_id, id_revisao_ciclo_fases) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getQuestionDataProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_questionario: id_questionario,
                              user_id: user_id,
                              id_revisao_ciclo_fases: id_revisao_ciclo_fases
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getallapprisialvalores: function(id_revisao_ciclo_fases) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllApprisialValores',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo_fases: id_revisao_ciclo_fases
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_competencias_data_profile: function(id_revisao_ciclo_fases, id_time, user_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCompetenciasDataProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo_fases: id_revisao_ciclo_fases,
                              user_id: user_id,
                              id_time: id_time
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_affordable_teams: function($user_id, $onlyActives = false) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAffordableTeams',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'user_id': $user_id,
                              'onlyActives': $onlyActives
                        },
                        error: function(err) {
                              console.log("afford err:", err);
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            get_affordable_users: function($user_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAffordableUsers',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'user_id': $user_id
                        },
                        error: function(err) {
                              console.log("afford err:", err);
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$questionarios', function($rootScope, $q) {
      return {
            get: function(id) {
                  var resp = $q.defer(id);
                  $.ajax({
                        url: baseurl + 'getQuestionarioByIdEmperssaCargo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              alert("An error occoured while loading getQuestionarioByIdEmperssaCargo!");
                        },
                        success: function(response) {
                              var questionarios = response;
                              resp.resolve(questionarios);
                        }
                  });
                  return resp.promise;
            },
            remove: function(id) {
                  var resp = $q.defer(id);
                  $.ajax({
                        url: baseurl + 'removeQuestionarioById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        //TODO: Passar os avisos de toaster para o controller.
                        error: function() {
                              alert('Erro no ajax de removeQuestionarioById');
                              //toastr.error('Erro ao tentar  o Questionário.');
                        },
                        success: function(response) {
                              resp.resolve(response);
                              //toastr.success('Questionário removido com sucesso!');
                        }
                  });
                  return resp.promise;
            },
            insert: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addOrUpdateQuestionario',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              alert('Erro ao retornar ajax do addQuestionario');
                              //toastr.error('Erro ao tentar adicionar o Questionário.');
                        },
                        success: function(response) {
                              if (!response.error) {
                                    resp.resolve(response);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            addQuestionToQuestionary: function(questions, questionary) {
                  var resp2 = $q.defer();
                  $.ajax({
                        url: baseurl + 'addOrUpdateQuestion',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              questions: questions,
                              questionary: questionary
                        },
                        error: function() {
                              alert('Erro ao retornar ajax do addOrUpdateQuestion');
                              //toastr.error('Erro ao tentar adicionar o Questionário.');
                        },
                        success: function(response) {
                              if (!response.error) {
                                    resp2.resolve(response);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp2.promise;
            },
            getQuestionsFromQuestionaryId: function(questionaryId) {
                  var resp3 = $q.defer();
                  $.ajax({
                        url: baseurl + 'getQuestionsByQuestionaryId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_questionarios: questionaryId
                        },
                        error: function() {
                              alert('Erro ao retornar ajax do getQuestionsByQuestionaryId');
                        },
                        success: function(response) {
                              if (!response.error) {
                                    resp3.resolve(response);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp3.promise;
            },
            removeQuestion: function(question, questionary) {
                  var resp4 = $q.defer();
                  $.ajax({
                        url: baseurl + 'removeQuestionFromQuestionary',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              question: question,
                              questionaryId: questionary.id
                        },
                        //TODO: Passar os avisos de toaster para o controller.
                        error: function() {
                              alert('Erro no ajax de removeQuestionFromQuestionary');
                              //toastr.error('Erro ao tentar  o QuestionÃ¡rio.');
                        },
                        success: function(response) {
                              resp4.resolve(response);
                              //toastr.success('Questionário removido com sucesso!');
                        }
                  });
                  return resp4.promise;
            }
      }
}).
factory('$categories', function($rootScope, $q) {
      return {
            getAll: function(id) {
                  var resp = $q.defer(id);
                  $.ajax({
                        url: baseurl + 'getAllCategories',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              alert("An error occoured while loading getAllCategories!");
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            insert: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addCategory',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              alert('Erro ao retornar ajax do addCategory');
                              //toastr.error('Erro ao tentar adicionar o QuestionÃƒÂ¡rio.');
                        },
                        success: function(response) {
                              if (!response.error) {
                                    resp.resolve(response);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$teams', function($rootScope, $q) {
      return {
            getAllTeams: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllTeams',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            getAllTeamsAccordingPermission: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllTeamsAccordingPermission',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            tree: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllTeamsTree',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            no_relation: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllTeamsWithoutRelation',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            details: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getTeamsDetails',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            edit: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editTeam',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var teams = response.teams;
                                    resp.resolve(teams);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            insert: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addTeam',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var teams = response.teams;
                                    resp.resolve(teams);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            get_members_teams: function($team_id, $onlyActives = false) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMembersForTeams',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'team_id': $team_id,
                              'onlyActives': $onlyActives
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
            get_team_users_team: function($team_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMembersForTeamsUsers',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'team_id': $team_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var users = response;
                              resp.resolve(users);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$cargo', function($rootScope, $q) {
      return {
            cargodetails: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCargoDetailsById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            insertcargo: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addCargo',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var teams = response.teams;
                                    resp.resolve(teams);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            editcargo: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editCargo',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var teams = response.teams;
                                    resp.resolve(teams);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            competencias_cargo: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCompetenciaByIdEmperssaCargo',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            questionario_cargo: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getQuestionarioByIdEmperssaCargos',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              type_filter: 'p'
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            cargos: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCargoByIdEmperssa',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
      }
}).factory('$mydashboard', function($rootScope, $q) {
      return {
            getGraphData: function(id_time, id_ciclo, parent_id, year) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGraphData',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_time: id_time,
                              id_ciclo: id_ciclo,
                              parent_id: parent_id,
                              year: year,
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            filterChartAndObjectivos: function(id_ciclo, id_time, type, value, parent_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'filterChartAndObjectivos',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_ciclo: id_ciclo,
                              id_time: id_time,
                              type: type,
                              value: value,
                              parent_id: parent_id,
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllCurrentCycles: function(year) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllCurrentCycles',
                        method: 'POST',
                        data: {
                              'year': year
                        },
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$integration', function($rootScope, $q) {
      return {
            integration_details: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getIntegrationDetailsById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveintegration: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addIntegration',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var teams = response.teams;
                                    resp.resolve(teams);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            editintegration: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editIntegration',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var teams = response.teams;
                                    resp.resolve(teams);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            getAll: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getIntegrationsByIdEmperssa',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            getintegracoestype: function(type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getIntegrationsByType',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              type: type
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            testconnection: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'testconnection',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            testsqlquery: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'testsqlquery',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$carreers', function($rootScope, $q) {
      return {
            get_development_questionerios_profile: function($id_feedback) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserQuestionsForDevelopmentProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_feedback': $id_feedback
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getUserDevQuestions: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserDevQuestions',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_user_development_update_profile: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveUserDevlopmentUpdateDataProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_feedback_deadline: function(id_feedback, deadline) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateFeedbackDeadline',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_feedback: id_feedback,
                              deadline: deadline
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_feedback_privacy_status: function(id_feedback, feedback_status) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateFeedbackPrivacyStatus',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_feedback: id_feedback,
                              feedback_status: feedback_status
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            insert_minor_goals: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addMinorGoals',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_minor_goals: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateMinorGoals',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            declineFeedback: function(id_feedback,justificativaTexto) {
                  /* aqui */
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'declineFeedbackbyId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_feedback: id_feedback,
                              feedback_justificativa: $('#feedback_justificativa').val()
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                              if (!response.error_message) {
                                    toastr.success('Rejeitado      com sucesso.');
                              } else {
                                    toastr.error(response.error_message);
                              }
                              $timeout(function() {
                                    $scope.carreerTab()
                              }, 200);
                        }
                  });
                  return resp.promise;
            },
            archiveFeedback: function(id_feedback) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'archiveFeedbackbyId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_feedback: id_feedback
                        },
                        error: function() {

                              //
                          
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            unarchiveFeedback: function(id_feedback) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'unarchiveFeedbackbyId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_feedback: id_feedback
                        },
                        error: function() {
                  
                              //
                          
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveGlobalDpForm: function(data) {
                  var resp = $q.defer();
                  console.log(data);
                  $.ajax({
                        url: baseurl + 'saveGlobalDpForm',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            reply_user_development_update_profile: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'replyUserDevlopmentUpdateDataProfile',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_user_dp_goals: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveUserDpGoals',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_user_dp_activity: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveUserDpActivity',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_user_dp_activity: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateUserDpActivity',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_user_dp_objetivo_status: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateUserDpObjetivoStatus',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            delete_dpactivity: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'deleteUserDpActivity',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'activity_id': id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            delete_dpmeta: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'deleteUserDpMeta',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'meta_id': id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_user_activity_dp: function(id, type, data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateUserActivityDp',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'activity_id': id,
                              'type': type,
                              'data': data
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            update_user_meta_dp: function(id, type, data) {
                  console.log(id);
                  console.log(type);
                  console.log(data);
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateUserMetaDp',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'meta_id': id,
                              'type': type,
                              'data': data
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            delete_dp_objective: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'deleteUserDpObjective',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'objective_id': id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_user_development_update_by_id: function($id_feedback) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserDevelopmentUpdateByIDFeedback',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_feedback': $id_feedback
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCareerForUser: function(id_usuario, status, objective_time) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCareerForUser',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_usuario': id_usuario,
                              'status': status,
                              'objective_time': objective_time,
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAll: function(id_usuario, crossfeed_status, crossfeed_time, crossfeed_type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCarreerById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              crossfeed_status: crossfeed_status,
                              crossfeed_time: crossfeed_time,
                              crossfeed_type: crossfeed_type
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllReceived: function(id_usuario, crossfeed_status, crossfeed_time, crossfeed_type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getReceivedCarreerById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              crossfeed_status: crossfeed_status,
                              crossfeed_time: crossfeed_time,
                              crossfeed_type: crossfeed_type
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllReceivedCrossfeedgetAllReceivedCrossfeed: function(id_usuario, crossfeed_status, crossfeed_time, crossfeed_type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCrossfeedSentByUserId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_usuario: id_usuario,
                              crossfeed_status: crossfeed_status,
                              crossfeed_time: crossfeed_time,
                              crossfeed_type: crossfeed_type
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllDpObjectivos: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllDpObjectivos',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getDpObjectivosDetailById: function($id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDpObjectivosDetailByIdObj',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id': $id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getDpMetaDetailsByMeta: function(meta_id, global_goal_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDpMetaDetailsByMeta',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'meta_id': meta_id,
                              'global_goal_id': global_goal_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getDpGoalDetailById: function($id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDpGoalDetailById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id': $id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getDpMetaDetailById: function($id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDpMetaDetailByIdMeta',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id': $id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$empressa', function($rootScope, $q) {
      return {
            getEmpressaDetail: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getEmpressaDetail',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getallvalores: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllValoresEmpresa',
                        method: 'POST',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getvalorebyId: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getValoresById',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              id: id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveEmpressa: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveEmpressa',
                        method: 'POST',
                        dataType: 'json',
                        processData: false,
                        contentType: false,
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            saveEmpressaImage: function(formData) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveEmpressaImage',
                        method: 'POST',
                        dataType: 'json',
                        contentType: false,
                        processData: false,
                        data: formData,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var data = response;
                              resp.resolve(data);
                        }
                  });
                  return resp.promise;
            },
            saveValores: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveValores',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            editValore: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editValores',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
            deleteValorebyId: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'deleteValorebyId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: data
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var teams = response;
                              resp.resolve(teams);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$skills', function($rootScope, $q) {
      return {
            getbycompany: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllSkillsByCompanyID',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getbycompanyprofile: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllSkillsByCompanyIDCargo',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            addnewskills: function(skilldata) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addNewSkillsByCompanyId',
                        method: 'POST',
                        dataType: 'json',
                        data: skilldata,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            addskillwithoutgeral: function(skilldata) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addNewSkillsByCompanyIdWithoutGeralCargo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              new_skill: skilldata
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$cargos', function($rootScope, $q) {
      return {
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCargos',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$tags', function($rootScope, $q, $filter) {
      return {
            get: function() {
                  var buscaTag = $('#campoTag').val();
                  console.log(buscaTag);
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllTags',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var tags = response;
                              resp.resolve(tags);
                        }
                  });
                  console.log('factory(\'$tags\', function($rootScope, $q, $filter) - getAllTags');
                  return resp.promise;
            },
            search: function(tag) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'searchAllGlobalTaticsTag',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              tag: tag
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var tags = response;
                              resp.resolve(tags);
                        }
                  });
                  return resp.promise;
            },
            searchTagUsersByTeam: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'searchTagUsersByTeam',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              teams: data
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var tags = response;
                              resp.resolve(tags);
                        }
                  });
                  return resp.promise;
            },
            delete: function(tag) {
                  var resp = $q.defer();
                  resp.resolve(tags);
                  return resp.promise;
            }
      }
}).
factory('$feed', function($rootScope, $q, $filter) {
      return {
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMyFeedProfile',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var feeds = response.feed;
                                    for (var i = 0, leng = feeds.length; i < leng; i++) {
                                          feeds[i].timeAgo = moment(feeds[i].date).fromNow();
                                          feeds[i].day = moment(feeds[i].date).format('DD/MM/YYYY');
                                    };
                                    resp.resolve(feeds);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$alerts', function($rootScope, $q, $filter) {
      return {
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAlerts',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var feeds = response;
                              resp.resolve(feeds);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$assessments', function($rootScope, $q, $filter) {
      return {
            report: function(times = null, responsavels = null, cycles = null) {
                  var resp = $q.defer();
                  var data = {
                              team: times,
                              user: responsavels,
                              cycle: cycles
                        };
                  $.ajax({
                        url: baseurl + 'getAvaliacoes',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var report = response.relatorio;
                              for (var i = 0, leng = report.length; i < leng; i++) {
                                    report[i].date = moment(report[i].date).format('DD/MM/YYYY');
                              };
                              resp.resolve(report);
                        }
                  });
                  return resp.promise;
            },
            okr: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getOkrAvaliacoes',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var okrs = response;
                              for (var i = 0, leng = okrs.length; i < leng; i++) {
                                    okrs[i].status = Number(okrs[i].status);
                              };
                              resp.resolve(okrs);
                        }
                  });
                  return resp.promise;
            },
            edit: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editAvaliacao',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    resp.resolve(response);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$channels', function($rootScope, $q, $filter) {
      return {
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCanaisByUserId',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var channels = response;
                              resp.resolve(channels);
                        }
                  });
                  return resp.promise;
            },
            details: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getDetailsCanalMessagesByIdCanal',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id,
                              qnt: 10
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var details = response;
                              var leng = details.mens.length;
                              var current_date = details.current_datetime;
                              if (leng) {
                                    for (var i = 0; i < leng; i++) {
                                          var diff = moment(moment(current_date)).diff(details.mens[i].date, "days");
                                          if (diff <= 0) {
                                                details.mens[i].date = moment(details.mens[i].date).format("HH:mm");
                                          } else if (diff == 1) {
                                                details.mens[i].date = 'Ontem �s ' + moment(details.mens[i].date).format("HH:mm");
                                          } else if (diff > 1 && diff <= 4) {
                                                details.mens[i].date = ' a ' + diff + ' dias, �s ' + moment(details.mens[i].date).format("HH:mm");
                                          } else {
                                                details.mens[i].date = moment(details.mens[i].date).format("DD/MM/YYYY HH:mm");
                                          }
                                    };
                              }
                              resp.resolve(details);
                        }
                  });
                  return resp.promise;
            },
            pagination: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMensagensCanal',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var details = response;
                              var leng = details.mens.length;
                              var current_date = details.current_datetime;
                              if (leng) {
                                    for (var i = 0; i < leng; i++) {
                                          var diff = moment(moment(current_date)).diff(details.mens[i].date, "days");
                                          if (diff <= 0) {
                                                details.mens[i].date = moment(details.mens[i].date).format("HH:mm");
                                          } else if (diff == 1) {
                                                details.mens[i].date = 'Ontem �s ' + moment(details.mens[i].date).format("HH:mm");
                                          } else if (diff > 1 && diff <= 4) {
                                                details.mens[i].date = ' a ' + diff + ' dias, �s ' + moment(details.mens[i].date).format("HH:mm");
                                          } else {
                                                details.mens[i].date = moment(details.mens[i].date).format("DD/MM/YYYY HH:mm");
                                          }
                                    };
                              }
                              resp.resolve(details.mens);
                        }
                  });
                  return resp.promise;
            },
            new: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addCanal',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var channel = response;
                              resp.resolve(channel.canal);
                        }
                  });
                  return resp.promise;
            },
            edit: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editCanal',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              var channel = response;
                              resp.resolve(channel.canal);
                        }
                  });
                  return resp.promise;
            },
            send: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addMessage',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        processData: false,
                        contentType: false,
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var details = response;
                                    var leng = details.mens.length;
                                    var current_date = details.current_datetime;
                                    if (leng) {
                                          for (var i = 0; i < leng; i++) {
                                                var diff = moment(moment(current_date)).diff(details.mens[i].date, "days");
                                                if (diff <= 0) {
                                                      details.mens[i].date = moment(details.mens[i].date).format("HH:mm");
                                                } else if (diff == 1) {
                                                      details.mens[i].date = 'Ontem �s ' + moment(details.mens[i].date).format("HH:mm");
                                                } else if (diff > 1 && diff <= 4) {
                                                      details.mens[i].date = ' a ' + diff + ' dias, �s ' + moment(details.mens[i].date).format("HH:mm");
                                                } else {
                                                      details.mens[i].date = moment(details.mens[i].date).format("DD/MM/YYYY HH:mm");
                                                }
                                          };
                                    }
                                    resp.resolve(details.mens);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            addUser: function(id, userId) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addUsuarioCanal',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id,
                              user: userId
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var users = response.users;
                                    resp.resolve(users);
                              }
                        }
                  });
                  return resp.promise;
            },
            removeUser: function(id, userId) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'editUsuarioCanal',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id: id,
                              user: userId,
                              active: 0
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              if (!response.error) {
                                    var users = response.users;
                                    resp.resolve(users);
                              }
                        }
                  });
                  return resp.promise;
            }
      }
}).
/**
 * @raptor cycleConfiguration ng-controllers
 */
factory('$cycleConfiguration', function($rootScope, $q) {
      return {
            getTipoFaseById: function(cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getTipoFaseById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getTipoFaseScoreById: function(fase_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getTipoFaseScoreById',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              fase_id: fase_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getEscalaByEmpresaId: function(id_empresa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getEscalaByEmpresaId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_empresa: id_empresa
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getNineBoxes: function(id_empresa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getNineBoxes',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_empresa: id_empresa
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getRevisoesByEmpresaId: function(id_empresa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getRevisoesByEmpresaId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_empresa: id_empresa
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            insertCycle: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addCycle',
                        method: 'POST',
                        dataType: 'json',
                        data: data,
                        error: function() {
                              alert('Erro ao retornar ajax do addCycle');
                              //toastr.error('Erro ao tentar adicionar o QuestionÃƒÂ¡rio.');
                        },
                        success: function(response) {
                              if (!response.error) {
                                    resp.resolve(response);
                              } else {
                                    alert(response.error_message);
                              }
                        }
                  });
                  return resp.promise;
            },
            getNiveisByEmpresaId: function(id_empresa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getNiveisByEmpresaId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_empresa: id_empresa
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getReguaByCycleId: function(cycle_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getReguaByCycleId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              cycle_id: cycle_id
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleConfigList',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveCycleConfiguration: function(request, userTeams, disableform, all_members, tipo_nota_final) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveCycleConfiguration',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              request: request,
                              disableform: disableform,
                              userTeams: userTeams,
                              all_members: all_members,
                              tipo_nota_final: tipo_nota_final
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            updateSituacao: function(id_revisao_ciclo, value) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateSituacao',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo: id_revisao_ciclo,
                              value: value
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveAutorizar: function(id_revisao_ciclo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveAutorizar',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo: id_revisao_ciclo
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveDeautorizar: function(id_revisao_ciclo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveDeautorizar',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_revisao_ciclo: id_revisao_ciclo
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getById: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getRavisaoCicloById',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id': id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCycleByCycleId: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleByCycleId',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id': id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
             getCycleByCycleIdProfileBanner: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleByCycleIdProfileBanner',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id': id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCyclePercentage: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCyclePercentage',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id': id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getUsersByCycleConfig: function(id_ravisao_ciclo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUsersByCycleConfig',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_ravisao_ciclo': id_ravisao_ciclo
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCycleConfigUsersByTypeValidation: function(cycleId) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleConfigUsersByTypeValidation',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getapprisialreviewers: function(cycleId) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getApprisialReviewers',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCycles: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycles',
                        method: 'POST',
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCycleConfigUsersByCycleId: function(cycleId) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleConfigUsersByCycleId',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCycleReviewers: function(cycleId, search_by_name, search_by_status, select_team_filter) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleReviewers',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId,
                              'search_by_name': search_by_name,
                              'search_by_status': search_by_status,
                              'select_team_filter': select_team_filter
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            sendNotaEmail: function(cycleId, userId) {

                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'sendNotaEmail',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId,
                              'userId': userId
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            sendCycleReviewEmail: function(cycleId, userId) {

                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'sendCycleReviewEmail',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId,
                              'userId': userId
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            sendCycleEmailToUsers: function(cycleId, users, email_content) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'sendCycleEmailToUsers',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId,
                              'users': users,
                              'email_content': email_content
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCycleConfigUsersByFilter: function(cycleId, name, type, teamId) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleConfigUsersByFilter',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'cycleId': cycleId,
                              'name': name,
                              'type': type,
                              'teamId': teamId
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            updateRevisaoUsersAutorizado: function(ravisaoAvalicaoIds, cycleId) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'updateRevisaoUsersAutorizado',
                        method: 'POST',
                        data: {
                              'ravisaoAvalicaoIds': ravisaoAvalicaoIds,
                              'cycleId': cycleId
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCycleUserByType: function(cycle_id, userId, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleUsersByType',
                        method: 'POST',
                        data: {
                              'cycle_id': cycle_id,
                              'userId': userId,
                              'type': type
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getCycleUsersByTypeId: function(cycle_id, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCycleUsersByTypeId',
                        method: 'POST',
                        data: {
                              'cycle_id': cycle_id,
                              'type': type
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getSelfAddedCycleUsersByTypeId: function(cycle_id, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getSelfAddedCycleUsersByTypeId',
                        method: 'POST',
                        data: {
                              'cycle_id': cycle_id,
                              'type': type
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAlreadyAddedUsersByCycleId: function(cycles) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAlreadyAddedUsersByCycleId',
                        method: 'POST',
                        data: {
                              'cycles': cycles
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getuseriamgestororpeer: function(cycle_id, userId, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUserIAmGestorOrPeer',
                        method: 'POST',
                        data: {
                              'cycle_id': cycle_id,
                              'userId': userId,
                              'type': type
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            addUpdateCycleUsers: function(cycle_id, userId, gestors, pares, equipes) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addUpdateCycleUsers',
                        method: 'POST',
                        data: {
                              'cycle_id': cycle_id,
                              'userId': userId,
                              'gestors': gestors,
                              'pares': pares,
                              'equipes': equipes
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get_fases_details_for_user: function(user_id, avaliacoa_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getFasesDetailsForUser',
                        method: 'POST',
                        data: {
                              'user_id': user_id,
                              'avaliacoa_id': avaliacoa_id
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_apprisial_fase_data: function(savedata) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveApprisialFaseData',
                        method: 'POST',
                        data: savedata,
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_apprisial_finish: function(savedata) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveApprisialFinish',
                        method: 'POST',
                        data: savedata,
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_apprisial_fase_pares_data: function(savedata) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveApprisialFaseParesData',
                        method: 'POST',
                        data: savedata,
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_apprisial_fase_competencias_data: function(savedata) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveApprisialFaseCompetenciasData',
                        method: 'POST',
                        data: savedata,
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            save_apprisial_fase_valores_data: function(savedata) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveApprisialFaseValoresData',
                        method: 'POST',
                        data: savedata,
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            addCycleParesUsers: function(cycle_id, users, id_usuario_avaliado) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addCycleParesUsers',
                        method: 'POST',
                        data: {
                              'cycle_id': cycle_id,
                              'users': users,
                              'id_usuario_avaliado': id_usuario_avaliado
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            addUsersForCycle: function(cycles, users) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addUsersForCycle',
                        method: 'POST',
                        data: {
                              cycles: cycles,
                              users: users
                        },
                        dataType: 'json',
                        error: function(e) {
                              console.log("error:", e);
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveCycleUsers: function(cycle_id, users, id_usuario_avaliado, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveCycleUsers',
                        method: 'POST',
                        data: {
                              'cycle_id': cycle_id,
                              'users': users,
                              'type': type,
                              'id_usuario_avaliado': id_usuario_avaliado
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
      }
}).
/**
 * @raptor pesquisas ng-controllers
 */
factory('$pesquisas', function($rootScope, $q) {
      return {
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPesquisaByUsuario',
                        method: 'GET',
                        dataType: 'json',
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            close: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'clSurvey',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_pesquisa': id_pesquisa
                        },
                        error: function() {
                              //
                        },
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$pesquisaseditor', function($rootScope, $q) {
      return {
            get: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPesquisaById',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_pesquisa': id_pesquisa
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getUsersByEmpresa: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUsersByEmpresa',
                        method: 'GET',
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getPublicPesquisaByUsuario: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPublicPesquisaByUsuario',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_pesquisa': id_pesquisa
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getPublicPesquisaToSelect: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPublicPesquisaToSelect',
                        method: 'GET',
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getQuestionarios: function(type_tipo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getQuestionarios',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'tipo': type_tipo
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getUsersByTeams: function(strTeams, userType, userLevel) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUsersByTeams',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'strTeams': strTeams,
                              'userType': userType,
                              'userLevel': userLevel,
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getTeamsByTeamsId: function(strTeams) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getTeamsByTeamsId',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'strTeams': strTeams
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getUsersByIds: function(strUsers) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUsersByIds',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'strUsers': strUsers
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getUsersTeamsList: function(strUsers, strTeams) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUsersTeamsList',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'strUsers': strUsers,
                              'strTeams': strTeams
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveStepOne: function(request) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'setPesquisaOfUsuario1',
                        method: 'POST',
                        dataType: 'json',
                        data: request,
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveStepTwo: function(request) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'addPublicOfUsuario',
                        method: 'POST',
                        dataType: 'json',
                        data: request,
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveStepThree: function(request) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'sendPesquisaMessage',
                        method: 'POST',
                        dataType: 'json',
                        data: request,
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            }
      }
}).
factory('$pesquisaquestion', function($rootScope, $q) {
      return {
            get: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPesquisaFullInfoById',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_pesquisa': id_pesquisa
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getQuestionList: function(id_pesquisa, escala) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getQuestionList',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_pesquisa': id_pesquisa,
                              'escala': escala
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getFilterCatPerguntaGester: function(id_times, id_cats, id_perguntas, id_gestors, type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getFilterCatPerguntaGester',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_times': id_times,
                              'id_cats': id_cats,
                              'id_perguntas': id_perguntas,
                              'id_gestors': id_gestors,
                              'type': type
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getRatingDatas10: function(id_pergunta, id_pesquisa, id_users, id_cats, type, group_by, id_gestors, id_times, selected_tempo_empresa, fechado) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getRatingDatas10',
                        method: 'GET',
                        data: {
                              'id_pergunta': id_pergunta,
                              'id_pesquisa': id_pesquisa,
                              'id_users': id_users,
                              'id_categoria': id_cats,
                              'type': type,
                              'group_by': group_by,
                              'id_gestors': id_gestors,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa,
                              'fechado': fechado,
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getRatingDatas5: function(id_pergunta, id_pesquisa, id_users, id_cats, type, group_by, id_gestors, id_times, selected_tempo_empresa, fechado) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getRatingDatas5',
                        method: 'GET',
                        data: {
                              'id_pergunta': id_pergunta,
                              'id_pesquisa': id_pesquisa,
                              'id_users': id_users,
                              'id_categoria': id_cats,
                              'type': type,
                              'group_by': group_by,
                              'id_gestors': id_gestors,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa,
                              'fechado': fechado,
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAdesaoPesquisa: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAdesaoPesquisa',
                        method: 'GET',
                        data: {
                              'id_pesquisa': id_pesquisa
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getMatrixCategoryTeam: function(id_pergunta, id_pesquisa, id_users, id_cats, id_gestors, id_times, selected_tempo_empresa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMatrixCategoryTeam',
                        method: 'GET',
                        data: {
                              'id_pergunta': id_pergunta,
                              'id_pesquisa': id_pesquisa,
                              'id_users': id_users,
                              'id_categoria': id_cats,
                              'id_gestors': id_gestors,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getMatrixQuestionTeam: function(id_pergunta, id_pesquisa, id_users, id_cats, id_gestors, id_times, selected_tempo_empresa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMatrixQuestionTeam',
                        method: 'GET',
                        data: {
                              'id_pergunta': id_pergunta,
                              'id_pesquisa': id_pesquisa,
                              'id_users': id_users,
                              'id_categoria': id_cats,
                              'id_gestors': id_gestors,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getMatrixQuestionGestor: function(id_pergunta, id_pesquisa, id_users, id_cats, id_gestors, id_times, selected_tempo_empresa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMatrixQuestionGestor',
                        method: 'GET',
                        data: {
                              'id_pergunta': id_pergunta,
                              'id_pesquisa': id_pesquisa,
                              'id_users': id_users,
                              'id_categoria': id_cats,
                              'id_gestors': id_gestors,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getMatrixCategoryGestor: function(id_pergunta, id_pesquisa, id_users, id_cats, id_gestors, id_times, selected_tempo_empresa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getMatrixCategoryGestor',
                        method: 'GET',
                        data: {
                              'id_pergunta': id_pergunta,
                              'id_pesquisa': id_pesquisa,
                              'id_users': id_users,
                              'id_categoria': id_cats,
                              'id_gestors': id_gestors,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getGlabalRatingDatas10: function(id_pergunta, id_pesquisa, id_users, id_cats, type, group_by, id_gestors, id_times, selected_tempo_empresa, fechado) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGlabalRatingDatas10',
                        method: 'GET',
                        data: {
                              'id_pergunta': id_pergunta,
                              'id_pesquisa': id_pesquisa,
                              'id_users': id_users,
                              'id_categoria': id_cats,
                              'type': type,
                              'group_by': group_by,
                              'id_gestors': id_gestors,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa,
                              'fechado': fechado,
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getGlabalRatingDatas5: function(id_pergunta, id_pesquisa, id_users, id_cats, type, group_by, id_gestors, id_times, selected_tempo_empresa, fechado) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getGlabalRatingDatas5',
                        method: 'GET',
                        data: {
                              'id_pergunta': id_pergunta,
                              'id_pesquisa': id_pesquisa,
                              'id_users': id_users,
                              'id_categoria': id_cats,
                              'type': type,
                              'group_by': group_by,
                              'id_gestors': id_gestors,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa,
                              'fechado': fechado,
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getPesquisaRespostasList: function(id_pesquisa, search_data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPesquisaRespostasList',
                        method: 'GET',
                        data: {
                              'id_pesquisa': id_pesquisa,
                              'search_data': search_data
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getPesquisaRespostasTypeQ: function(id_pesquisa, id_pergunta, id_cats, id_gest, id_times, selected_tempo_empresa, fechado) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPesquisaRespostasTypeQ',
                        method: 'GET',
                        data: {
                              'id_pesquisa': id_pesquisa,
                              'id_pergunta': id_pergunta,
                              'id_cats': id_cats,
                              'id_gest': id_gest,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa,
                              'fechado': fechado
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getPesquisaRespostasTypeO: function(id_pesquisa, id_pergunta, id_cats, id_gest, id_times, selected_tempo_empresa, fechado) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPesquisaRespostasTypeO',
                        method: 'GET',
                        data: {
                              'id_pesquisa': id_pesquisa,
                              'id_pergunta': id_pergunta,
                              'id_cats': id_cats,
                              'id_gest': id_gest,
                              'id_times': id_times,
                              'selected_tempo_empresa': selected_tempo_empresa,
                              'fechado': fechado
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getUsersByTeams: function(strTeams, userType, userLevel) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUsersByTeams',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'strTeams': strTeams,
                              'userType': userType,
                              'userLevel': userLevel,
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getTeamsByTeamsId: function(strTeams) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getTeamsByTeamsId',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'strTeams': strTeams
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getUsersByIds: function(strUsers) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getUsersByIds',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'strUsers': strUsers
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllGestor: function(id_time, id_category, id_pergunta, fechado) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllGestor',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_time': id_time,
                              'id_category': id_category,
                              'id_pergunta': id_pergunta,
                              'fechado': fechado
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllCargos: function(id_time, id_category, id_pergunta, id_gestor) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllCargos',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_time': id_time,
                              'id_category': id_category,
                              'id_pergunta': id_pergunta,
                              'id_gestor': id_gestor
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllCategory: function(id_time, id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllCategory',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_time': id_time,
                              'id_pesquisa': id_pesquisa
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllTeamsPesquisa: function(id_tags, fechado) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllTeamsPesquisa',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_tags': id_tags,
                              'fechado': fechado,
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllTagsPesquisa: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllTagsPesquisa',
                        method: 'GET',
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  
                  return resp.promise;
            },
            getAllSurveyPesquisa: function(type) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllSurveyPesquisa',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              type: type
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllPergunta: function(id_time, id_category, fechado, id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllPergunta',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'id_time': id_time,
                              'id_category': id_category,
                              'fechado': fechado,
                              'id_pesquisa': id_pesquisa
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getPeopleDevelopement: function(id_surveys, id_tags, id_teams, id_gestors, id_users, start_time) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getPeopleDevelopement',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id_surveys': id_surveys,
                              'id_tags': id_tags,
                              'id_teams': id_teams,
                              'id_gestors': id_gestors,
                              'id_users': id_users,
                              'start_time': start_time
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getSurveyDetailsForDevelopement: function(survey_id, user_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getSurveyDetailsForDevelopement',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'survey_id': survey_id,
                              'user_id': user_id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getAllQuestionsPeopleDevelopement: function(survey_id, user_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getAllQuestionsPeopleDevelopement',
                        method: 'GET',
                        dataType: 'json',
                        data: {
                              'survey_id': survey_id,
                              'user_id': user_id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$category', function($rootScope, $q) {
      return {
            get: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCategories',
                        method: 'GET',
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getById: function(category_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCategory',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'category_id': category_id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            deleteById: function(category_id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'deleteCategory',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'category_id': category_id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            saveCategory: function(data) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveCategory',
                        method: 'POST',
                        data: {
                              'data': data
                        },
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
      }
}).
factory('$competencias', function($rootScope, $q) {
      return {
            update_tipo: function(id, new_tipo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'update_tipo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id': id,
                              'new_tipo': new_tipo
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            add_tipo: function(new_tipo) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'add_tipo',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'new_tipo': new_tipo
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            get: function(id_pesquisa) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCompetencias',
                        method: 'GET',
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            GetAllCompetenciasTipos: function() {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'GetAllCompetenciasTipos',
                        method: 'GET',
                        dataType: 'json',
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            getById: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'getCompetencia',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id': id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            search: function(category, tipo, ativo, reviewed, groupBy, search_team, search_cargo, search_nome) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'searchCompetencia',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'category': category,
                              'tipo': tipo,
                              'ativo': ativo,
                              'reviewed': reviewed,
                              'groupBy': groupBy,
                              'search_team': search_team,
                              'search_cargo': search_cargo,
                              'search_nome': search_nome
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            deleteById: function(id) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'deleteCompetencia',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'id': id
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
            Save: function(formdata) {
                  var resp = $q.defer();
                  $.ajax({
                        url: baseurl + 'saveCompetencia',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              'formdata': formdata
                        },
                        error: function(e) {},
                        success: function(response) {
                              resp.resolve(response);
                        }
                  });
                  return resp.promise;
            },
      }
});
elofy.controller('pesquisasCtrl', function globalCtrl($scope, $timeout, $filter, $globals, $users, $pesquisas, $translate) {
      $scope.contentLoading = 0;
      $scope.contentLoading++;
      $pesquisas['get']().then(function(pesquisaList) {
            $scope.originPesquisaList = pesquisaList;
            $scope.filterOnlyActiveUsers();
            $scope.contentLoading--;
      });
      /** filter **/
      $scope.fillTipos = function() {
            $scope.tipos = [{
                        id: 0,
                        name: "Enquete"
                  },
                  {
                        id: 1,
                        name: "Pesquisa Padrão"
                  },
                  {
                        id: 2,
                        name: "Pesquisa Temporal"
                  }
            ];
      }

      $scope.fillSituations = function() {
            $scope.situations = [{
                        id: 0,
                        name: "Rascunho"
                  },
                  {
                        id: 1,
                        name: "Planejada"
                  },
                  {
                        id: 2,
                        name: "Em andamento"
                  },
                  {
                        id: 3,
                        name: "Finalizada"
                  },
                  {
                        id: 4,
                        name: "Fechada"
                  }
            ];
      }

      $scope.fillTipos();
      $scope.fillSituations();
      $scope.initializeCompoptionsFilter = function() {
            $timeout(function() {
                  $('#search_tipo').select2();
                  $('#search_situation').select2();
                  $('#search_tipo').select2("val", "");
                  $('#search_situation').select2("val", "");
            }, 200);
      }

      $scope.initializeCompoptionsFilter();
      $scope.filter = function() {
            var search_nome = $('#search_name').val();
            var search_tipo = $('#search_tipo').val();
            var search_situation = $('#search_situation').val();
            $scope.pesquisaList = [];
            angular.forEach($scope.originPesquisaList, function(item, key) {
                  var filtered = 0;
                  if (item.nome_pesquisa.toUpperCase().includes(search_nome.toUpperCase())) {
                        filtered++;
                  }
                  if (search_tipo == '' || item.id_tipo_pesquisa == search_tipo) {
                        filtered++;
                  }
                  if ((search_situation == '') || ((item.situacao == search_situation && item.fechado == 0) || (search_situation == 4 && item.fechado == 1))) {
                        filtered++;
                  }
                  if ($scope.search_status == item.ativo) {
                        filtered++;
                  }
                  if (filtered == 4) $scope.pesquisaList.push(item);
            });
      }

      $scope.resetFilter = function() {
            $scope.filterOnlyActiveUsers();
            $('#search_tipo').select2('destroy');
            $('#search_situation').select2('destroy');
            $('#search_name').val('');
            $scope.initializeCompoptionsFilter();
      }

      $scope.filterOnlyActiveUsers = function() {
            $scope.pesquisaList = [];
            $scope.search_status = 1;
            angular.forEach($scope.originPesquisaList, function(item, key) {
                  if (item.ativo == 1) $scope.pesquisaList.push(item);
            });
      }

      /** filter end **/

      function setClipboardText(text) {
            var id = "pesquisa_link";
            var existsTextarea = document.getElementById(id);
            if (!existsTextarea) {
                  //console.log("Creating textarea");
                  var textarea = document.createElement("textarea");
                  textarea.id = id;
                  // Place in top-left corner of screen regardless of scroll position.
                  textarea.style.position = 'fixed';
                  textarea.style.top = 0;
                  textarea.style.left = 0;
                  // Ensure it has a small width and height. Setting to 1px / 1em
                  // doesn't work as this gives a negative w/h on some browsers.
                  textarea.style.width = '1px';
                  textarea.style.height = '1px';
                  // We don't need padding, reducing the size if it does flash render.
                  textarea.style.padding = 0;
                  // Clean up any borders.
                  textarea.style.border = 'none';
                  textarea.style.outline = 'none';
                  textarea.style.boxShadow = 'none';
                  // Avoid flash of white box if rendered for any reason.
                  textarea.style.background = 'transparent';
                  document.querySelector("body").appendChild(textarea);
                  console.log("The textarea now exists :)");
                  existsTextarea = document.getElementById(id);
                  toastr.success('Link copied!');
            } else {
                  console.log("The textarea already exists :3")
            }
            existsTextarea.value = text;
            existsTextarea.select();
            try {
                  var status = document.execCommand('copy');
                  if (!status) {
                        console.error("Cannot copy text");
                  } else {
                        //console.log("The text is now on the clipboard");
                  }
            } catch (err) {
                  console.log('Unable to copy.');
            }
      }
      $scope.copyToClipboardFunction = function(id) {
            var copyText = baseurl + 'survey/#!/' + id;
            setClipboardText(copyText);
      }
      $scope.closeSurvey = function(id_pesquisa) {
            $scope.contentLoading++;
            $pesquisas['close'](id_pesquisa).then(function() {
                  angular.forEach($scope.pesquisaList, function(pesquisa, key) {
                        $scope.contentLoading--;
                        if (pesquisa.id_pesquisa == id_pesquisa) {
                              pesquisa.fechado = 1;
                              toastr.success('Pesquisa Fechada!');
                        }
                  });
            });
      }
});
elofy.controller('surveyCtrl', function globalCtrl($document, $scope, $routeParams, $timeout, $filter, $globals, $users, $pesquisas, $surveys, $translate) {
      $scope.paresAdded = [];
      $scope.excludedUserPairs = [];
      $scope.checkIfNotMeOrGestor = function(possiblePair) {
            return !$scope.excludedUserPairs.includes(possiblePair.id);
      }
      setTimeout(function() {
            $($document).ready(function() {
                  $('#pares-select').select2();
            });
      }, 1000);
      $('#pares-select').change(function(e) {
            $('.pares_block').removeClass("error");
            $.each($scope.$parent.users, function(i) {
                  if ($scope.$parent.users[i].id === $(e.currentTarget).val()) {
                        var obj = $filter('filter')($scope.paresAdded, {
                              id: $scope.$parent.users[i].id
                        }, true)[0];
                        if (!obj) $scope.paresAdded.push($scope.$parent.users[i]);
                        return false;
                  }
            });
            $('#pares-select').select2("val", "");
      });
      $scope.removeAddedUser = function(ur) {
            console.log(ur);
            $.each($scope.paresAdded, function(i) {
                  if ($scope.paresAdded[i].id === ur.id) {
                        var spliced = $scope.paresAdded.splice(i, 1)[0];
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefresh = function(ur) {
            $('#pares-select').select2("val", "");
            $scope.removeAddedUser(ur);
      };
      $scope.id = $routeParams.surveyId;
      $scope.evaluatedUserId = $routeParams.evaluatedUserId;
      $scope.evaluatedUser = {};
      $scope.profileurl = baseurl + 'perfil';
      $scope.logouturl = baseurl + 'survey-logout';
      $users['getDetails']($scope.evaluatedUserId).then(function(response) {
            $scope.evaluatedUser = response;
      });
      $surveys['getSurveyQuestionsBySurveyId']($scope.id).then(function(res) {
            $scope.survey_questions = res;
            if ($scope.survey_questions.type == 2 && $scope.survey_questions.usuario_avaliado) $scope.excludedUserPairs.push($routeParams.evaluatedUserId);
            $scope.excludedUserPairs.push($scope.$parent.user.id);
            $scope.$parent.$watch('users', function(newValue) {
                  $scope.possiblePair = newValue;
                  if ($scope.possiblePair) {
                        $scope.possiblePair = $scope.possiblePair.filter($scope.checkIfNotMeOrGestor);
                  }
            });
      });
      $scope.findPos =  function(obj) {
          var curtop = 0;
          if (obj.offsetParent) {
              do {
                  curtop += obj.offsetTop;
              } while (obj = obj.offsetParent);
          return [curtop];
          }
      }
      $scope.validateFields = function() {
            var flag = true;
            var flag1 = true;
            angular.forEach($scope.survey_questions.survey, function(category, key) {
                  if (!flag) return;
                  angular.forEach(category.questions, function(questionerio, key1) {
                        if (questionerio.mandatory == '0') return;
                        if (!flag1) {flag=false; return; }
                        if (questionerio.type == 'q' && questionerio.favorabilidade==0) {
                              //text area
                        }
                        if (questionerio.type == 'o' && questionerio.favorabilidade==0) {
                              //radio button
                              var count = 0;
                              angular.forEach(questionerio.options, function(answer, key2) {
                                    var radioButton = $("#ch_survey_" + answer.id);
                                    if (radioButton.is(':checked')) count++;
                              });
                              if (count == 0) {
                                    var firstRadioButton = $("#ch_survey_" + questionerio.options[0].id);
                                    toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                                    $('#toast-container .toast-error').css("background-color", "#ffac2f");
                                    $('html, body').animate({
                                          scrollTop: firstRadioButton.offset().top - 80 + 'px'
                                      }, 'slow');
                                    flag1 = false;
                                    return;
                              }
                        }
                        if (questionerio.type == 'i' && questionerio.favorabilidade==0) {
                              //emoji
                              var emojiField = $("input[name='answers[emoji_answer][" + questionerio.id_pergunta + "][value]']");
                              if (emojiField.val() == '-1') {
                                    toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                                    $('#toast-container .toast-error').css("background-color", "#ffac2f");
                                    $('html, body').animate({
                                          scrollTop: $('#emoji_' + questionerio.id_pergunta + ' img.emoji:first').offset().top - 80 + 'px'
                                      }, 'slow');
                                    flag1 = false;
                                    return;
                              }
                        }
                        if (questionerio.type == 'e' && questionerio.favorabilidade==0) {
                              //star survey
                              var count = 0;
                              for (var i = 1; i<11; i++) {
                                    var radioButton = $("#rad_" + questionerio.id_pergunta + "_" + i);
                                    if (radioButton.is(':checked')) count++;
                              }
                              if (count == 0) {
                                    var firstRadioButton = $("#rad_" + questionerio.id_pergunta + "_1");
                                    toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                                    $('#toast-container .toast-error').css("background-color", "#ffac2f");
                                    $('html, body').animate({
                                          scrollTop: firstRadioButton.offset().top - 80 + 'px'
                                      }, 'slow');
                                    flag1 = false;
                                    return;
                              }
                        }
                        if (questionerio.type == 'f' && questionerio.favorabilidade==1) {
                              //radio button rating
                              var count = 0;
                              for (var i = 1; i<6; i++) {
                                    var radioButton = $("#rad_" + questionerio.id_pergunta + "_" + i);
                                    if (radioButton.is(':checked')) count++;
                              }
                              if (count == 0) {
                                    var firstRadioButton = $("#rad_" + questionerio.id_pergunta + "_1");
                                    toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                                    $('#toast-container .toast-error').css("background-color", "#ffac2f");
                                    $('html, body').animate({
                                          scrollTop: firstRadioButton.offset().top - 80 + 'px'
                                      }, 'slow');
                                    flag1 = false;
                                    return;
                              }
                        }
                        if (questionerio.type == 'c' && questionerio.favorabilidade==0) {
                              //heart
                              var count = 0;
                              for (var i = 1; i<11; i++) {
                                    var radioButton = $("#rad2" + i + "_" + questionerio.id_pergunta + "_" + i);
                                    if (radioButton.is(':checked')) count++;
                              }
                              if (count == 0) {
                                    var firstRadioButton = $("#rad21_" + questionerio.id_pergunta + "_1");
                                    toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                                    $('#toast-container .toast-error').css("background-color", "#ffac2f");
                                    $('html, body').animate({
                                          scrollTop: firstRadioButton.offset().top - 80 + 'px'
                                      }, 'slow');
                                    flag1 = false;
                                    return;
                              }
                        }
                        if (questionerio.type == 'n' && questionerio.favorabilidade==0) {
                              //nps
                              var emojiField = $("input[name='answers[nps_answer][" + questionerio.id_pergunta + "][value]']");
                              if (emojiField.val() == '-1') {
                                    toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                                    $('#toast-container .toast-error').css("background-color", "#ffac2f");
                                    $('html, body').animate({
                                          scrollTop: $('#nps_' + questionerio.id_pergunta + ' .rating .nps:first').offset().top - 80 + 'px'
                                      }, 'slow');
                                    flag1 = false;
                                    return;
                              }
                        }
                  });
            });
            return flag;
      }
      $scope.submitNewSurvey = function() {
            var data = $('#new_survey_update').serialize();
            if ($routeParams.evaluatedUserId) data += '&usuario_avaliado=' + $routeParams.evaluatedUserId;
            if ($scope.survey_questions.usuario_visualizando_gestor == 1 && $scope.survey_questions.permite_pares == 1 && $scope.paresAdded.length == 0) {
                  toastr.error("Você precisa selecionar integrantes pares");
                  $('.pares_block').addClass("error");
                  return;
            }
            if (!$scope.validateFields()) return;
            $surveys['saveNewSurvey'](data).then(function(response) {
                  toastr.success('Salvo com sucesso!');
                  if (response.redirectto != "") {
                        window.location.href = $scope.profileurl;
                  } else {
                        $surveys['getSurveyQuestionsBySurveyId']($scope.id).then(function(res) {
                              $scope.survey_questions = res;
                        });
                  }
            });
      }
      $scope.getStarValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getHeartValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getDevStarValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getDevHeartValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.showHideQuestionCategories = function($event, $id) {
            $($event.currentTarget).parent().toggleClass("open_question");
      }
      $timeout(function() {
            $(".qtype").niceScroll({
                  horizrailenabled: false,
                  cursorcolor: "#3FB9EA"
            });
      }, 300);
});
elofy.controller('surveyListCtrl', function globalCtrl($document, $scope, $routeParams, $timeout, $filter, $globals, $users, $pesquisas, $surveys, $translate) {
      $scope.evaluatedUsers = [];
      $scope.userSelected = null;
      setTimeout(function() {
            console.log("$scope.idSurvey", $scope.idSurvey);
            $surveys['getEvaluatedUsersBySurveyId']($scope.idSurvey).then(function(response) {
                  $scope.evaluatedUsers = response;
            });
      }, 300);
      $scope.selectUser = function(idUser, $event) {
            $scope.userSelected = idUser;
      }
      $scope.goToSurvey = function(url) {
            if ($scope.userSelected) window.location.href = url + $scope.userSelected;
            else toastr.error("Voce precisa escolher uma pessoa a ser avaliada");
      }
});
elofy.controller('pesquisaseditorCtrl', function globalCtrl($scope, $timeout, $filter, $globals, $users, $teams, $pesquisaseditor, $pesquisas, $cycleConfiguration) {
      $scope.contentLoading = 0;
      $('#saveform1').validate({
            //ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .times-edit',
            rules: {
                  nome_pesquisa: 'required',
                  id_tipo_pesquisa: 'required',
                  ativo: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            invalidHandler: function() {
                  $('.error-message').removeClass('hide');
            },
      });
      $(".data").each(function(i, el) {
            var $this = $(el),
                  opts = {
                        format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                        startDate: attrDefault($this, 'startDate', ''),
                        endDate: attrDefault($this, 'endDate', ''),
                        daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                        startView: attrDefault($this, 'startView', 0),
                        language: 'pt-BR',
                        rtl: rtl()
                  },
                  $n = $this.next(),
                  $p = $this.prev();
            $this.datepicker(opts);
            if ($n.is('.input-group-addon') && $n.has('a')) {
                  $n.on('click', function(ev) {
                        ev.preventDefault();
                        $this.datepicker('show');
                  });
            }
      });
      // $('#id_questionario').select2('hide');
      // $timeout(function(){
      //   $('#id_questionario').select2('show');
      //   $('#id_questionario').select2();
      // },500);
      var tipo_select = 0;
      if ($('#id_pesquisa1').val() != -1) {
            $pesquisaseditor['get']($('#id_pesquisa1').val()).then(function(pesquisa) {
                  $scope.pesquisa = pesquisa;
                  // $scope.pesquisa.id_questionario  =     parseInt($scope.pesquisa.id_questionario);
                  // $scope.pesquisa.id_questionario_avaliado     =     parseInt($scope.pesquisa.id_questionario_avaliado);
                  // $scope.pesquisa.id_questionario_gestor =     parseInt($scope.pesquisa.id_questionario_gestor);
                  // $scope.pesquisa.id_questionario_pares  =     parseInt($scope.pesquisa.id_questionario_pares);
                  $scope.keySelectQuest = $scope.pesquisa.id_questionario;
                  $('#id_questionario').val($scope.pesquisa.id_questionario);
                  if (pesquisa.anonima == 1) {
                        $('#anonima').prop('checked', true);
                  } else {
                        $('#anonima').prop('checked', false);
                  }
                  if (pesquisa.template == 1) {
                        $('#template').prop('checked', true);
                  } else {
                        $('#template').prop('checked', false);
                  }
                  if (pesquisa.periodica == 1) {
                        $('#periodica').prop('checked', true);
                        $scope.pesquisa.periodica = true;
                        $('.dv-frequencia').removeClass('hide');
                        $('.dv-frequencia').show();
                  } else {
                        $('#periodica').prop('checked', false);
                        $scope.pesquisa.periodica = false;
                        $('.dv-dates').removeClass('hide');
                        $('.dv-dates').show();
                  }
                  tipo_select = pesquisa.id_tipo_pesquisa;
                  for (var i = 0; i < 5; i++) {
                        $scope['tipo' + i] = false;
                  }
                  $scope['tipo' + tipo_select] = true;
                  if ($scope.tipo0) {
                        $scope.tipo1 = true;
                  }
                  if (pesquisa.data_ini == '00/00/0000') $scope.pesquisa.data_ini = '';
                  if (pesquisa.data_fim == '00/00/0000') $scope.pesquisa.data_fim = '';
                  $timeout(function() {
                        $('#id_tipo_pesquisa').select2("val", pesquisa.id_tipo_pesquisa);
                        $('#avaliador').select2();
                        $('#frequencia').select2("val", pesquisa.frequencia);
                        $('#ativo').select2("val", pesquisa.ativo);
                        // $scope.pesquisa.public_mode = pesquisa.amostra;
                        $('.avaliado_mode input[type=checkbox]').each(function() {
                              var status = $scope.pesquisa[$(this).attr('name')];
                              if (status == 1) $(this).prop('checked', true);
                              else $(this).prop('checked', false);
                        });
                        if ($('#id_tipo_pesquisa').val() == 2) {
                              var type_tipo = 'h';
                        }
                        else if ($('#id_tipo_pesquisa').val() == 0) {
                              var type_tipo = 's';
                        }
                         else {
                              var type_tipo = '';
                        }
                        $pesquisaseditor['getQuestionarios'](type_tipo).then(function(res) {
                              $scope.questionarios = res;
                              $('#id_questionario').select2();
                              $('#id_questionario').select2("val", pesquisa.id_questionario);
                              $('#id_questionario_avaliado').select2('destroy');
                              $('#id_questionario_avaliado').select2();
                              $('#id_questionario_gestor').select2('destroy');
                              $('#id_questionario_gestor').select2();
                              $('#id_questionario_pares').select2('destroy');
                              $('#id_questionario_pares').select2();

                        });
                        // if ($('#id_tipo_pesquisa').val() == 2) {
                        //       $pesquisaseditor['getQuestionarios']('h').then(function(res) {
                        //             $scope.questionarios = res;
                        //             // $('#id_questionario').select2("destroy");
                        //             $('#id_questionario').select2();
                        //             $('#id_questionario').select2("val", pesquisa.id_questionario);
                        //             $('#id_questionario_avaliado').select2('destroy');
                        //             $('#id_questionario_avaliado').select2();
                        //             $('#id_questionario_gestor').select2('destroy');
                        //             $('#id_questionario_gestor').select2();
                        //             $('#id_questionario_pares').select2('destroy');
                        //             $('#id_questionario_pares').select2();
                        //       });
                        // } else {
                        //       $pesquisaseditor['getQuestionarios']().then(function(res) {
                        //             $scope.questionarios = res;
                        //             // $('#id_questionario').select2("destroy");
                        //             $('#id_questionario').select2();
                        //             $('#id_questionario').select2("val", pesquisa.id_questionario);
                        //             $('#id_questionario_avaliado').select2('destroy');
                        //             $('#id_questionario_avaliado').select2();
                        //             $('#id_questionario_gestor').select2('destroy');
                        //             $('#id_questionario_gestor').select2();
                        //             $('#id_questionario_pares').select2('destroy');
                        //             $('#id_questionario_pares').select2();
                        //       });
                        // }
                  }, 1000);
                  if ($scope.pesquisa.id_tipo_pesquisa == 2) $scope.pesquisa.amostra = 0;
                  $scope.step2 = true;
                  $scope.step3 = true;
            });
            $pesquisaseditor['getPublicPesquisaByUsuario']($('#id_pesquisa1').val()).then(function(publicPesquisa) {
                  $scope.byUsers = publicPesquisa.as;
                  $scope.notPublicos = publicPesquisa.ts;
                  $scope.usersTeams = $scope.byUsers;
                  $scope.sortUserList();
            });
      } else {
            $pesquisaseditor['getPublicPesquisaToSelect']().then(function(users) {
                  $scope.notPublicos = users;
                  $scope.sortUserList();
            });
            $scope.pesquisa = [];
            $('#periodica').prop('checked', false);
            $('.dv-dates').removeClass('hide');
            $('.dv-dates').show();
            // $scope.public_mode = 0;
            $scope.pesquisa.amostra = 0;
      }
      $scope.setSentNowFlag = function() {
            if ($('#id_pesquisa1').val() != -1) {
                  $scope.sent_now = false;
            } else {
                  $scope.sent_now = true;
            }
      }
      $pesquisaseditor['getQuestionarios']().then(function(questionarios) {
            $scope.questionarios = questionarios;
            $('#id_questionario').select2("destroy");
            $('#id_questionario_avaliado').select2('destroy');
            $('#id_questionario_gestor').select2('destroy');
            $('#id_questionario_pares').select2('destroy');
            $('#id_questionario_avaliado').select2();
            $('#id_questionario').select2();
            $('#id_questionario_gestor').select2();
            $('#id_questionario_pares').select2();
      });
      $pesquisaseditor['getUsersByEmpresa']().then(function(users) {
            $scope.avaliadors = users;
      });
      $('#periodica').change(function() {
            $timeout(function() {
                  $scope.pesquisa.data_ini = '';
                  $scope.pesquisa.data_fim = '';
            }, 10);
      });
      $scope.closeSurvey = function(id_pesquisa) {
            $scope.contentLoading++;
            $pesquisas['close'](id_pesquisa).then(function() {
                  $scope.contentLoading--;
                  toastr.success('Pesquisa Fechada!');
            });
      }
      $scope.tipoChange = function() {
            tipo_select = $('#id_tipo_pesquisa').val();
            for (var i = 0; i < 5; i++) {
                  $scope['tipo' + i] = false;
            }
            $scope['tipo' + tipo_select] = true;
            if ($scope.tipo0) {
                  $scope.tipo1 = true;
            }
            if ($scope.pesquisa.id_tipo_pesquisa == 2) {
                  $scope.pesquisa.amostra = 0;
                  // $scope.public_mode = 0;
                  $('#public_mode0').prop('checked', true);
            }
            if (tipo_select == 2) {
                  var type_tipo = 'h';
            }
            else if (tipo_select == 0) {
                  var type_tipo = 's';
            }
             else {
                  var type_tipo = '';
            }
            $pesquisaseditor['getQuestionarios'](type_tipo).then(function(response) {
                  $scope.questionarios = response;
            });
      }
      $('#id_questionario_avaliado, #id_questionario_gestor, #id_questionario_pares').change(function() {
            $('.error-message').removeClass('show');
            $(this).parent('div').removeClass('validate-has-error');
      });
      $scope.save_pesquisa1 = function() {
            if ($('#nome_pesquisa').val() == '') return;
            if ($('#data_ini').val() == '') return;
            if ($('#data_fim').val() == '') return;
            if ($('#id_tipo_pesquisa').val() == '') { alert("Tipo field is required!"); return; }
            if ($('#id_questionario').val() == '') { alert("Questionário field is required!"); return; }
            if ($('#ativo').val() == '') { alert("Período field is required!"); return; }
            else if ($scope.pesquisa.autoavalia == 1 && $scope.pesquisa.id_questionario_avaliado == 0) {
                  $('#id_questionario_avaliado').parent('div').addClass('validate-has-error');
                  $('.error-message').addClass('show');
                  return
            } else if ($scope.pesquisa.gestor == 1 && $scope.pesquisa.id_questionario_gestor == 0) {
                  $('#id_questionario_gestor').parent('div').addClass('validate-has-error');
                  $('.error-message').addClass('show');
                  return
            } else if ($scope.pesquisa.permite_pares == 1 && $scope.pesquisa.id_questionario_pares == 0) {
                  $('#id_questionario_pares').parent('div').addClass('validate-has-error');
                  $('.error-message').addClass('show');
                  return
            }
            if (!$scope.usersTeams.length) { alert("Selecione público usuarios."); return;}
            $scope.situacao = 1;
            $('#situacao').val(1);
            $('.error-message').addClass('hide');
            var request = $('#saveform1').serialize();
            $scope.contentLoading++;
            $pesquisaseditor['saveStepOne'](request).then(function(response) {
                  toastr.success('Configuração de pesquisa salva!');
                  $scope.pesquisa.id_pesquisa = response;
                  $('#id_pesquisa1').val(response);
                  $scope.step2 = true;
                  $scope.contentLoading--;
                  $timeout(function() {
                        location.href = baseurl + 'pesquisas';
                  }, 3000);
            });
      }
      $scope.save_draft = function() {
            if ($('#nome_pesquisa').val() == '') return;
            $scope.situacao = 0;
            $('#situacao').val(0);
            $('.error-message').addClass('hide');
            var request = $('#saveform1').serialize();
            $pesquisaseditor['saveStepOne'](request).then(function(response) {
                  toastr.success('Configuração de pesquisa salva!');
                  $scope.pesquisa.id_pesquisa = response;
                  $('#id_pesquisa1').val(response);
                  $scope.step2 = true;
                  $timeout(function() {
                        location.href = baseurl + 'pesquisas';
                  }, 2000);
            });
      }
      $('.overflow_dv').niceScroll({
            autohidemode: false,
            cursorcolor: "#3FB9EA"
      });
      $scope.save_pesquisa1_exit = function() {
            var request = $('#saveform1').serialize();
            $pesquisaseditor['saveStepOne'](request).then(function(response) {
                  // toastr.success('Configuração de pesquisa salva!');
                  $scope.pesquisa.id_pesquisa = response;
                  location.href = baseurl + 'pesquisas';
            });
      }
      $scope.$parent.$watch('teams', function(newVal, oldVal) {
            $scope.$teams = newVal;
      });
      // if (!$scope.teams || $scope.teams.length == 0){
      //       $teams['getAllTeams']().then(function(teams) {
      //           $scope.teams = teams;
      //       });
      // } 
      $users['get']().then(function(users) {
            $scope.users = users;
      });
      $cycleConfiguration['getNiveisByEmpresaId']().then(function(res) {
            $scope.niveis = res;
            setTimeout(function() {
                  $('#selected_user_level').select2();
            }, 400);
      });
      $scope.teamUsers = [];
      $scope.byUsers = [];
      $scope.byTeams = [];
      $scope.usersTeams = [];
      $scope.typeUsers = [];
      $scope.levelUsers = [];
      $('#selected_user_type').change(function() {

            $users['getByTypeOrLevel']($('#selected_user_type').val()).then(function(response) {
                  $scope.typeUsers = response;
                  $('#selected_user_type').select2('enable');
                  $scope.previewUserList();
            });
      });
      $('#selected_user_level').change(function() {
            $users['getByTypeOrLevel'](null, $('#selected_user_level').val()).then(function(response) {
                  $scope.levelUsers = response;
                  $('#selected_user_level').select2('enable');
                  $scope.previewUserList();
            });
      });
      $('#selectd_team').change(function() {
            $('#selectd_team').select2('disable');
            $scope.teamUsers = [];
            $("#selectd_users").select2("val", []).trigger("change");
            $('#chk_all_user').prop('checked', false);
            $users['get']().then(function(users) {
                  $scope.users = users;
                  var arrTeams = [$('#selectd_team').val()];
                  var strTeams = "";
                  if (arrTeams == null) {
                        $('#selectd_team').select2('enable');
                        $scope.previewUserList();
                        return;
                  }
                  for (var i = 0; i < arrTeams.length; i++) {
                        strTeams += "," + arrTeams[i];
                  }
                  strTeams = strTeams.substring(1);
                  $pesquisaseditor['getUsersByTeams'](strTeams).then(function(response) {
                        $scope.teamUsers = [];
                        $scope.teamUsers = response;
                        for (var i = 0; i < response.length; i++) {
                              for (var j = 0; j < $scope.users.length; j++) {
                                    if (response[i].id_usuario == $scope.users[j].id) {
                                          $scope.users.splice(j, 1);
                                          break;
                                    }
                              }
                        }
                        $('#selectd_team').select2('enable');
                        $scope.previewUserList();
                  });
            });
      });
      $('#selectd_users').change(function() {
            $('#selectd_users').select2('disable');
            $scope.byUsers = [];
            var arrUsers = [$('#selectd_users').val()];
            if (arrUsers == null) {
                  $('#selectd_users').select2('enable');
                  $scope.previewUserList();
                  return;
            }
            var strUsers = "";
            for (var i = 0; i < arrUsers.length; i++) {
                  strUsers += "," + arrUsers[i];
            }
            strUsers = strUsers.substring(1);
            $pesquisaseditor['getUsersByIds'](strUsers).then(function(response) {
                  $scope.byUsers = response;
                  $('#selectd_users').select2('enable');
                  $scope.previewUserList();
            });
      });
      $('#search_text').keyup(function() {
            $('.users-group-item').each(function() {
                  $(this).show();
            });
            var search = $(this).val();
            for (var i = 0; i < $scope.usersTeams.length; i++) {
                  if (($scope.usersTeams[i].nome_usuario != null && $scope.usersTeams[i].nome_usuario.toLowerCase().indexOf(search.toLowerCase()) < 0) && ($scope.usersTeams[i].nome_unidade != null && $scope.usersTeams[i].nome_unidade.toLowerCase().indexOf(search.toLowerCase()) < 0) && ($scope.usersTeams[i].email_usuario != null && $scope.usersTeams[i].email_usuario.toLowerCase().indexOf(search.toLowerCase()) < 0)) {
                        var id_time = $scope.usersTeams[i].id_time;
                        var id_usuario = $scope.usersTeams[i].id_usuario;
                        $('div[data-id=' + id_time + '_' + id_usuario + ']').hide();
                  }
            }
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      });
      $('#search_text_not_publico').keyup(function() {
            $('.users-group-item-not-publico').each(function() {
                  $(this).show();
            });
            var search = $(this).val();
            for (var i = 0; i < $scope.notPublicos.length; i++) {
                  if (($scope.notPublicos[i].nome_usuario != null && $scope.notPublicos[i].nome_usuario.toLowerCase().indexOf(search.toLowerCase()) < 0) && ($scope.notPublicos[i].nome_unidade != null && $scope.notPublicos[i].nome_unidade.toLowerCase().indexOf(search.toLowerCase()) < 0)) {
                        var id_time = $scope.notPublicos[i].id_time;
                        var id_usuario = $scope.notPublicos[i].id_usuario;
                        $('div[data-id=' + id_time + '_' + id_usuario + ']').hide();
                  }
            }
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      });
      $('#chk_all_team').change(function() {
            if ($(this).is(':checked')) {
                  $("#selectd_team > option").prop("selected", "selected");
            } else {
                  $("#selectd_team > option").removeAttr("selected");
            }
            $("#selectd_team").trigger("change");
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      });
      $('#chk_all_user').change(function() {
            if ($(this).is(':checked')) {
                  $("#selectd_users > option").prop("selected", "selected");
            } else {
                  $("#selectd_users > option").removeAttr("selected");
            }
            $("#selectd_users").trigger("change");
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      });
      $scope.cleanAmostra = function() {
            $('#selectd_users').val(null);
            $('#selectd_team').val(null);
            $('#selected_user_type').val(null);
            $('#selected_user_level').val(null);
            $('#selectd_users').select2();
            $('#selectd_team').select2();
            $('#selected_user_type').select2();
            $('#selected_user_level').select2();
            $('#chk_all_user').prop('checked', false);
            $('#chk_all_team').prop('checked', false);
            $scope.usersTeams = [];
            $scope.teamUsers = [];
            $scope.byUsers = [];
            $scope.typeUsers = [];
            $scope.levelUsers = [];
      }

      function testIfUserInArray(user, arr) {
            if (!arr) return false;
            for (var i = 0; i < arr.length; i++) {
                  if (arr[i].id_usuario == user.id_usuario) return true;
            }
            return false;
      }
      function comparePublicUsersList(a, b) {
            if (a.nome_usuario < b.nome_usuario) 
              return -1; 
            if (a.nome_usuario > b.nome_usuario) 
              return 1; 
            return 0; 
      }
      $scope.sortUserList = function() {
            $scope.usersTeams.sort(comparePublicUsersList);            
            $scope.notPublicos.sort(comparePublicUsersList);            
      }
      $scope.previewUserList = function() {

            if ($scope.teamUsers) {
                  for (var i = 0; i < $scope.teamUsers.length; i++) {
                        if (!testIfUserInArray($scope.teamUsers[i], $scope.usersTeams))
                        {
                              $scope.usersTeams.push($scope.teamUsers[i]);
                              for (var j = 0; j < $scope.notPublicos.length; j++) {
                                    if ($scope.teamUsers[i].id_usuario == $scope.notPublicos[j].id_usuario) {
                                          $scope.notPublicos.splice(j, 1);
                                          break;
                                    }
                              }
                        }
                  }
            }
            if ($scope.byUsers) {
                  for (var i = 0; i < $scope.byUsers.length; i++) {
                        if (!testIfUserInArray($scope.byUsers[i], $scope.usersTeams))
                        {
                              $scope.usersTeams.push($scope.byUsers[i]);
                              for (var j = 0; j < $scope.notPublicos.length; j++) {
                                    if ($scope.byUsers[i].id_usuario == $scope.notPublicos[j].id_usuario) {
                                          $scope.notPublicos.splice(j, 1);
                                          break;
                                    }
                              }
                        } 
                  }
            }
            if ($scope.typeUsers) {
                  for (var i = 0; i < $scope.typeUsers.length; i++) {
                        if (!testIfUserInArray($scope.typeUsers[i], $scope.usersTeams))
                        {
                              $scope.usersTeams.push($scope.typeUsers[i]);
                              for (var j = 0; j < $scope.notPublicos.length; j++) {
                                    if ($scope.typeUsers[i].id_usuario == $scope.notPublicos[j].id_usuario) {
                                          $scope.notPublicos.splice(j, 1);
                                          break;
                                    }
                              }
                        } 
                  }
            }
            if ($scope.levelUsers) {
                  for (var i = 0; i < $scope.levelUsers.length; i++) {
                        if (!testIfUserInArray($scope.levelUsers[i], $scope.usersTeams))
                        {
                              $scope.usersTeams.push($scope.levelUsers[i]);
                              for (var j = 0; j < $scope.notPublicos.length; j++) {
                                    if ($scope.levelUsers[i].id_usuario == $scope.notPublicos[j].id_usuario) {
                                          $scope.notPublicos.splice(j, 1);
                                          break;
                                    }
                              }
                        } 
                  }
            }

            $scope.sortUserList();


            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 1000);
      }
      $scope.selectUser = function(user_id) {
            for (var i = 0; i < $scope.notPublicos.length; i++) {
                  if ($scope.notPublicos[i].id_usuario == user_id) {
                        $scope.usersTeams.push($scope.notPublicos[i]);
                        $scope.notPublicos.splice(i, 1);
                        $scope.sortUserList();
                        break;
                  }
            }
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      }
      $scope.unSelectUser = function(user_id) {
            for (var i = 0; i < $scope.usersTeams.length; i++) {
                  if ($scope.usersTeams[i].id_usuario == user_id) {
                        $scope.notPublicos.push($scope.usersTeams[i]);
                        $scope.usersTeams.splice(i, 1);
                        $scope.sortUserList();
                        break;
                  }
            }
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      }
      $scope.deleteUser = function(time_id, user_id) {
            for (var i = 0; i < $scope.usersTeams.length; i++) {
                  if ($scope.usersTeams[i].id_usuario == user_id) {
                        $scope.usersTeams.splice(i, 1);
                        break;
                  }
            }
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      }
      $scope.save_pesquisa2 = function() {
            var request = $('#saveform2').serialize();
            $pesquisaseditor['saveStepTwo'](request).then(function(response) {
                  toastr.success('Público Salvo!');
                  $scope.step3 = true;
            });
      }
      $scope.save_pesquisa3 = function() {
            var request = $('#saveform3').serialize();
            $pesquisaseditor['saveStepThree'](request).then(function(response) {
                  location.href = baseurl + 'pesquisas';
            });
      }
});
elofy.controller('pesquisaquestionCtrl', function globalCtrl($scope, $timeout, $filter, $globals, $users, $teams, $pesquisaquestion, $categories) {
      $scope.global10 = [];
      $scope.global5 = [];
      $scope.scores = [];
      $scope.scores1 = [];
      $scope.result_score = 0;
      $scope.teamUsers = [];
      $scope.byUsers = [];
      $scope.byCategories = [];
      $scope.byGestors = [];
      $scope.byTeams = [];
      $scope.scale = 0;
      $scope.scaletype = 1;
      $scope.group_by = false;
      $scope.fechado = 0;
      $scope.contentLoading = 0;
      var scaletype = 1;
      $scope.chartType = 5;
      $timeout(function() {
            $scope.chk_escala = true;
            $("#chk_escala").prop('checked', true);
      }, 100);
      $scope.setscaletype = function() {
            if ($("input[name='scaleType']").is(':checked')) {
                  $scope.scaletype = 1;
            } else {
                  $scope.scaletype = 0;
            }
      }
      $scope.setChartType = function() {
            $scope.chartType = $("input[name='escale']:checked").val();
      }
      $scope.setgroupby = function() {
            var check_status = $('#group_cat').prop('checked');
            if (check_status == true) {
                  $scope.group_by = true;
            } else {
                  $scope.group_by = false;
            }
      }
      $('.selectd_tags').hide();
      $('.selectd_cat').hide();
      $('#selectd_team1').hide();
      $('#selectd_gestor').hide();
      $('#id_pergunta').hide();
      $scope.nextRequests = function() {
            $scope.contentLoading++;
            $pesquisaquestion['getAllTagsPesquisa']().then(function(res) {
                  $scope.contentLoading--;
                  $('.selectd_tags').select2('destroy');
                  $scope.tags = res;
                  $timeout(function() {
                        $('#selectd_tags').show();
                        $('#selectd_tags').select2();
                  }, 200);
            });
            $scope.contentLoading++;
            $pesquisaquestion['getAllTeamsPesquisa'](null, $scope.fechado).then(function(res) {
                  $scope.contentLoading--;
                  $('.selectd_team1').select2('destroy');
                  $scope.teams = res;
                  $timeout(function() {
                        $('#selectd_team1').show();
                        $('#selectd_team1').select2();
                  }, 200);
            });
            $scope.contentLoading++;
            var id_pesquisa = $('#id_pesquisa1').val();
            $pesquisaquestion['getAllCategory'](null, $scope.fechado,id_pesquisa).then(function(res) {
                  $scope.contentLoading--;
                  $('.selectd_cat').select2('destroy');
                  $scope.categories = res;
                  $timeout(function() {
                        $('.selectd_cat').show();
                        $('.selectd_cat').select2();
                  }, 200);
            });
            $scope.contentLoading++;
            $pesquisaquestion['getAllGestor'](null, null, null, $scope.fechado).then(function(res) {
                  $scope.contentLoading--;
                  $('#selectd_gestor').select2('destroy');
                  $scope.gestors = res;
                  $timeout(function() {
                        $('#selectd_gestor').show();
                        $('#selectd_gestor').select2();
                  }, 200);
            });
            $timeout(function() {
                  $('#tempo_empresa').select2();
            }, 200);
            $('#id_pergunta').select2('destroy');

            
            $scope.contentLoading++
            $pesquisaquestion['getAllPergunta'](null, null, $scope.fechado,id_pesquisa).then(function(res) {
                  $scope.contentLoading--;
                  $scope.perguntas = res;
                  $timeout(function() {
                        $('#id_pergunta').show();
                        $('#id_pergunta').select2();
                  }, 200);
            });
      }
      //essa requisição já consegue saber pela view o "fechado", mas talvez não seja necessário
      // daí teremos que implementar o parâmetro aqui
      // ou usar essa requisição para depois chamar as outras
      $scope.contentLoading++;
      $pesquisaquestion['get']($('#id_pesquisa1').val()).then(function(pesquisa) {
            $scope.contentLoading--;
            $scope.info = pesquisa;
            if (pesquisa.fechado) $scope.fechado = Number(pesquisa.fechado);
            else $scope.fechado = 0;
            fakePie_title = 'adesao';
            fakePie_value = pesquisa.percentage;
            $('#scale5').prop('checked', true);
            $('#scale212').prop('checked', true);
            $scope.init();
            $scope.nextRequests();
      });
      $scope.cleanFilters = function() {
            $("#selectd_cat").select2("val", "");
            $("#id_pergunta").select2("val", "");
            $("#selectd_gestor").select2("val", "");
            $("#tempo_empresa").select2("val", "");
            $("#selectd_tags").select2("val", "");
            $("#selectd_team1").select2("val", "");
            $('#chk_all_tag').removeAttr("checked");
            $('#chk_all_team').removeAttr("checked");
            $('#chk_all_user').removeAttr("checked");
            $('#chk_all_cat').removeAttr("checked");
            $('#chk_all_gestor').removeAttr("checked");
            $scope.id_pergunta = "";
            $scope.id_cats = "";
            $scope.id_gest = "";
            $scope.id_times = "";
            $scope.selected_tempo_empresa = "";
      }
      $scope.getGlobalScores10 = function() {
            var usersTeams = [];
            var teamsUsers = [];
            var usersCats = [];
            var usersGest = [];
            var id_users = '';
            var id_cats = '';
            var id_gest = '';
            var id_times = '';
            var selected_tempo_empresa = '';
            var id_pesquisa = $('#id_pesquisa1').val();
            var id_pergunta = $scope.id_pergunta;
            var type = $scope.ratio_type;
            var group_by = $scope.group_by;
            id_cats = $scope.id_cats;
            id_gest = $scope.id_gest;
            id_times = $scope.id_times;
            selected_tempo_empresa = $scope.selected_tempo_empresa;
            $scope.contentLoading++;
            $pesquisaquestion['getGlabalRatingDatas10'](id_pergunta, id_pesquisa, id_users, id_cats, type, group_by, id_gest, id_times, selected_tempo_empresa, $scope.fechado).then(function(datas) {
                  $scope.contentLoading--;
                  $scope.glabal10 = datas;
                  if (datas.length == 0 && datas.length != undefined) $scope.glabal10 = null;
                  else $scope.glabal10 = datas;
            });
      }
      $scope.getGlobalScores5 = function(scaletype) {
            var usersTeams = [];
            var teamsUsers = [];
            var usersCats = [];
            var usersGest = [];
            var id_users = '';
            var id_cats = '';
            var id_gest = '';
            var id_times = '';
            var selected_tempo_empresa = '';
            var id_pesquisa = $('#id_pesquisa1').val();
            var id_pergunta = $scope.id_pergunta;
            var type = $scope.ratio_type;
            var group_by = $scope.group_by;
            id_cats = $scope.id_cats;
            id_gest = $scope.id_gest;
            id_times = $scope.id_times;
            selected_tempo_empresa = $scope.selected_tempo_empresa;
            $scope.contentLoading++;
            $pesquisaquestion['getGlabalRatingDatas5'](id_pergunta, id_pesquisa, id_users, id_cats, type, group_by, id_gest, id_times, selected_tempo_empresa, $scope.fechado).then(function(datas) {
                  $scope.contentLoading--;
                  if (datas.length == 0 && datas.length != undefined) $scope.global5 = null;
                  else $scope.global5 = datas;
            });
      }
      $scope.reloadRatingData5 = function() {
            $scope.getRatingScores5();
      }
      $scope.usersTeams = [];
      $scope.byTeams = [];
      var id_pesquisa = $('#id_pesquisa1').val();
      $('#selectd_tags').change(function() {
            var selectd_tags = $(this).val();
            var strTags = '';
            if (selectd_tags != null) {
                  var strTags = selectd_tags.join(",");
            }
            $scope.id_tags = strTags;
            $("#selectd_team1").select2("val", "");
            var select_val = new Array();
            $scope.contentLoading++;
            $pesquisaquestion['getAllTeamsPesquisa'](strTags, $scope.fechado).then(function(response) {
                  $scope.contentLoading--;
                  $scope.teams = response;
                  if (response.length > 0) {
                        for (var i = 0; i < response.length; i++) {
                              select_val.push(response[i].id);
                        }
                  }
                  var teamsId = '';
                  $timeout(function() {
                        if (selectd_tags && selectd_tags.length > 0) {
                              $('#selectd_team1').select2('val', select_val);
                              teamsId = select_val.join(",");
                              $scope.id_times = teamsId;
                        }
                        $scope.contentLoading++;
                        $pesquisaquestion['getAllCategory'](teamsId, $scope.fechado,id_pesquisa).then(function(response) {
                              $scope.contentLoading--;
                              $scope.categories = response;
                        });
                        $scope.contentLoading++;
                        $pesquisaquestion['getAllPergunta'](teamsId, null, $scope.fechado,id_pesquisa).then(function(response) {
                              $scope.contentLoading--;
                              $scope.perguntas = response;
                        });
                        $scope.contentLoading++;
                        $pesquisaquestion['getAllGestor'](teamsId, null, null, $scope.fechado).then(function(response) {
                              $scope.contentLoading--;
                              $scope.gestors = response;
                        });
                        // $pesquisaquestion['getAllCargos'](teamsId).then(function(response) {
                        //       $scope.cargos = response;
                        // });
                  }, 100);
            });
      });
      $('#selectd_team1').change(function() {
            var selectd_team1 = $(this).val();
            var strTeams = '';
            if (selectd_team1 != null) {
                  var strTeams = selectd_team1.join(",");
            }
            $scope.id_times = strTeams;
            $("#selectd_cat").select2("val", "");
            $("#id_pergunta").select2("val", "");
            $("#selectd_gestor").select2("val", "");
            $scope.contentLoading++;
            $pesquisaquestion['getAllCategory'](strTeams, $scope.fechado,id_pesquisa).then(function(response) {
                  $scope.contentLoading--;
                  $scope.categories = response;
            });
            $scope.contentLoading++;
            $pesquisaquestion['getAllPergunta'](strTeams, null, $scope.fechado,id_pesquisa).then(function(response) {
                  $scope.contentLoading--;
                  $scope.perguntas = response;
            });
            $scope.contentLoading++;
            $pesquisaquestion['getAllGestor'](strTeams, null, null, $scope.fechado).then(function(response) {
                  $scope.contentLoading--;
                  $scope.gestors = response;
            });
            // $pesquisaquestion['getAllCargos'](strTeams).then(function(response) {
            //       $scope.cargos = response;
            // });
      });
      $('#selectd_cat').change(function() {
            var selectd_cat = $(this).val();
            var strCats = '';
            if (selectd_cat != null) {
                  var strCats = selectd_cat.join(",");
            }
            $scope.id_cats = strCats;
            if ($scope.selectd_team1) {
                  $scope.selected_teams = $scope.selectd_team1.join(',');
            }
            $("#id_pergunta").select2("val", "");
            $("#selectd_gestor").select2("val", "");
            $scope.contentLoading++;
            $pesquisaquestion['getAllPergunta']($scope.selected_teams, strCats, $scope.fechado,id_pesquisa).then(function(response) {
                 $scope.contentLoading--;
                  $scope.perguntas = response;
            });
            $scope.contentLoading++;
            $pesquisaquestion['getAllGestor']($scope.selected_teams, strCats, null, $scope.fechado).then(function(response) {
                  $scope.contentLoading--;
                  $scope.gestors = response;
            });
            // $pesquisaquestion['getAllCargos']($scope.selected_teams,strCats).then(function(response) {
            //       $scope.cargos = response;
            // });
      });
      $('#id_pergunta').change(function() {
            var id_pergunta = $(this).val();
            $scope.id_pergunta = id_pergunta;
            if ($scope.selectd_team1) {
                  $scope.selected_teams = $scope.selectd_team1.join(',');
            }
            if ($scope.keySelectCat) {
                  $scope.selected_categories = $scope.keySelectCat.join(',');
            }
            $("#selectd_gestor").select2("val", "");
            $scope.contentLoading++;
            $pesquisaquestion['getAllGestor']($scope.selected_teams, $scope.selected_categories, id_pergunta, $scope.fechado).then(function(response) {
                  $scope.contentLoading--;
                  $scope.gestors = response;
            });
            // $pesquisaquestion['getAllCargos']($scope.selected_teams,$scope.selected_categories,id_pergunta).then(function(response) {
            //       $scope.cargos = response;
            // });
      });
      $('#selectd_gestor').change(function() {
            $scope.byGestors = [];
            var selectd_gestor = $(this).val();
            var strGest = '';
            if (selectd_gestor != null) {
                  var strGest = selectd_gestor.join(",");
            }
            $scope.id_gest = strGest;
            // $pesquisaquestion['getAllCargos']($scope.selected_teams,$scope.selected_categories,$scope.id_pergunta,strGest).then(function(response) {
            //       $scope.cargos = response;
            // });
      });
      $('#tempo_empresa').change(function() {
            // $scope.byCargos = [];
            // var selectd_cargo     =     $(this).val();
            // var strCargo = '';
            // if(selectd_cargo != null){
            //     var strCargo = selectd_cargo.join(",");
            // }
            // $scope.id_cargos = strCargo;
            $scope.selected_tempo_empresa = $(this).val();
      });
      $scope.filterbottomsection = function() {
            if ($scope.typetab == 1) {
                  $scope.getRatingScores10();
                  $scope.getRatingScores5();
                  $scope.getGlobalScores5();
                  $scope.getGlobalScores10();
            }
            $scope.customfiltertext = $scope.customfiltertext;
            if ($scope.typetab == 2) $scope.escalaqType(true);
            if ($scope.typetab == 3) $scope.escalaOType();
            if ($scope.typetab == 5) $scope.filterMatrix();
      }
      $scope.escala5Type = function() {
            $scope.typetab = 1;
      }
      $scope.escalaqType = function(skipvalidation = false) {
            if ($scope.typetab != 2 || skipvalidation) {
                  $scope.typetab = 2;
                  $timeout(function() {
                        $scope.contentLoading++;
                        $pesquisaquestion['getPesquisaRespostasTypeQ']($('#id_pesquisa1').val(), $scope.id_pergunta, $scope.id_cats, $scope.id_gest, $scope.id_times, $scope.selected_tempo_empresa).then(function(respostas) {
                              $scope.contentLoading--;
                              var cat = "";
                              var per = "";
                              $scope.cat_respostas = {};
                              angular.forEach(respostas, function(result, key) {
                                    if (result.categoria && result.categoria != '' && cat != result.categoria) {
                                          cat = result.categoria;
                                          $scope.cat_respostas[cat] = {};
                                    }
                                    if (result.pergunta && result.pergunta != '' && per != result.pergunta) {
                                          per = result.pergunta;
                                          // console.log("pergunta", per);
                                          $scope.cat_respostas[cat][per] = [];
                                    }
                                    if (result.comentario && result.comentario != "") {
                                          $scope.cat_respostas[cat][per].push({
                                                'comentario': result.comentario,
                                                'posta': result.posta
                                          });
                                    }
                              });
                              // console.log($scope.cat_respostas);
                              // $scope.respostas = respostas;
                        });
                  }, 100);
            }
      }
      $scope.adesao = function() {
            $scope.typetab = 4;
            if (!$scope.listaAdesao) {
                  $pesquisaquestion['getAdesaoPesquisa']($('#id_pesquisa1').val()).then(function(response) {
                        $scope.listaAdesao = response;
                  });
            }
      }
      $scope.matriz = function() {
            $("#tipo_matriz").select2();
            $scope.typetab = 5;
            if (!$scope.matrix) $scope.matrix = {};
            $scope.matrix.selectedMatrix = {};

            function getObjectByKeys(object, key1, value1, key2, value2) {
                  console.log(object, key1, value1, key2, value2);
                  var returnValue = null;
                  angular.forEach(object, function(result, key) {
                        if (result[key1] == value1 && result[key2] == value2) returnValue = result;
                  });
                  return returnValue;
            }

            function ajustMatrixHeaderMargin() {
                  var higher = 0;
                  angular.forEach($scope.matrix.selectedMatrix.columns, function(result, key) {
                        if (higher < result.length) higher = result.length;
                        console.log("higher", higher);
                  });
                  setTimeout(function() {
                        $('.matrix').css("margin-top", higher * 5);
                        $('.inclined_header').css("width", higher * 10);
                  }, 100);
            }

            function getLinesAndColumns(response, lineKey, columnKey, matrix) {
                  matrix.lines = [];
                  matrix.columns = [];
                  angular.forEach(response, function(result, key) {
                        if (matrix.lines.indexOf(result[lineKey]) == -1) {
                              matrix.lines.push(result[lineKey]);
                        }
                        if (matrix.columns.indexOf(result[columnKey]) == -1) {
                              matrix.columns.push(result[columnKey]);
                        }
                  });
            }
            $scope.showMatrixOfType = function() {
                  var method = '';
                  var objectToStore = '';
                  var lineName = '';
                  var columnName = '';
                  switch ($scope.matrix.selectedType) {
                        case 'question_gestor':
                              method = 'getMatrixQuestionGestor';
                              objectToStore = 'question_vs_gestor';
                              lineName = 'pergunta';
                              columnName = 'nome_gestor';
                              break;
                        case 'question_team':
                              method = 'getMatrixQuestionTeam';
                              objectToStore = 'question_vs_teams';
                              lineName = 'pergunta';
                              columnName = 'nome_time';
                              break;
                        case 'category_gestor':
                              method = 'getMatrixCategoryGestor';
                              objectToStore = 'category_vs_gestor';
                              lineName = 'nome_categoria';
                              columnName = 'nome_gestor';
                              break;
                        default: // 'category_team':
                              method = 'getMatrixCategoryTeam';
                              objectToStore = 'category_vs_teams';
                              lineName = 'nome_categoria';
                              columnName = 'nome_time';
                              break;
                  }
                  if ($scope.matrix[objectToStore] && $scope.matrix[objectToStore].table) {
                        $scope.matrix.selectedMatrix = $scope.matrix[objectToStore];
                        ajustMatrixHeaderMargin();
                  } else {
                        $scope.matrix[objectToStore] = {};
                        $pesquisaquestion[method]($scope.id_pergunta, $('#id_pesquisa1').val(), '', $scope.id_cats, $scope.id_gest, $scope.id_times, $scope.selected_tempo_empresa).then(function(response) {
                              $scope.matrix[objectToStore] = {};
                              $scope.matrix[objectToStore].table = {};
                              getLinesAndColumns(response, lineName, columnName, $scope.matrix[objectToStore]);
                              angular.forEach($scope.matrix[objectToStore].lines, function(res, k) {
                                    $scope.matrix[objectToStore].table[res] = {};
                                    angular.forEach($scope.matrix[objectToStore].columns, function(res2, k2) {
                                          $scope.matrix[objectToStore].table[res][res2] = getObjectByKeys(response, columnName, res2, lineName, res);
                                    })
                              });
                              $scope.matrix.selectedMatrix = $scope.matrix[objectToStore];
                              ajustMatrixHeaderMargin();
                        });
                  }
            }
            $scope.showMatrixOfType('category_team');
            $scope.filterMatrix = function() {
                  $scope.showMatrixOfType();
            }
      }
      $scope.selectedMatrixIsEmpty = function() {
            return $.isEmptyObject($scope.matrix.selectedMatrix.table);
      };
      $scope.escalaOType = function() {
            $scope.typetab = 3;
            $timeout(function() {
                  $scope.contentLoading++;
                  $pesquisaquestion['getPesquisaRespostasTypeO']($('#id_pesquisa1').val(), $scope.id_pergunta, $scope.id_cats, $scope.id_gest, $scope.id_times, $scope.selected_tempo_empresa).then(function(respostas) {
                        $scope.contentLoading--;
                        // $scope.respostasObjetivas = respostas;
                        var cat = "";
                        $scope.cat_respostasObjetivas = {};
                        angular.forEach(respostas, function(result, key) {
                              if (result.categoria && result.categoria != '' && cat != result.categoria) {
                                    cat = result.categoria;
                                    $scope.cat_respostasObjetivas[cat] = [];
                              }
                              $scope.cat_respostasObjetivas[cat].push({
                                    'pergunta': result.pergunta,
                                    'posta': result.posta,
                                    'quantidade': result.quantidade
                              });
                        });
                        console.log($scope.cat_respostasObjetivas);
                  });
            }, 100);
      }
      $('#chk_all_tag').change(function() {
            if ($(this).is(':checked')) {
                  $("#selectd_tags > option").prop("selected", "selected");
            } else {
                  $("#selectd_tags > option").removeAttr("selected");
            }
            $("#selectd_tags").trigger("change");
      });
      $('#chk_all_team').change(function() {
            if ($(this).is(':checked')) {
                  $("#selectd_team1 > option").prop("selected", "selected");
            } else {
                  $("#selectd_team1 > option").removeAttr("selected");
            }
            $("#selectd_team1").trigger("change");
      });
      $('#chk_all_user').change(function() {
            if ($(this).is(':checked')) {
                  $("#selectd_users > option").prop("selected", "selected");
            } else {
                  $("#selectd_users > option").removeAttr("selected");
            }
            $("#selectd_users").trigger("change");
      });
      $('#chk_all_cat').change(function() {
            if ($(this).is(':checked')) {
                  $("#selectd_cat > option").prop("selected", "selected");
            } else {
                  $("#selectd_cat > option").removeAttr("selected");
            }
            $("#selectd_cat").trigger("change");
      });
      $('#chk_all_gestor').change(function() {
            if ($(this).is(':checked')) {
                  $("#selectd_gestor > option").prop("selected", "selected");
            } else {
                  $("#selectd_gestor > option").removeAttr("selected");
            }
            $("#selectd_gestor").trigger("change");
      });
      $('input[name="escale"]').change(function() {
            $scope.getQuestionList();
      });
      $scope.getRatingScores10 = function() {
            var usersTeams = [];
            var teamsUsers = [];
            var usersCats = [];
            var usersGest = [];
            var id_users = '';
            var id_cats = '';
            var id_gest = '';
            var id_times = '';
            var selected_tempo_empresa = '';
            var id_pesquisa = $('#id_pesquisa1').val();
            var id_pergunta = $scope.id_pergunta;
            var type = $scope.ratio_type;
            var type = $scope.ratio_type;
            var group_by = $scope.group_by;
            id_cats = $scope.id_cats;
            id_gest = $scope.id_gest;
            id_times = $scope.id_times;
            selected_tempo_empresa = $scope.selected_tempo_empresa;
            $scope.contentLoading++;
            $pesquisaquestion['getRatingDatas10'](id_pergunta, id_pesquisa, id_users, id_cats, type, group_by, id_gest, id_times, selected_tempo_empresa, $scope.fechado).then(function(response) {
                  $scope.contentLoading--;
                  $('.number-pane-10').show();
                  if (response.length == 0) $('.number-pane-10').hide();
                  $scope.scores10 = response;
            });
      }
      $scope.getRatingScores5 = function() {
            var usersTeams = [];
            var teamsUsers = [];
            var usersCats = [];
            var usersGest = [];
            var id_users = '';
            var id_cats = '';
            var id_gest = '';
            var id_times = '';
            var selected_tempo_empresa = '';
            var id_pesquisa = $('#id_pesquisa1').val();
            var id_pergunta = $scope.id_pergunta;
            var type = $scope.ratio_type;
            var type = $scope.ratio_type;
            var group_by = $scope.group_by;
            id_cats = $scope.id_cats;
            id_gest = $scope.id_gest;
            id_times = $scope.id_times;
            selected_tempo_empresa = $scope.selected_tempo_empresa;
            $scope.contentLoading++;
            $pesquisaquestion['getRatingDatas5'](id_pergunta, id_pesquisa, id_users, id_cats, type, group_by, id_gest, id_times, selected_tempo_empresa, $scope.fechado).then(function(response) {
                  $scope.contentLoading--;
                  $('.number-pane-5').show();
                  if (response.length == 0) $('.number-pane-5').hide();
                  $scope.scores5 = response;
            });
      }
      $scope.exportCSV = function() {
            location.href = baseurl + 'exportPesquisaRespostasList?id_pesquisa=' + $('#id_pesquisa1').val() + '&fechado=' + $scope.fechado;
      }
      var fakePie_value = 0;
      var fakePie_title = "";
      $timeout(function() {
            $('.hide').removeClass('hide');
      }, 1000);
      $scope.init = function() {
            var chartPie = c3.generate({
                  bindto: '#chart-pie',
                  size: {
                        height: 150,
                        width: 150
                  },
                  data: {
                        columns: [
                              [fakePie_title, fakePie_value],
                              [' ', 100 - fakePie_value]
                        ],
                        type: 'donut'
                  },
                  color: {
                        pattern: ['#00abf7', '#6d979e']
                  },
                  donut: {
                        title: fakePie_value + "%",
                        width: 17,
                        label: {
                              show: false
                        }
                  },
                  transition: {
                        duration: 1000
                  },
                  legend: {
                        show: false
                  }
            });
            for (var i = 0; i < 10; i++) {
                  var score = [];
                  score['id_pergunta'] = 0;
                  score['count'] = "0";
                  score['rating_score'] = i + 1;
                  score['percent'] = 0;
                  $scope.scores.push(score);
                  $scope.global10.push(score);
            }
            $scope.getGlobalScores10();
            $scope.getRatingScores10();
            for (var i = 0; i < 5; i++) {
                  var score = [];
                  score['id_pergunta'] = 0;
                  score['count'] = "0";
                  score['rating_score'] = i + 1;
                  score['percent'] = 0;
                  $scope.scores1.push(score);
                  $scope.global5.push(score);
            }
            $scope.getGlobalScores5();
            $scope.getRatingScores5();
      };
      $('#search_text').keydown(function() {
            $('.users-group-item').each(function() {
                  $(this).show();
            });
            var search = $(this).val();
            for (var i = 0; i < $scope.respostas.length; i++) {
                  var name = $scope.respostas[i].usuario.toLowerCase();
                  if (($scope.respostas[i].usuario.toLowerCase().indexOf(search) < 0) && ($scope.respostas[i].id_usuario.toLowerCase().indexOf(search) < 0) && ($scope.respostas[i].pergunta.toLowerCase().indexOf(search) < 0) && ($scope.respostas[i].comentario.toLowerCase().indexOf(search) < 0) && ($scope.respostas[i].posta.toLowerCase().indexOf(search) < 0) && ($scope.respostas[i].rating.toLowerCase().indexOf(search) < 0)) {
                        var id_usuario = $scope.respostas[i].id_usuario;
                        $('div[data-id=' + id_usuario + ']').hide();
                  }
            }
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      });
});
/**
 *
 */
elofy.controller('avaliacoesCtrll', function globalCtrl($scope, $timeout, $teams, $users, $years, $cycles, $assessments, $translate) {
      $teams['getAllTeams']().then(function(teams) {
            $scope.teams = teams;
            if ($scope.teams.length) {
                  if ($scope.teams[0].id) {
                        $scope.teams.unshift({
                              id: '',
                              name: 'Todos'
                        });
                  }
            }
            $scope.selectedTeam = '';
            $timeout(function() {
                  var $teams = $('.select-teams');
                  $teams.addClass('visible');
                  $teams.selectBoxIt();
            }, 10);
      });
      $users['get']().then(function(users) {
            $scope.users = users;
            if ($scope.users.length) {
                  if ($scope.users[0].id) {
                        $scope.users.unshift({
                              id: '',
                              name: 'Todos'
                        });
                  }
            }
            $scope.selectedUser = '';
            $timeout(function() {
                  var $teams = $('.select-user');
                  $teams.addClass('visible');
                  $teams.selectBoxIt();
            }, 10);
      });
      $scope.selectedYear = new Date().getFullYear();
      $years['get']().then(function(years) {
            $scope.$parent.years = years;
            $timeout(function() {
                  var $years = $('.select-year');
                  $years.addClass('visible');
                  $years.selectBoxIt();
            }, 10);
            $cycles['getByYear']($scope.selectedYear).then(function(cycles) {
                  $scope.cycles = cycles;
                  if ($scope.cycles.length) {
                        if ($scope.cycles[0].id) {
                              $scope.cycles.unshift({
                                    id: '',
                                    name: 'Todos'
                              });
                        }
                  }
                  $scope.selectedCycle = '';
                  $timeout(function() {
                        var $cycles = $('.select-cycle');
                        $cycles.addClass('visible');
                        $cycles.selectBoxIt();
                  }, 10);
            });
      });
      $scope.changeYear = function() {
            $cycles['getByYear']($scope.selectedYear).then(function(cycles) {
                  $scope.cycles = cycles;
                  if ($('.select-cycle').hasClass('visible')) {
                        var selectBox = $(".select-cycle").data("selectBox-selectBoxIt");
                        $('.select-cycle').removeClass('visible');
                        selectBox.destroy();
                  }
                  if ($scope.cycles.length) {
                        if ($scope.cycles[0].id) {
                              $scope.cycles.unshift({
                                    id: '',
                                    name: 'Todos'
                              });
                        }
                  }
                  $scope.selectedCycle = '';
                  $timeout(function() {
                        var $cycles = $('.select-cycle');
                        $cycles.addClass('visible').selectBoxIt();
                  }, 10);
            });
      }
      $scope.params = {
            year: $scope.selectedYear,
            team: '',
            user: '',
            cycle: ''
      }
      $scope.getList = function() {
            $('button.filter').button('loading');
            if ($('#table').hasClass('dataTable')) {
                  $('#table').DataTable().destroy();
            }
            $assessments['report']($scope.params).then(function(reports) {
                  $scope.reports = reports;
                  $timeout(function() {
                        $('button.filter').button('reset');
                        $('span.pie').each(function(index, el) {
                              $(this).peity("pie");
                        });
                        if (!$('#table').hasClass('dataTable')) {
                              $('table.table').DataTable({
                                    "bDestroy": true,
                                    'paging': false,
                                    'info': false,
                                    'searching': false,
                                    columnDefs: [{
                                          targets: 'no-sort',
                                          orderable: false
                                    }]
                              });
                        }
                  }, 10);
            });
      }
      $scope.getList();
      $scope.filter = function() {
            $scope.params.team = $scope.selectedTeam;
            $scope.params.year = $scope.selectedYear;
            $scope.params.user = $scope.selectedUser;
            $scope.params.cycle = $scope.selectedCycle;
            $scope.getList();
      }
});
elofy.controller('channelsCtrl', function channelCtrl($scope, $timeout, $interval, $channels, $users, linkify, $translate) {
      $scope.channelId = id_channel;
      $scope.messages = [];
      $(document).one('focus.autoExpand', 'textarea.autoExpand', function() {
            var savedValue = this.value;
            this.value = '';
            this.baseScrollHeight = this.scrollHeight;
            this.value = savedValue;
      }).on('input.autoExpand', 'textarea.autoExpand', function() {
            var minRows = this.getAttribute('data-min-rows') | 0,
                  rows;
            this.rows = minRows;
            rows = Math.ceil((this.scrollHeight - this.baseScrollHeight) / 17);
            this.rows = minRows + rows;
      });
      $('#textarea').emojiPicker({
            width: '300px',
            height: '200px',
            button: false
      });
      $scope.toggleEmoji = function() {
            $('#textarea').emojiPicker('toggle');
      }
      $scope.modalImage = function() {
            $('#modal-image').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.fileChange = function() {
            $scope.selectedFile = $('#file').val();
      }
      $scope.closePopup = function() {
            $('.image-dropdown').dropdown('toggle');
      }
      $channels['details']($scope.channelId).then(function(response) {
            $scope.channel = response;
            $scope.messages = $scope.channel.mens;
            $scope.description = linkify.twitter($scope.channel.canal.description);
            $('.channel-scroll').perfectScrollbar({
                  suppressScrollX: true
            });
            $scope.searchMembers = function(selectedMembers) {
                  $scope.filterMembers = selectedMembers;
            }
            $users['get']().then(function(response) {
                  $scope.users = response;
                  $scope.checkId = function(id) {
                        var test = false;
                        for (var i = 0, length = $scope.channel.users.length; i < length; i++) {
                              if (id == $scope.channel.users[i].id) {
                                    test = true;
                              }
                        };
                        return test;
                  }
                  $scope.searchUsers = function(selectedUsers) {
                        $scope.filterUsers = selectedUsers;
                  }
                  $scope.addUser = function(userId) {
                        $channels.addUser($scope.channelId, userId).then(function(users) {
                              $scope.channel.users = users;
                        });
                  }
                  $scope.removeUser = function(userId) {
                        $channels.removeUser($scope.channelId, userId).then(function(users) {
                              $scope.channel.users = users;
                        });
                  }
            });
            $scope.editingTitle = false;
            $scope.editTitle = function() {
                  $scope.editingTitle = true;
            }
            $scope.submitTitle = function() {
                  var newTitle = $('#editTitle').val();
                  if (newTitle) {
                        $scope.editingTitle = false;
                        var data = {
                              id: $scope.channelId,
                              name: newTitle
                        }
                        $channels.edit(data).then(function(channel) {
                              $scope.channel.canal = channel;
                        });
                  }
            }
            var descriptionEditor = false;
            $scope.editingDescription = false;
            $scope.editDescription = function() {
                  $scope.editingDescription = true;
            }
            $scope.submitDescription = function() {
                  var newDescription = $('#newDescription').val();
                  if (newDescription) {
                        $scope.editingDescription = false;
                        var data = {
                              id: $scope.channelId,
                              description: newDescription
                        }
                        $channels.edit(data).then(function(channel) {
                              $scope.channel.canal = channel;
                              $scope.description = linkify.twitter($scope.channel.canal.description);
                        });
                  }
            }
      });
      $scope.newMessage = function() {
            var message = $('#textarea').val();
            if (message) {
                  $('#nova-mensagem .salvar').button('loading');
                  var fileInput = $('#file'),
                        files = fileInput[0].files;
                  var data = {
                        id: $scope.channelId,
                        mens: message,
                        idMens: $scope.channel.mens.length ? $scope.channel.mens[$scope.channel.mens.length - 1].id : 0,
                        file: files ? files[0] : ''
                  }
                  $scope.form = new FormData();
                  $.each(data, function(key, value) {
                        $scope.form.append(key, value);
                  });
                  $channels.send($scope.form).then(function(messages) {
                        $('#nova-mensagem .salvar').button('reset');
                        $('#nova-mensagem')[0].reset();
                        $scope.selectedFile = false;
                        $.each(messages, function(index, value) {
                              if (!$scope.test(value.id)) {
                                    $scope.messages.push(value);
                              }
                        });
                  });
            } else {
                  $('#textarea').addClass('error');
                  $timeout(function() {
                        $('#textarea').removeClass('error');
                  }, 1600);
            }
      }
      $scope.glued = true;
      $scope.busy = false;
      $scope.scrollToTop = function() {
            if (!$scope.busy) {
                  $scope.busy = true;
                  var data = {
                        id: $scope.channelId,
                        reference_id: $scope.messages[0].id,
                        direction: 'asc',
                        qnt: 10
                  }
                  $channels.pagination(data).then(function(messages) {
                        $scope.busy = false;
                        var container = $('.channel-scroll'),
                              scrollTo = $('#message' + data.reference_id);
                        if (messages.length) {
                              for (var i = messages.length - 1; i >= 0; i--) {
                                    if (!$scope.test(messages[i].id)) {
                                          $scope.messages.unshift(messages[i]);
                                    }
                              };
                        }
                        $timeout(function() {
                              container.scrollTop(scrollTo.offset().top - container.offset().top + container.scrollTop());
                        }, 10);
                  });
            }
      };
      $interval(function() {
            if ($scope.messages.length) {
                  var data = {
                        id: $scope.channelId,
                        reference_id: $scope.messages[$scope.messages.length - 1].id,
                        direction: 'desc',
                        qnt: 100
                  }
                  $channels.pagination(data).then(function(messages) {
                        if (messages.length) {
                              $.each(messages, function(index, value) {
                                    if (!$scope.test(value.id)) {
                                          $scope.messages.push(value);
                                    }
                              });
                        }
                  });
            }
      }, 5000);
      $scope.test = function(id) {
            for (var i = 0, leng = $scope.messages.length; i < 0; i++) {
                  if ($scope.messages[i].id == id) {
                        return true;
                  }
            };
            return false;
      }
});
elofy.controller('questionariosCtrl', function($scope, $questionarios, $users, $translate, $timeout, $categories) {
      $scope.activetab = 1;
      $scope.selectedQuestionario = null;
      $users['me']().then(function(response) {
            $scope.me = response;
            $questionarios['get']($scope.me.empresa.id_empresa).then(function(response) {
                  $scope.questionarios = response;
            });
      });
      $scope.listQuestionarios = function() {
            $scope.activetab = 1;
      }
      $scope.editQuestionario = function(questionario) {
            $('.categoty_choose').select2('destroy');
            $categories['getAll']().then(function(res) {
                  $scope.categories = res;
                  $timeout(function() {
                        $('.categoty_choose').select2();
                  }, 200);
            });
            if (questionario == null) {
                  questionario = {};
                  $scope.activetab = 2;
            } else {
                  $questionarios['getQuestionsFromQuestionaryId'](questionario.id).then(function(response) {
                        if (response.error) toastr.error(response.error_message);
                        questionario.questions = response;
                        $.each(questionario.questions, function(index, value) {
                              value['type'] = $scope.returnFrontQuestionTypeByDBQuestionType(value['tipo'], $scope.areAnswersYesAndNo(value));
                              value['pergunta_mandatory'] = (value['pergunta_mandatory'] == 'true') ? true : false;
                        });
                        $scope.activetab = 2;
                  });
            }
            if (questionario.questions == null) {
                  questionario.questions = [];
            }
            $scope.selectedQuestionario = questionario;
            // setasr o quetions para recever os dados extras da listagem do questionÃ¡rio
      }
      $scope.removeQuestionario = function(questionario, questionarios, askBefore = true) {
            if (askBefore && !confirm("Tem certeza de que gostaria de remover?")) return;
            $questionarios['remove'](questionario.id).then(function(response) {
                  if (response.error) toastr.error(response.error_message);
                  else toastr.success('Questionário removido com sucesso!');
                  $questionarios['get']($scope.me.empresa.id_empresa).then(function(response) {
                        $scope.questionarios = response;
                  });
            });
      }
      $scope.newCategory = function() {
            $('#add-category').modal('show', {
                  backdrop: 'static'
            });
      }
      $('#new-category').validate({
            //ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .times-edit',
            rules: {
                  category_name: 'required',
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            invalidHandler: function() {
                  $('.error-message').removeClass('hide');
            },
            submitHandler: function(form) {
                  //data teste
                  var data = {
                        name: $('#new-category #category_name').val()
                  };
                  $('.error-message').addClass('hide');
                  $('#new-category .salvar').button('loading');
                  $categories['insert'](data).then(function(response) {
                        toastr.success("Categoria adicionada com sucesso!");
                        $categories['getAll']().then(function(res) {
                              $scope.categories = res;
                        });
                        $('#new-category')[0].reset();
                        $('#new-category .salvar').button('reset');
                        $('#add-category').modal('hide');
                  });
            }
      });
      $scope.addQuestion = function(type) {
            $('.categoty_choose').select2('destroy');
            $categories['getAll']().then(function(res) {
                  $scope.categories = res;
                  $timeout(function() {
                        $('.categoty_choose').select2();
                  }, 200);
            });
            var question = {};
            // type is used for the template no ng-template
            question.type = type;
            question.ativo = 1;
            question.respostas = [];
            if (type == "objetiva_yesno") {
                  question.respostas.push({
                        'texto': 'Sim',
                        'percentual': 100
                  });
                  question.respostas.push({
                        'texto': 'NÃ£o',
                        'percentual': 0
                  });
            }
            $scope.addAnswer(question);
            $scope.selectedQuestionario.questions.push(question);
      }
      $scope.addAnswer = function(question) {
            var answer = {};
            answer.percentual = "Peso percentual";
            answer.texto = "Texto da resposta";
            answer.ativo = 1;
            if (!question.respostas) question.respostas = [];
            else if (question.respostas.length == 0) question.respostas = [];
            // somente adiciono a primeira resposta se Ã© multipla escolha, para facilitar UX
            if (question.type == "multiplaescolha") question.respostas.push(answer);
      }
      $scope.addAnswerAppraisal = function(question) {
            var answer = {};
            answer.percentual = "Peso percentual";
            answer.texto = "Texto da resposta";
            answer.ativo = 1;
            if (!question.respostas) question.respostas = [];
            else if (question.respostas.length == 0) question.respostas = [];
            // somente adiciono a primeira resposta se Ã© multipla escolha, para facilitar UX
            if (question.type == "multiplaescolhaAppraisal") question.respostas.push(answer);
      }
      $scope.returnTemplate = function(type) {
            switch (type) {
                  case "rating_estrela":
                  case "rating_coracao":
                  case "rating_emoji":
                  case "rating_nps":
                        return 'rating';
                  case "escala_favora":
                        return 'escala_favora';
                  default:
                        return type;
            }
      }
      $scope.changeRatingType = function(question) {
            switch (question.type) {
                  case "rating_estrela":
                        question.tipo = 'e';
                        break;
                  case "rating_coracao":
                        question.tipo = 'c';
                        break;
                  case "rating_emoji":
                        question.tipo = 'i';
                        break;
                  case "rating_nps":
                        question.tipo = 'n';
                        break;
            }
      }
      $scope.areAnswersYesAndNo = function(question) {
            if (!question.respostas || question.respostas.length != 2) return false;
            if (((question.respostas[0].texto != 'Sim' && question.respostas[0].texto != 'NÃƒÂ£o') || (question.respostas[0].percentual != '0' && question.respostas[0].percentual != '100')) || ((question.respostas[1].texto != 'Sim' && question.respostas[1].texto != 'NÃƒÂ£o') || (question.respostas[1].percentual != '0' && question.respostas[1].percentual != '100'))) return false;
            else return true;
      }
      $scope.returnFrontQuestionTypeByDBQuestionType = function(dbType, hasDbAnswer = false) {
            switch (dbType) {
                  case 'o':
                        if (hasDbAnswer) return 'objetiva_yesno';
                        else return 'multiplaescolha';
                  case 'q':
                        return 'qualitativa';
                  case 'a':
                        return 'multiplaescolhaAppraisal';
                  case 'e':
                        return 'rating_estrela';
                  case 'c':
                        return 'rating_coracao';
                  case 'i':
                        return 'rating_emoji';
                  case 'b':
                        return 'development';
                  case 'f':
                        return 'escala_favora';
                  case 'g':
                        return 'escala_evolucao';
                  case 'n':
                        return 'rating_nps';
                  case 't':
                        return 'competencia';
            }
      }
      $scope.removeQuestion = function(index, question, questionary, askBefore = true) {
            if (askBefore && !confirm("Tem certeza de que gostaria de remover?")) return;
            questionary.questions.splice(index, 1);
            if (question.id_pergunta) {
                  $questionarios['removeQuestion'](question, questionary).then(function(response) {
                        if (response.error) toastr.error(response.error_message);
                        else toastr.success('Pergunta removida com sucesso!');
                  });
            } else {
                  toastr.success('Pergunta removida com sucesso!');
            }
      }
      $scope.removeAnswer = function(index, answer, answers) {
            answer['ativo'] = 0;
            //answers.splice(index, 1);
      }
      $scope.onKeyDown = function($event, answer) {
            if ($event.keyCode == 13) {
                  $event.preventDefault();
                  $($event.currentTarget).blur();
            }
            if ($($event.currentTarget).hasClass("answer-text")) {
                  if (answer.texto == "Texto da resposta") answer.texto = "";
            } else if ($($event.currentTarget).hasClass("answer-percentage")) {
                  if (($event.shiftKey || ($event.keyCode < 48 || $event.keyCode > 57)) && ($event.keyCode < 96 || $event.keyCode > 105) && $event.keyCode != 8) {
                        $event.preventDefault();
                  }
                  if (answer.percentual == "Peso percentual") answer.percentual = "";
            }
            $($event.currentTarget).addClass("changed");
      }
      $scope.onBlurAnswer = function($event, answer) {
            if ($($event.currentTarget).hasClass("answer-text")) {
                  if (answer.texto == "") answer.texto = "Texto da resposta";
            } else if ($($event.currentTarget).hasClass("answer-percentage")) {
                  if (answer.percentual == "") answer.percentual = "Peso percentual";
            }
            $($event.currentTarget).removeClass('changed');
      }
      $scope.onFocusAnswer = function($event, answer) {
            $($event.currentTarget).addClass('changed');
      }
      $scope.refreshQuestionaries = function() {
            $questionarios['get']($scope.me.empresa.id_empresa).then(function(response) {
                  $scope.questionarios = response;
                  $scope.activetab = 1;
            });
      }
      //validando
      $('#form-questionario').validate({
            //ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .times-edit',
            rules: {
                  nome_questionario: 'required',
                  tipo_questionario: 'required',
                  ativo: 'required',
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            invalidHandler: function() {
                  $('.error-message').removeClass('hide');
            },
            submitHandler: function(form) {
                  //data teste
                  var data = {
                        id_questionarios: $scope.selectedQuestionario.id,
                        nome_questionario: $scope.selectedQuestionario.name,
                        tipo_questionario: $scope.selectedQuestionario.tipo_questionario,
                        ativo: $scope.selectedQuestionario.ativo,
                  };
                  $('.error-message').addClass('hide');
                  var flag = true;
                  angular.forEach($scope.selectedQuestionario.questions, function(item, key) {
                        if (flag) {
                              if (!item.perguntacat) {
                                    alert("Category field is required!");
                                    flag = false;
                                    return;
                              }
                              if (!item.pergunta_order) {
                                    alert("Order field is required!");
                                    flag = false;
                                    return;
                              }
                              if (!parseInt(item.pergunta_order)) {
                                    alert("Order field must be number!");
                                    flag = false;
                                    return;
                              }
                        }
                  });
                  if (!flag) return;
                  $('#form-questionario .salvar').button('loading');
                  $questionarios['insert'](data).then(function(response) {
                        data.id_questionarios = response.added_object_id;
                        if ($scope.selectedQuestionario.questions.length > 0) {
                              if (response.error == false && response.exist_error_message == '') {
                                    toastr.success("Questionário salvo com sucesso!");
                              }
                              $questionarios['addQuestionToQuestionary']($scope.selectedQuestionario.questions, data).then(function(response) {
                                    $scope.refreshQuestionaries();
                                    if (response.exist_error_message == '') {
                                          toastr.success("Questionário salvo com sucesso!");
                                    }
                              });
                        } else {
                              $scope.refreshQuestionaries();
                              if (response.exist_error_message == '') {
                                    toastr.success("Questionário salvo com sucesso!");
                              }
                        }
                        if (response.exist_error_message != '') {
                              toastr.error(response.exist_error_message);
                        }
                        // $('#form-questionario')[0].reset();
                        $('#form-questionario .salvar').button('reset');
                  });
            }
      });
});
elofy.directive('execOnScrollToTop', function() {
      return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                  var fn = scope.$eval(attrs.execOnScrollToTop);
                  element.on('scroll', function(e) {
                        if (!e.target.scrollTop) {
                              scope.$apply(fn);
                        }
                  });
            }
      };
}).directive('stringToNumber', function() {
      return {
            require: 'ngModel',
            link: function(scope, element, attrs, ngModel) {
                  ngModel.$parsers.push(function(value) {
                        return '' + value;
                  });
                  ngModel.$formatters.push(function(value) {
                        return parseFloat(value);
                  });
            }
      };
}).directive('onScrollToBottom', function($document, $window) {
      //This function will fire an event when the container/document is scrolled to the bottom of the page
      return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                  $($window).on("scroll", function() {
                        var scrollHeight = $($document).height();
                        var scrollPosition = $($window).height() + $($window).scrollTop();
                        if ((scrollHeight - scrollPosition) / scrollHeight < 0.001) {
                              // when scroll to bottom of the page
                              scope.$apply(attrs.onScrollToBottom);
                        }
                  });
            }
      };
}).directive('starRating', function() {
      return {
            restrict: 'A',
            // require: 'ngModel',
            // replace: true,
            template: function(elem, attrs) {
                  //   var charcode = '\u2605';
                  var charcode = '';
                  var min = (attrs.min) ? attrs.min : 0;
                  if (attrs.ratingType == "heart") charcode = '\u2764';
                  if (attrs.ratingType == "nps") charcode = '<div class="nps" style="display: inline-block; border: solid 1px #1db2f5;   width: 31px;    font-size: 16px;    padding: 0px;    -webkit-text-stroke-width: 0px;    line-height: 29px;     position: relative;    top: -3px;">{{$index + min}}</div>';
                  if (attrs.ratingType == "emoji") {
                        if (attrs.max == 4) {
                              charcode = '<img ng-if="$index == 0" class="emoji" style="width: 32px; height:32px;" src="' + baseurl + '/assets/portal/img/emojis/unhappy.png"/>' + '<img ng-if="$index == 1" class="emoji" style="width: 32px; height:32px;" src="' + baseurl + '/assets/portal/img/emojis/sad.png"/>' + '<img ng-if="$index == 2" class="emoji" style="width: 32px; height:32px;" src="' + baseurl + '/assets/portal/img/emojis/confused.png"/>' + '<img ng-if="$index == 3" class="emoji" style="width: 32px; height:32px;" src="' + baseurl + '/assets/portal/img/emojis/happy.png"/>' + '<img ng-if="$index == 4" class="emoji" style="width: 32px; height:32px;" src="' + baseurl + '/assets/portal/img/emojis/in-love2.png"/>';
                        } else if (attrs.max == 2) {
                              charcode = '<img ng-if="$index == 0" class="emoji" style="width: 32px; height:32px;" src="' + baseurl + '/assets/portal/img/emojis/unhappy.png"/>' + '<img ng-if="$index == 1" class="emoji" style="width: 32px; height:32px;" src="' + baseurl + '/assets/portal/img/emojis/confused.png"/>' + '<img ng-if="$index == 2" class="emoji" style="width: 32px; height:32px;" src="' + baseurl + '/assets/portal/img/emojis/in-love2.png"/>';
                        } else charcode = 'rate-max só pode ser 2 ou 4';
                  }
                  var stylenps = (attrs.ratingType != "nps") ? "margin-right:25px;" : "margin-right:-2px;";
                  var html = '<ul class="rating"> <li style="width:32px; height:32px; ' + stylenps + '" ng-repeat="star in stars" ng-class="star" ng-click="toggle($index)">' + charcode + '</li></ul>';
                  return html;
            },
            scope: {
                  ratingValue: '=',
                  max: '=',
                  min: '=',
                  ratingEnabled: '=',
                  onRatingSelected: '&'
            },
            link: function(scope, elem, attrs, ngModelCtrl) {
                  var min = 0;
                  if (scope.min && scope.min > 0) min = scope.min;
                  var updateStars = function(is_first) {
                        scope.stars = [];
                        // console.log("entendendo :", scope.min, min);
                        for (var i = min; i <= scope.max; i++) {
                              // console.log("loop", i, min);
                              if (is_first) {
                                    scope.stars.push({
                                          filled: false,
                                    });
                              } else {
                                    scope.stars.push({
                                          filled: (attrs.ratingType != "emoji" && attrs.ratingType != "nps") ? (i <= scope.ratingValue.value) : i == scope.ratingValue.value,
                                    });
                              }
                        }
                  };
                  scope.toggle = function(index) {
                        if (!scope.ratingEnabled && typeof scope.ratingEnabled !== 'undefined') return;
                        scope.ratingValue.value = index + min;
                        scope.onRatingSelected({
                              rating: index + min
                        });
                  };
                  scope.$watch('ratingValue', function(newVal, oldVal) {
                        var is_first = (newVal.value == oldVal.value);
                        if (newVal) {
                              // ngModelCtrl.$setViewValue({ unit: scope.ratingValue});
                              updateStars(is_first);
                        }
                  }, true);
                  // ngModelCtrl.$render = function() {
                  //       scope.ratingValue = ngModelCtrl.$viewValue.ratingValue;
                  //   };
            }
      };
}).
directive('ngEnter', function() {
      return function(scope, element, attrs) {
            element.bind("keydown", function(e) {
                  if (e.which === 13) {
                        scope.$apply(function() {
                              scope.$eval(attrs.ngEnter, {
                                    'e': e
                              });
                        });
                        e.preventDefault();
                  }
            });
      };
}).
//https://www.npmjs.com/package/angular-hashtagify
directive('hashtagify', ['$timeout', '$compile',
      function($timeout, $compile) {
            return {
                  restrict: 'A',
                  scope: {
                        uClick: '&userClick',
                        tClick: '&termClick'
                  },
                  link: function(scope, element, attrs) {
                        $timeout(function() {
                              var html = element.html();
                              if (html === '') {
                                    return false;
                              }
                              if (attrs.userClick) {
                                    html = html.replace(/(|\s)*@(\w+)/g, '$1<a ng-click="uClick({$event: $event})" class="hashtag">@$2</a>');
                              }
                              if (attrs.termClick) {
                                    html = html.replace(/(^|\s)*#(\w+)/g, '$1<a ng-click="tClick({$event: $event})" class="hashtag">#$2</a>');
                              }
                              element.html(html);
                              $compile(element.contents())(scope);
                        }, 0);
                  }
            };
      }
]).
directive('contenteditable', ['$sce', function($sce) {
      return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
                  if (!ngModel) return; // do nothing if no ng-model
                  // Specify how UI should be updated
                  ngModel.$render = function() {
                        element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
                  };
                  // Listen for change events to enable binding
                  element.on('blur keyup change', function() {
                        scope.$evalAsync(read);
                  });
                  // removi o read inicial pois estava atualizando a model com o valor escrito no html no inÃ­cio, e nÃ£o o contrÃ¡rio
                  //read(); // initialize
                  // Write data to the model
                  function read() {
                        var html = element.html();
                        // When we clear the content editable the browser leaves a <br> behind
                        // If strip-br attribute is provided then we strip this out
                        if (attrs.stripBr && html == '<br>') {
                              html = '';
                        }
                        ngModel.$setViewValue(html);
                  }
            }
      };
}]).directive("owlCarousel", function() {
      return {
            restrict: 'E',
            transclude: false,
            link: function(scope) {
                  scope.initCarousel = function(element) {
                        // provide any default options you want
                        var defaultOptions = {};
                        var customOptions = scope.$eval($(element).attr('data-options'));
                        // combine the two options objects
                        for (var key in customOptions) {
                              defaultOptions[key] = customOptions[key];
                        }
                        // init carousel
                        var curOwl = $(element).hasClass('owl-loaded');
                        if (curOwl) {
                              $(element).data('owl.carousel').destroy();
                              $(element).removeClass('owl.carousel');
                        }
                        $(element).owlCarousel(defaultOptions);
                        scope.cnt++;
                  };
            }
      };
}).directive('owlCarouselItem', [
      function() {
            return {
                  restrict: 'A',
                  transclude: false,
                  link: function(scope, element) {
                        // wait for the last item in the ng-repeat then call init
                        if (scope.$last) {
                              scope.initCarousel(element.parent());
                        }
                  }
            };
      }
]).directive('onComplete', function() {
      return {
            restrict: 'AE',
            link: function(scope, element, attrs) {
                  if (scope.$last) {
                        scope.$eval(attrs.onComplete);
                  }
            }
      }
}).directive('onFinishRender', function($timeout) {
      return {
            restrict: 'A',
            link: function(scope, element, attr) {
                  if (scope.$last === true) {
                        $timeout(function() {
                              scope.$emit('ngRepeatFinished');
                        });
                  }
            }
      }
});
elofy.controller('dashboardCtrl', function globalCtrl($scope, $timeout, $teams, $years, $cycles, $dashboard, $translate) {
      $teams['getAllTeams']().then(function(teams) {
            $scope.teams = teams;
            if ($scope.teams.length) {
                  if ($scope.teams[0].id) {
                        $scope.teams.unshift({
                              id: '',
                              name: 'Todos'
                        });
                  }
            }
            $scope.selectedTeam = '';
            $timeout(function() {
                  var $teams = $('.select-teams');
                  $teams.addClass('visible');
                  $teams.selectBoxIt();
            }, 10);
      });
      $scope.selectedYear = new Date().getFullYear();
      $years['get']().then(function(years) {
            $scope.$parent.years = years;
            $timeout(function() {
                  var $years = $('.select-year');
                  $years.addClass('visible');
                  $years.selectBoxIt();
            }, 10);
            $cycles['getByYear']($scope.selectedYear).then(function(cycles) {
                  $scope.cycles = cycles;
                  if ($scope.cycles.length) {
                        if ($scope.cycles[0].id) {
                              $scope.cycles.unshift({
                                    id: '',
                                    name: 'Todos'
                              });
                        }
                  }
                  $scope.selectedCycle = '';
                  $timeout(function() {
                        var $cycles = $('.select-cycle');
                        $cycles.addClass('visible');
                        $cycles.selectBoxIt();
                  }, 10);
            });
      });
      $scope.changeYear = function() {
            $cycles['getByYear']($scope.selectedYear).then(function(cycles) {
                  $scope.cycles = cycles;
                  if ($('.select-cycle').hasClass('visible')) {
                        var selectBox = $(".select-cycle").data("selectBox-selectBoxIt");
                        $('.select-cycle').removeClass('visible');
                        selectBox.destroy();
                  }
                  if ($scope.cycles.length) {
                        if ($scope.cycles[0].id) {
                              $scope.cycles.unshift({
                                    id: '',
                                    name: 'Todos'
                              });
                        }
                  }
                  $scope.selectedCycle = '';
                  $timeout(function() {
                        var $cycles = $('.select-cycle');
                        $cycles.addClass('visible').selectBoxIt();
                  }, 10);
            });
      }
      $dashboard['get']({
            team: $scope.selectedTeam,
            year: $scope.selectedYear,
            cycle: $scope.selectedCycle
      }).then(function(dash) {
            $scope.dash = dash;
            $scope.dash.pd_level = dash.PDLevelGraph;
            $scope.dash.userperformanceReview = dash.userperformanceReview;
            $scope.dash.geralGraph = dash.geralGraph;
            $timeout(function() {
                  $scope.initDash();
            }, 10);
            $timeout(function() {
                  $scope.updateDash();
            }, 1000);
      });
      $scope.filter = function() {
            $('#ash-header .filter').button('loading');
            $dashboard['get']({
                  team: $scope.selectedTeam,
                  year: $scope.selectedYear,
                  cycle: $scope.selectedCycle
            }).then(function(dash) {
                  $scope.dash = dash;
                  $scope.dash.pd_level = dash.PDLevelGraph;
                  $scope.dash.userperformanceReview = dash.userperformanceReview;
                  $scope.dash.geralGraph = dash.geralGraph;
                  $('#ash-header .filter').button('reset');
                  $scope.updateDash();
            });
      }
      var chartBar,
            chartPie,
            chartBarVertical,
            PerformanceChart,
            chartArea;
      $scope.initDash = function() {
            // performance review chart start //
            PerformanceChart = c3.generate({
                  bindto: '#performance_bar_chart',
                  data: {
                        x: 'x',
                        columns: $scope.dash.pd_level,
                        type: 'bar',
                  },
                  bar: {
                        width: {
                              ratio: 0.1
                        }
                  }
            });
            // performance review chart end here //
            // geral pie chart start here //
            var chart = c3.generate({
                  bindto: '#geral_pie_chart',
                  data: {
                        columns: $scope.dash.geralGraph,
                        type: 'donut',
                  },
                  donut: {
                        title: "Rating"
                  }
            });
            var fakeBar = ['Quantidade'];
            for (var i = 0, len = $scope.dash.barchart.quantidade.length; i < len - 1; i++) {
                  fakeBar.push(0);
            };
            chartBar = c3.generate({
                  bindto: '#chart-bar',
                  data: {
                        x: $scope.dash.barchart.name[0],
                        columns: [
                              $scope.dash.barchart.name,
                              fakeBar
                        ],
                        type: 'bar',
                        colors: {
                              Quantidade: '#3fb9ea'
                        }
                  },
                  transition: {
                        duration: 1000
                  },
                  axis: {
                        x: {
                              type: 'category'
                        }
                  },
                  bar: {
                        width: {
                              ratio: 0.5
                        }
                  },
                  legend: {
                        show: false
                  }
            });
            var fakePie = [];
            for (var i = 0, len = $scope.dash.donut.length; i < len; i++) {
                  var array = [$scope.dash.donut[i][0], 0]
                  fakePie.push(array);
            };
            chartPie = c3.generate({
                  bindto: '#chart-pie',
                  size: {
                        height: 270,
                        width: 270
                  },
                  data: {
                        columns: fakePie,
                        type: 'donut'
                  },
                  color: {
                        pattern: ['#ff6264', '#5bc19a', '#d13c3e', '#ffaaab']
                  },
                  donut: {
                        title: "OKRs Finalizados",
                        width: 35,
                        label: {
                              show: false
                        }
                  },
                  transition: {
                        duration: 1000
                  },
                  legend: {
                        show: false
                  }
            });
            var fakeBarVertical = ['Porcentagem'];
            for (var i = 0, len = $scope.dash.barchartvertical.porcentagem.length; i < len - 1; i++) {
                  fakeBarVertical.push(0);
            };
            chartBarVertical = c3.generate({
                  bindto: '#chart-bar-vertical',
                  data: {
                        x: 'Times',
                        columns: [
                              $scope.dash.barchartvertical.times,
                              fakeBarVertical
                        ],
                        type: 'bar',
                        colors: {
                              Porcentagem: '#3fb9ea'
                        }
                  },
                  transition: {
                        duration: 1000
                  },
                  axis: {
                        rotated: true,
                        x: {
                              type: 'category'
                        },
                        y: {
                              tick: {
                                    format: function(y) {
                                          var i = y * 100;
                                          if (i % 10 == 0) {
                                                return i + '%';
                                          } else {
                                                return '';
                                          }
                                    }
                              }
                        }
                  },
                  bar: {
                        width: {
                              ratio: 0.5
                        }
                  },
                  legend: {
                        show: false
                  }
            });
            var fakeArea = ['Quantidade'];
            var categories = $scope.dash.barchartline.ciclo.splice(1, 100);
            for (var i = 0, len = $scope.dash.barchartline.qnt.length; i < len - 1; i++) {
                  fakeArea.push(0);
            };
            chartArea = c3.generate({
                  bindto: '#chart-area',
                  data: {
                        columns: [
                              fakeArea
                        ],
                        colors: {
                              Quantidade: '#b92627'
                        },
                        type: 'spline',
                  },
                  grid: {
                        y: {
                              show: true
                        }
                  },
                  point: {
                        r: 4
                  },
                  transition: {
                        duration: 1000
                  },
                  axis: {
                        x: {
                              label: 'Trimestre',
                              type: 'category',
                              categories: categories
                        },
                        y: {
                              label: 'Quantidade',
                              tick: {
                                    format: d3.format("d")
                              }
                        }
                  },
                  legend: {
                        show: false
                  }
            });
      }
      $scope.updateDash = function() {
            chartBar.load({
                  columns: [
                        $scope.dash.barchart.name,
                        $scope.dash.barchart.quantidade
                  ]
            });
            chartPie.load({
                  columns: $scope.dash.donut
            });
            d3.select('#chart-pie .c3-chart-arcs-title').node().innerHTML = "OKRs Finalizados <tspan tspan x='0' dy='1.2em'>" + $scope.dash.donut[1][1] + "%</tspan>";
            chartBarVertical.load({
                  columns: [
                        $scope.dash.barchartvertical.times,
                        $scope.dash.barchartvertical.porcentagem
                  ]
            });
            chartArea.load({
                  columns: [
                        $scope.dash.barchartline.qnt
                  ]
            });
            PerformanceChart.load({
                  columns: $scope.dash.pd_level
            });
      }
      $('.sidebar-collapse a').click(function() {
            chartBar.resize();
            chartBarVertical.resize();
            chartArea.resize();
      });
});
elofy.controller('feedCtrl', function globalCtrl($scope, $timeout, $feed, $translate) {
      $feed['get']().then(function(response) {
            $scope.feeds = response;
      });
});
elofy.controller('detailsCtrl', function globalCtrl($scope, $routeParams, $window, $timeout, $cycles, $globals, $tatics, $users, $tags, $teams, $sce, $filter, $years, $translate) {
      $scope.id = $routeParams.objectiveId;
      $scope.teams = [];
      $scope.cycles = [];
      $teams['getAllTeams']().then(function(teams) {
            $scope.teams = teams;
      });
      $globals['details']($scope.id).then(function(response) {
            $scope.details = response;
            $users['get']().then(function(response) {
                  $scope.users = response;
                  $(".scroll").each(function() {
                        var self = $(this);
                        self.mCustomScrollbar({
                              theme: "minimal",
                              advanced: {
                                    updateOnBrowserResize: true,
                                    updateOnContentResize: true
                              }
                        });
                  });
                  $scope.checkId = function(id) {
                        var test = false;
                        for (var i = 0, length = $scope.details.users.length; i < length; i++) {
                              if (id == $scope.details.users[i].id) {
                                    test = true;
                              }
                        };
                        return test;
                  }
            });
            $tags['get']().then(function(response) {
                  $scope.tags = response;
                  var tagsNames = new Bloodhound({
                        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                        queryTokenizer: Bloodhound.tokenizers.whitespace,
                        local: $scope.tags
                  });
                  tagsNames.initialize();
                  $('.search-all-tags').typeahead({
                        hint: true,
                        highlight: true,
                        minLength: 1
                  }, {
                        name: 'tagnames',
                        displayKey: 'name',
                        valueKey: 'name',
                        source: tagsNames.ttAdapter()
                  });
            });
            // Details
            $timeout(function() {
                  $('.colorpicker-edit').colorpicker({
                        format: 'hex'
                  });
                  $scope.description = $scope.details.description ? $sce.trustAsHtml($scope.details.description) : $scope.details.description;
            }, 10);
            // Tatics
            if ($scope.details.teamsWithTatics.length) {
                  if ($scope.details.teamsWithTatics[0].id) {
                        $scope.details.teamsWithTatics.unshift({
                              id: '',
                              name: 'Todos'
                        });
                  }
            }
            $scope.selectedTeamModel = '';
            $timeout(function() {
                  var $this = $('.select-teams'),
                        opts = {
                              showFirstOption: attrDefault($this, 'first-option', true),
                              'native': attrDefault($this, 'native', false),
                              defaultText: attrDefault($this, 'text', ''),
                        };
                  $this.addClass('visible');
                  $this.selectBoxIt(opts);
                  var $filtercolor = $('.select-color'),
                        opts = {
                              showFirstOption: attrDefault($filtercolor, 'first-option', true),
                              'native': attrDefault($filtercolor, 'native', false),
                              defaultText: attrDefault($filtercolor, 'text', ''),
                        };
                  $filtercolor.addClass('visible');
                  $filtercolor.selectBoxIt(opts);
                  $('[data-toggle="tooltip"]').tooltip();
            }, 10);
            $cycles['get']($scope.details.id).then(function(response) {
                  $scope.cycles = response;
                  if ($scope.cycles.length) {
                        if ($scope.cycles[0].id) {
                              $scope.cycles.unshift({
                                    id: '',
                                    name: 'Todos'
                              });
                        }
                  }
                  $scope.selectedCycleModel = '';
                  $timeout(function() {
                        var $this = $('.select-cycle'),
                              opts = {
                                    showFirstOption: attrDefault($this, 'first-option', true),
                                    'native': attrDefault($this, 'native', false),
                                    defaultText: attrDefault($this, 'text', ''),
                              };
                        $this.addClass('visible');
                        $this.selectBoxIt(opts);
                  }, 10);
                  var numberObjectives = [];
                  var numberFake = [];
                  for (var i = 0, len = $scope.cycles.length; i < len; i++) {
                        var id = $scope.cycles[i].id,
                              items = $filter('filter')($scope.details.tatics, {
                                    cycles: {
                                          id: id
                                    }
                              });
                        if (i) {
                              numberObjectives.push(items.length);
                              numberFake.push(0);
                        }
                  }
                  numberObjectives.unshift('Objetivos');
                  numberFake.unshift('Objetivos');
                  $scope.chartObjectives = c3.generate({
                        bindto: '#chart-objectives',
                        size: {
                              height: 210,
                              width: 200
                        },
                        data: {
                              columns: [
                                    numberFake
                              ],
                              colors: {
                                    Objetivos: '#000'
                              }
                        },
                        grid: {
                              y: {
                                    show: true
                              }
                        },
                        transition: {
                              duration: 1000
                        },
                        axis: {
                              x: {
                                    label: 'Trimestre',
                                    type: 'category',
                                    categories: ['T1', 'T2', 'T3', 'T4']
                              },
                              y: {
                                    label: 'Quantidade',
                                    tick: {
                                          format: d3.format("d")
                                    }
                              }
                        },
                        legend: {
                              show: false
                        }
                  });
                  $timeout(function() {
                        $scope.chartObjectives.load({
                              columns: [
                                    numberObjectives
                              ]
                        });
                  }, 1000);
            });
            var chartPorcentage = c3.generate({
                  bindto: '#chart-porcentage',
                  size: {
                        height: 210,
                        width: 200
                  },
                  data: {
                        columns: [
                              ['Concluido', 0],
                              ['Faltando', 0],
                        ],
                        type: 'donut',
                        colors: {
                              Concluido: '#3fb9ea',
                              Faltando: '#7a969c'
                        }
                  },
                  transition: {
                        duration: 1000
                  },
                  donut: {
                        title: $scope.details.percentage + '% Concluido',
                        width: 25,
                        label: {
                              show: false
                        }
                  },
                  legend: {
                        show: false
                  }
            });
            $timeout(function() {
                  var faltando = 100 - $scope.details.percentage;
                  if ($scope.details.percentage > 100) {
                        faltando = 0;
                  }
                  chartPorcentage.load({
                        columns: [
                              ['Concluido', $scope.details.percentage],
                              ['Faltando', faltando]
                        ]
                  });
                  d3.select('#chart-porcentage .c3-chart-arcs-title').node().innerHTML = "OKRs Finalizados <tspan tspan x='0' dy='1.2em'>" + $scope.details.percentage + "%</tspan>";
            }, 1000);
            var porcentage = [];
            var fake = [];
            var names = [];
            for (var i = 0, len = $scope.details.teams.length; i < len; i++) {
                  porcentage.push(($scope.details.teams[i].value * 10) / 100);
                  names.push($scope.details.teams[i].name);
                  fake.push(0);
            };
            porcentage.unshift('Participação');
            fake.unshift('Participação');
            names.unshift('x');
            $scope.chartTeams = c3.generate({
                  bindto: '#chart-teams',
                  size: {
                        height: 210,
                        width: 400
                  },
                  data: {
                        x: 'x',
                        columns: [
                              names,
                              fake
                        ],
                        type: 'bar',
                        colors: {
                              'Participação': '#3fb9ea'
                        }
                  },
                  transition: {
                        duration: 1000
                  },
                  axis: {
                        rotated: true,
                        x: {
                              type: 'category'
                        },
                        y: {
                              tick: {
                                    format: function(y) {
                                          var i = y * 100;
                                          if (i % 10 == 0) {
                                                return i + '%';
                                          } else {
                                                return '';
                                          }
                                    }
                              }
                        }
                  },
                  bar: {
                        width: {
                              ratio: 0.5
                        }
                  },
                  legend: {
                        show: false
                  }
            });
            $timeout(function() {
                  $scope.chartTeams.load({
                        columns: [
                              names,
                              porcentage
                        ]
                  });
            }, 1000);
      });
      $scope.return = function() {
            //$window.history.back();
            window.location = document.referrer;
      }
      $scope.newTitle = '';
      $scope.editingTitle = false;
      $scope.editTitle = function() {
            $scope.editingTitle = true;
      }
      $scope.submitTitle = function() {
            var newTitle = $('#editTitle').val();
            if (newTitle) {
                  $scope.editingTitle = false;
                  $globals.edit['title']($scope.details.id, newTitle).then(function(title) {
                        $scope.details.title = title;
                  });
            }
      }
      $scope.editUser = function(userId) {
            $globals.edit['user']($scope.details.id, userId).then(function(user) {
                  $scope.details.user = user;
            });
      }
      $scope.editTeam = function(teamId) {
            $globals.edit['user']($scope.details.id, userId).then(function(user) {
                  $scope.details.user = user;
            });
      }
      $scope.removeResponsible = function(userId) {
            $globals.edit.users['remove']($scope.details.id, userId).then(function(users) {
                  $scope.details.users = users;
            });
      }
      $scope.addResponsible = function(userId) {
            $globals.edit.users['add']($scope.details.id, userId).then(function(users) {
                  $scope.details.users = users;
            });
      }
      $scope.removeTag = function(tagId) {
            $globals.edit.tags['remove']($scope.details.id, tagId).then(function(tags) {
                  $scope.details.tags = tags;
            });
      }
      $scope.submitTag = function() {
            var newTag = $('#newTag').val();
            if (newTag) {
                  $globals.edit.tags['add']($scope.details.id, newTag).then(function(tags) {
                        $scope.details.tags = tags;
                        $('#newTag').val('');
                        $('.addTag.dropdown.open .dropdown-toggle').dropdown('toggle');
                  });
            }
      }
      $(document).on('click', '.dropdown-menu', function(e) {
            e.stopPropagation();
      });
      $scope.submitColor = function() {
            var newColor = $('#newColor').val();
            $('#changeColor button.btn').button('loading');
            $globals.edit['color']($scope.details.id, newColor).then(function(color) {
                  $scope.details.color = color;
                  $('#changeColor button.btn').button('reset');
                  $('#changeColor.dropdown.open .dropdown-toggle').dropdown('toggle');
            });
      }
      $scope.editingDescription = false;
      $scope.editDescription = function() {
            $scope.editingDescription = true;
      }
      $scope.submitDescription = function() {
            var newDescription = $('#newDescription').val();
            $scope.editingDescription = false;
            $globals.edit['description']($scope.details.id, newDescription).then(function(description) {
                  $scope.details.description = description;
                  $scope.description = $sce.trustAsHtml($scope.details.description);
            });
      }
      $scope.check = function(id) {
            var test = $filter('filter')($scope.$parent.user.favorites, id, true);
            if (test) {
                  return test.length;
            } else {
                  return false;
            }
      }
      $scope.favorite = function(id) {
            var test = $filter('filter')($scope.$parent.user.favorites, id, true);
            $globals['favorite'](id, test.length).then(function(favorites) {
                  $scope.$parent.user.favorites = favorites;
            });
      }
      $scope.searchUser = function() {
            $scope.filterUser = $scope.selectedUser;
      }
      $scope.searchResponsibles = function() {
            $scope.filterResponsibles = $scope.selectedResponsibles;
      }
      $scope.search = function() {
            $scope.inputName = $scope.inputNameModel;
            $scope.selectedColorObjective = $scope.selectedColor;
            $scope.selectedTeam = $scope.selectedTeamModel;
            $scope.selectedCycle = $scope.selectedCycleModel;
      }
      $scope.statusText = function(value) {
            var items = ['Pendente', 'Finalizado', 'Cancelado', 'Em andamento'];
            return items[value];
      }
      // Modal Global Edit Teams
      $scope.editTeams = function() {
            $('#edit-teams .select2').select2('destroy');
            $('#edit-teams').modal('show', {
                  backdrop: 'static'
            });
            $teams['getAllTeams']().then(function(response) {
                  $scope.teams = response;
                  $timeout(function() {
                        var $this = $('.select2.times-edit'),
                              button = $('#open-time-edit'),
                              opts = {
                                    allowClear: attrDefault($this, 'allowClear', false)
                              },
                              select = $this.select2(opts);
                        //$this.addClass('visible');
                        button.off();
                        button.on('click', function() {
                              if (button.hasClass('active')) {
                                    select.select2("close");
                                    button.removeClass('active');
                              } else {
                                    select.select2("open");
                                    button.addClass('active');
                              }
                        });
                        $this.on('change', function() {
                              button.removeClass('active');
                              var id = this.value,
                                    search = $filter('filter')($scope.teams, {
                                          id: id
                                    }),
                                    test = $filter('filter')($scope.details.teams, {
                                          id: id
                                    });
                              if (test.length) {
                                    return;
                              }
                              $scope.$apply(function() {
                                    $scope.details.teams.unshift({
                                          id: id,
                                          name: search[0].name,
                                          value: 1
                                    });
                              });
                        });
                  }, 10);
            });
      }
      $scope.numberLessEdit = function($index) {
            var val = $scope.details.teams[$index].value;
            var newVal = val > 1 ? val - 1 : 1;
            $scope.details.teams[$index].value = newVal;
      }
      $scope.numberMoreEdit = function($index) {
            var val = $scope.details.teams[$index].value;
            var newVal = val < 10 ? val + 1 : 10;
            $scope.details.teams[$index].value = newVal;
      }
      $scope.numberRemoveEdit = function($index) {
            $scope.details.teams.splice($index, 1);
      }
      // Validacao Teams
      $('#form-teams').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .colorpicker, .select2-input, .times-edit',
            submitHandler: function(form) {
                  if ($scope.details.teams.length) {
                        var numbers = $('.number-edit'),
                              error = $('.error-sum-edit'),
                              total = 0;
                        numbers.each(function() {
                              var self = $(this),
                                    val = Number(self.val());
                              total = total + val;
                        });
                        if (total != 10) {
                              error.removeClass('hidden');
                              return;
                        } else {
                              error.addClass('hidden');
                        }
                  }
                  $('#edit-teams .salvar').button('loading');
                  $globals.edit['teams']($scope.details.id, $scope.details.teams).then(function(teams) {
                        $scope.details.teams = teams;
                        var porcentage = [];
                        var names = [];
                        for (var i = 0, len = $scope.details.teams.length; i < len; i++) {
                              porcentage.push(($scope.details.teams[i].value * 10) / 100);
                              names.push($scope.details.teams[i].name);
                        };
                        porcentage.unshift('Participação');
                        names.unshift('x');
                        $timeout(function() {
                              $scope.chartTeams.load({
                                    columns: [
                                          names,
                                          porcentage
                                    ]
                              });
                        }, 1000);
                        $('#edit-teams .salvar').button('reset');
                        $('#edit-teams').modal('hide');
                  });
            }
      });
      // Modal New Tatic
      $scope.new = function() {
            $('#new-tatic .select2').select2('destroy');
            $('#new-tatic .multi-select.users').multiSelect('destroy');
            $('#new-tatic .multi-select.cycles').multiSelect('destroy');
            $('#new-tatic .multi-select.cycles').val(0);
            if ($('#new-tatic .input-tags').prev().is('.bootstrap-tagsinput')) {
                  $('#new-tatic .input-tags').tagsinput('destroy');
            }
            $('#new-tatic').modal('show', {
                  backdrop: 'static'
            });
            $scope.newCycles = [];
            for (var i = 0; i < $scope.cycles.length; i++) {
                  if ($scope.cycles[i].id) {
                        $scope.newCycles.push($scope.cycles[i]);
                  }
            };
            $users['get']().then(function(response) {
                  $scope.users = response;
                  $timeout(function() {
                        var $this = $('.select2.usuario'),
                              opts = {
                                    allowClear: attrDefault($this, 'allowClear', false)
                              };
                        $this.select2(opts);
                        $this.addClass('visible');
                        $('.multi-select.users').multiSelect();
                        $('.multi-select.cycles').multiSelect();
                  }, 10);
            });
            $tags['get']().then(function(response) {
                  $scope.$parent.tags = response;
                  $timeout(function() {
                        var tagsNames = new Bloodhound({
                              datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                              queryTokenizer: Bloodhound.tokenizers.whitespace,
                              local: response
                        });
                        tagsNames.initialize();
                        $('.input-tags').tagsinput({
                              typeaheadjs: {
                                    name: 'tagnames',
                                    displayKey: 'name',
                                    valueKey: 'name',
                                    source: tagsNames.ttAdapter()
                              }
                        });
                        $('#form-tatic').on('keyup keypress', function(e) {
                              var keyCode = e.keyCode || e.which;
                              if (keyCode === 13) {
                                    e.preventDefault();
                                    return false;
                              }
                        });
                        $('.input-tags').on('itemAdded', function(event) {
                              var tag = event.item;
                        });
                  }, 10);
            });
            $teams['getAllTeams']().then(function(response) {
                  $scope.teams = response;
                  $timeout(function() {
                        var $this = $('.select2.times'),
                              opts = {
                                    allowClear: attrDefault($this, 'allowClear', false)
                              };
                        $this.select2(opts);
                        $this.addClass('visible');
                  }, 10);
            });
            $scope.newWeight = 1;
            $scope.numberLessNew = function() {
                  var val = $scope.newWeight;
                  var newVal = val > 1 ? val - 1 : 1;
                  $scope.newWeight = newVal;
            }
            $scope.numberMoreNew = function() {
                  var val = $scope.newWeight;
                  var newVal = val < 10 ? val + 1 : 10;
                  $scope.newWeight = newVal;
            }
      }
      $scope.teticoTest = function() {
            $('#new-tatic').modal('show', {
                  backdrop: 'static'
            });
            $('.select2').select2('destroy');
            $('.typeahead').typeahead('destroy');
            $users['get']().then(function(response) {
                  $scope.users = response;
                  $timeout(function() {
                        var $this = $('.select2.usuario'),
                              opts = {
                                    allowClear: attrDefault($this, 'allowClear', false)
                              };
                        $this.select2(opts);
                        $this.addClass('visible');
                        $('.multi-select.users').multiSelect('refresh');
                  }, 10);
            });
            $tags['get']().then(function(response) {
                  $scope.$parent.tags = response;
                  $timeout(function() {
                        var tagsNames = new Bloodhound({
                              datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                              queryTokenizer: Bloodhound.tokenizers.whitespace,
                              local: response
                        });
                        tagsNames.initialize();
                        $('.input-tags').tagsinput({
                              typeaheadjs: {
                                    name: 'tagnames',
                                    displayKey: 'name',
                                    valueKey: 'name',
                                    source: tagsNames.ttAdapter()
                              }
                        });
                        $('#form-goal').on('keyup keypress', function(e) {
                              var keyCode = e.keyCode || e.which;
                              if (keyCode === 13) {
                                    e.preventDefault();
                                    return false;
                              }
                        });
                        $('.input-tags').on('itemAdded', function(event) {
                              var tag = event.item;
                        });
                  }, 10);
            });
            $teams['getAllTeams']().then(function(response) {
                  $scope.teams = response;
                  $timeout(function() {
                        var $this = $('.select2.times'),
                              button = $('#open-time'),
                              opts = {
                                    allowClear: attrDefault($this, 'allowClear', false)
                              },
                              select = $this.select2(opts);
                        //$this.addClass('visible');
                        button.off();
                        button.on('click', function() {
                              if (button.hasClass('active')) {
                                    select.select2("close");
                                    button.removeClass('active');
                              } else {
                                    select.select2("open");
                                    button.addClass('active');
                              }
                        });
                        $this.on('change', function() {
                              button.removeClass('active');
                              var id = this.value,
                                    search = $filter('filter')($scope.teams, {
                                          id: id
                                    }),
                                    test = $filter('filter')($scope.selectedTeams, {
                                          id: id
                                    });
                              if (test.length) {
                                    return;
                              }
                              $scope.$apply(function() {
                                    $scope.selectedTeams.unshift({
                                          id: id,
                                          name: search[0].name,
                                          value: 1
                                    });
                              });
                        });
                  }, 10);
            });
            $scope.numberLess = function($index) {
                  var val = $scope.selectedTeams[$index].value;
                  var newVal = val > 1 ? val - 1 : 1;
                  $scope.selectedTeams[$index].value = newVal;
            }
            $scope.numberMore = function($index) {
                  var val = $scope.selectedTeams[$index].value;
                  var newVal = val < 10 ? val + 1 : 10;
                  $scope.selectedTeams[$index].value = newVal;
            }
            $scope.numberRemove = function($index) {
                  $scope.selectedTeams.splice($index, 1);
            }
      }
      // Validacao Novo
      $('#form-tatic').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .times-edit',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: 'required',
                  time: 'required',
                  peso: 'required',
                  ciclos: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        parent_id: $scope.details.id,
                        name: $('#field-1').val(),
                        description: $('#field-2').val(),
                        user: $('#field-3').val(),
                        team: $('#field-4').val(),
                        weight: $('#field-5').val(),
                        responsibles: $scope.usersModel,
                        tags: $('#field-7').val(),
                        cycles: $scope.cyclesModel
                  }
                  $('#form-tatic .salvar').button('loading');
                  $tatics['insert'](data).then(function(response) {
                        $scope.details.tatics = response.tatics;
                        $scope.details.teamsWithTatics = response.teamsWithTatics;
                        var numberObjectives = [];
                        for (var i = 0, len = $scope.cycles.length; i < len; i++) {
                              var id = $scope.cycles[i].id,
                                    items = $filter('filter')($scope.details.tatics, {
                                          cycles: {
                                                id: id
                                          }
                                    });
                              if (i) {
                                    numberObjectives.push(items.length);
                              }
                        }
                        numberObjectives.unshift('Objetivos');
                        $timeout(function() {
                              $scope.chartObjectives.load({
                                    columns: [
                                          numberObjectives
                                    ]
                              });
                        }, 1000);
                        $('#form-tatic')[0].reset();
                        $('#form-tatic .salvar').button('reset');
                        $('#new-tatic').modal('hide');
                  });
            }
      });
      $scope.direcionadorplanejamento = false;
      $scope.objetivoplanejamento = false;
      $scope.linkTypePlanejamento = function($type) {
            $('select.objetivo-okr-tatic-planejamento').select2({
                  allowClear: true
            }).addClass('visible');
            $("#okr-objectives-planejamento").select2({
                  allowClear: true
            });
            $scope.selectedYear = new Date().getFullYear();
            if ($("#direcionador-planejamento").prop('checked') || $("#objetivo-planejamento").prop('checked')) {
                  if ($type == 1) {
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                        });
                  }
                  if ($type == 2) {
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                        });
                  }
            } else {
                  $("#okr-objectives-planejamento").select2({
                        allowClear: true
                  });
                  $scope.objectives = [];
            }
      }
      // modal novo okr
      $scope.newOkrplanejamento = function() {
            $users['get']().then(function(users) {
                  $scope.users = users;
            });
            $teams['getAllTeams']().then(function(teams) {
                  $scope.teams = teams;
            });
            $years['get']().then(function(years) {
                  $scope.years = years;
            });
            $('#form-okr-planejamento')[0].reset();
            $scope.cyclesOkrPerfil = [];
            $('select.cycles-okr-perfil').select2('destroy');
            $('select.usuario-okr').select2({
                  allowClear: true
            }).addClass('visible');
            $('select.times-okr').select2({
                  allowClear: true
            }).addClass('visible');
            //$scope.currentYearOkr = new Date().getFullYear();
            //$scope.currentYearOkr = $scope.currentYear.toString();
            if ($('select.select-year-ok').hasClass('visible')) {
                  var selectBox = $("select.select-year-ok").data("selectBox-selectBoxIt");
                  $('select.select-year-ok').removeClass('visible');
                  selectBox.destroy();
            }
            $('select.select-year-okr').addClass('visible').selectBoxIt();
            $scope.changeCycleOkrPerfil = function() {
                  $cycles['getByYear']($scope.currentYearOkrPerfil).then(function(response) {
                        $scope.cyclesOkrPerfil = response;
                        $scope.direcionadorperfil = null;
                        $timeout(function() {
                              $('select.cycles-okr-perfil').select2();
                        }, 10);
                  });
            }
            $('#new-okr-planejamento').modal('show', {
                  backdrop: 'static'
            });
      }
      // Validacao Novo Okr
      $('#form-okr-planejamento').validate({
            ignore: [],
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: 'required',
                  time: 'required',
                  clicos: 'required',
                  objetivo: 'required',
                  'link[]': {
                        required: true,
                  }
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        parent_id: $scope.ObjectiveIdPlanejamento,
                        name: $('#okr-name-planejamento').val(),
                        description: $('#okr-description-planejamento').val(),
                        user: $('#okr-user-planejamento').val(),
                        team: $('#okr-team-planejamento').val(),
                        weight: 1,
                        cycles: $scope.cyclesModelOkrPlanejamento
                  }
                  $('#form-okrperfil .salvar').button('loading');
                  $tatics['insert'](data).then(function(response) {
                        toastr.success('Objjetivo salvo com sucesso.');
                        $globals['details']($scope.id).then(function(response) {
                              $scope.details = response;
                        });
                        $('#form-okr-planejamento')[0].reset();
                        $('#new-okr-planejamento').modal('hide');
                        $('#form-okr-planejamento .salvar').button('reset');
                  });
            }
      });
});
elofy.controller('globalCtrl', function globalCtrl($scope, $timeout, $channels, $filter, $location, $globals, $years, $users, $teams, $tags, $tatics, $translate, $mydashboard) {
      $scope.parentobj = {};
      $scope.addgoaltype = false;
      if ($scope.selectedYear) {
            $scope.selectedYear = $scope.selectedYear;
      } else {
            $scope.selectedYear = new Date().getFullYear();
      }
      $scope.DeleteTatic = function(objectivo_id, active) {
            $('#delete-tatic-modal').modal('show', {
                  backdrop: 'static'
            });
            $('#performTask').click(function() {
                  $tatics['deactive_objectivo'](objectivo_id, active).then(function(results) {
                        $globals['get']($scope.selectedYear).then(function(response) {
                              $('#toast-container').html('');
                              toastr.success('Objetivo inativado com sucesso.');
                              $scope.globals = response;
                        });
                        $timeout(function() {
                              $scope.filter_her();
                        }, 300);
                        $('#delete-tatic-modal').modal('hide');
                  });
            });
      }
      $scope.selectedYear = new Date().getFullYear();
      $years['get']().then(function(years) {
            $scope.$parent.years = years;
            $timeout(function() {
                  var $this = $('.select-year'),
                        opts = {
                              showFirstOption: attrDefault($this, 'first-option', true),
                              'native': attrDefault($this, 'native', false),
                              defaultText: attrDefault($this, 'text', '')
                        };
                  $this.addClass('visible');
                  $this.selectBoxIt(opts);
            }, 10);
            $globals['get']($scope.selectedYear).then(function(response) {
                  $scope.$parent.globalsFilter = response;
                  console.log("globals:", response);
                  $scope.updatePercentage();
            });
      });
      // $(".overflow_dv").niceScroll({
      //       autohidemode: false,
      //       cursorcolor: "#3FB9EA"
      // });
      // for mobile

      // tags filtering
      $scope.$parent.$watch('tags', function(newVal, oldVal) {
            if (newVal) {
                  $scope.tagsFilter = JSON.parse(JSON.stringify(newVal));
                  setTimeout(function() {
                        $('#search-tag').select2();
                  }, 400);
            }
      });

      $scope.$parent.$watch('globals', function(newVal, oldVal) {
            if (newVal) {
                  $scope.globalsFilter = JSON.parse(JSON.stringify(newVal));
            }
      });

      $scope.containsGlobalObject = function(global) {
          var i;
          for (i = 0; i < $scope.globalsFilter.length; i++) {
              if ($scope.globalsFilter[i] === global) {
                  return true;
              }
          }

          return false;
      }

      $scope.filterGlobalsWithTags = function() {
            $scope.globalsFilter = [];
            var count = 0;
            angular.forEach($scope.tagsFilter, function(result, key) {
                  if (result.added == true) {
                        count++;
                        angular.forEach($scope.globals, function(global, key1) {
                              angular.forEach(global.tags, function(tag, key2) {
                                    if (tag.id == result.id) {
                                          if (!$scope.containsGlobalObject(global)) 
                                                $scope.globalsFilter.push(global);
                                    }
                              });
                        });
                  }
            });
            if (count == 0) $scope.globalsFilter = JSON.parse(JSON.stringify($scope.globals));
      }

      $scope.onChangeTagSelect = function() {
            angular.forEach($scope.tagsFilter, function(result, key) {
                  if (result['id'] == $('#search-tag').val()) result.added = true;
            });
            $scope.filterGlobalsWithTags();
      }

      $scope.removeTagSelect = function(selected) {
            selected.added = null;
            $('#search-tag').select2('val', '');
            $scope.filterGlobalsWithTags();
      }
      // tags filtering end

      $(".sidebar-collapse").on("click", function() {
            if ($(".page-container").hasClass("sidebar-collapsed")) {
                  $("body").removeClass("main_div");
            } else {
                  $("body").addClass("main_div");
            }
      });
      $(document).ready(function() {
            if ($(".page-container").hasClass("sidebar-collapsed")) {
                  $("body").removeClass("main_div");
            } else {
                  $("body").addClass("main_div");
            }
      });
      $scope.changeYear = function() {
            $globals['get']($scope.selectedYear).then(function(response) {
                  $scope.$parent.globals = response;
                  $scope.updatePercentage();
            });
      }
      $scope.estrategicof = true;
      $scope.direcionadorf = true;
      $scope.bright = function(color) {
            if (!color) {
                  return 'aqua';
            }
            var tiny = tinycolor(color),
                  bright = tiny.getBrightness();
            return bright > 175 ? 'gray' : false;
      }
      $scope.updatePercentage = function() {
            $timeout(function() {
                  $('.tile-progressbar').each(function() {
                        var bar = $(this).find('span'),
                              width = bar.data('fill');
                        bar.css('width', width);
                  });
            }, 500);
      }
      $scope.check = function(id) {
            var test = $filter('filter')($scope.$parent.user.favorites, id, true);
            return test.length;
      }
      $scope.favorite = function(id) {
            var test = $filter('filter')($scope.$parent.user.favorites, id, true);
            $globals['favorite'](id, test.length).then(function(favorites) {
                  $scope.$parent.user.favorites = favorites;
            });
      }
      $scope.onlyFav = false;
      $scope.favorites = function() {
            if ($scope.onlyFav) {
                  $scope.onlyFav = false;
                  $globals['get']($scope.selectedYear).then(function(response) {
                        $scope.$parent.globals = response;
                        $scope.updatePercentage();
                  });
            } else {
                  $scope.onlyFav = true;
                  var test = $scope.$parent.globals.filter(function(o) {
                        return $scope.$parent.user.favorites.some(function(i) {
                              return o.id === i;
                        });
                  });
                  $scope.$parent.globals = test;
            }
      }
      $scope.q = '';
      $scope.search = function() {
            $scope.q = $scope.query;
            
      }
      $scope.buscaTagChips = function() {
            $scope.tagDigitada = $('#campoTag').val();
      }

      // Modal
      $scope.users = [];
      $scope.teams = [];
      $scope.selectedTeams = [];
      $('.colorpicker').colorpicker({
            format: 'hex'
      });
      $scope.new = function() {
            $('#new-goal').modal('show', {
                  backdrop: 'static'
            });
            $('.select2').select2('destroy');
            $('.typeahead').typeahead('destroy');
            $users['get']().then(function(response) {
                  $scope.users = response;
                  $timeout(function() {
                        var $this = $('.select2.usuario'),
                              opts = {
                                    allowClear: attrDefault($this, 'allowClear', false)
                              };
                        $this.select2(opts);
                        $this.addClass('visible');
                        $('.multi-select.users').multiSelect('refresh');
                  }, 10);
            });
            $tags['get']().then(function(response) {
                  $scope.$parent.tags = response;
                  $timeout(function() {
                        var tagsNames = new Bloodhound({
                              datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                              queryTokenizer: Bloodhound.tokenizers.whitespace,
                              local: response
                        });
                        tagsNames.initialize();
                        $('.input-tags').tagsinput({
                              typeaheadjs: {
                                    name: 'tagnames',
                                    displayKey: 'name',
                                    valueKey: 'name',
                                    source: tagsNames.ttAdapter()
                              }
                        });
                        $('#form-goal').on('keyup keypress', function(e) {
                              var keyCode = e.keyCode || e.which;
                              if (keyCode === 13) {
                                    e.preventDefault();
                                    return false;
                              }
                        });
                        $('.input-tags').on('itemAdded', function(event) {
                              var tag = event.item;
                        });
                  }, 10);
            });
            $teams['getAllTeams']().then(function(response) {
                  $scope.teams = response;
                  $timeout(function() {
                        var $this = $('.select2.times'),
                              button = $('#open-time'),
                              opts = {
                                    allowClear: attrDefault($this, 'allowClear', false)
                              },
                              select = $this.select2(opts);
                        //$this.addClass('visible');
                        button.off();
                        button.on('click', function() {
                              if (button.hasClass('active')) {
                                    select.select2("close");
                                    button.removeClass('active');
                              } else {
                                    select.select2("open");
                                    button.addClass('active');
                                    $('#select2-drop').css('display', 'none');
                              }
                        });
                        $this.on('change', function() {
                              button.removeClass('active');
                              var id = this.value,
                                    search = $filter('filter')($scope.teams, {
                                          id: id
                                    }),
                                    test = $filter('filter')($scope.selectedTeams, {
                                          id: id
                                    });
                              if (test.length) {
                                    return;
                              }
                              $scope.$apply(function() {
                                    $scope.selectedTeams.unshift({
                                          id: id,
                                          name: search[0].name,
                                          value: 1
                                    });
                              });
                        });
                  }, 10);
            });
            $scope.numberLess = function($index) {
                  var val = $scope.selectedTeams[$index].value;
                  var newVal = val > 1 ? val - 1 : 1;
                  $scope.selectedTeams[$index].value = newVal;
            }
            $scope.numberMore = function($index) {
                  var val = $scope.selectedTeams[$index].value;
                  var newVal = val < 10 ? val + 1 : 10;
                  $scope.selectedTeams[$index].value = newVal;
            }
            $scope.numberRemove = function($index) {
                  $scope.selectedTeams.splice($index, 1);
            }
      }
      // Validacao Novo
      $('#form-goal').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        year: $scope.selectedYear,
                        name: $('#field-1').val(),
                        description: $('#field-2').val(),
                        user: $('#field-3').val(),
                        responsibles: $scope.responsibles,
                        tags: $('#field-6').val(),
                        teams: $scope.selectedTeams
                  }
                  if ($scope.selectedTeams.length) {
                        var numbers = $('.number'),
                              error = $('.error-sum'),
                              total = 0;
                        numbers.each(function() {
                              var self = $(this),
                                    val = Number(self.val());
                              total = total + val;
                        });
                        if (total != 10) {
                              error.removeClass('hidden');
                              return;
                        } else {
                              error.addClass('hidden');
                        }
                  }
                  $('#form-goal .salvar').button('loading');
                  $globals['insert'](data).then(function(response) {
                        $globals['get']($scope.selectedYear).then(function(response) {
                              $scope.$parent.globals = response;
                              $scope.updatePercentage();
                              $channels['get']().then(function(channels) {
                                    $scope.$parent.channels = channels;
                              });
                              $('#form-goal')[0].reset();
                              $('.input-tags').tagsinput('removeAll');
                              $('#form-goal .salvar').button('reset');
                              $scope.selectedTeams = [];
                              $('#new-goal').modal('hide');
                        });
                  });
            }
      });

      $globals['getGlobalsCycles']().then(function(response) {
            $scope.fcycles = response;
      });

      $scope.filteredList = [];
      $scope.getModalData = function() {
            if ($scope.selectedItem != null) {
                  var keepGoing = true;
                  angular.forEach($scope.$parent.globals, function(item, kk) {
                        if (keepGoing) {
                              if (item.id == $scope.selectedItem.id) {
                                    $scope.selectedItem = item;
                                    keepGoing = false;
                              }
                        }
                  });
                  $scope.detailTitle = $scope.selectedItem.title.substr(0,86);
                  $scope.detailList = [];
                  if ($scope.selectedItem.tatics.length) {
                        angular.forEach($scope.selectedItem.tatics, function(result, key) {
                              var keys = [];
                              angular.forEach($scope.selectedItem.keys, function(result1, key1) {
                                    if (result.id == result1.id_objetivo) {
                                          result1.editing = false;
                                          if (result1.pattern == 0) {
                                                result1.medicaoFormatted = formatPercent(result1.Medicao);
                                                result1.metaFormatted = formatPercent(result1.Meta);
                                          } else {
                                                result1.medicaoFormatted = formatPattern(result1.Medicao, result1.pattern);
                                                result1.metaFormatted = formatPattern(result1.Meta, result1.pattern);
                                          }
                                          keys.push(result1);
                                    }
                              });
                              result.keyresults = keys;
                              $scope.detailList.push(result);
                        });
                  } else {
                        var keys = [];
                        angular.forEach($scope.selectedItem.keys, function(result1, key1) {
                              result1.editing = false;
                              if (result1.pattern == 0) {
                                    result1.medicaoFormatted = formatPercent(result1.Medicao);
                                    result1.metaFormatted = formatPercent(result1.Meta);
                              } else {
                                    result1.medicaoFormatted = formatPattern(result1.Medicao, result1.pattern);
                                    result1.metaFormatted = formatPattern(result1.Meta, result1.pattern);
                              }
                              keys.push(result1);
                        });
                        var data = {
                              active: 1,
                              authorised: $scope.selectedItem.authorised,
                              cycles: null,
                              id: $scope.selectedItem.id,
                              keys: $scope.selectedItem.rkeys,
                              parent_id: null,
                              percentage: $scope.selectedItem.percentage,
                              responsavel: $scope.selectedItem.responsavel,
                              status: null,
                              team: null,
                              title: $scope.selectedItem.title,
                              user: $scope.selectedItem.user,
                              weight: null
                        };
                        data.keyresults = keys;
                        $scope.detailList.push(data);
                  }
            }
      }
      $scope.selectCurrentCycle = function() {
            var curDate = new Date();
            angular.forEach($scope.fcycles, function(result, key) {
                  if (new Date(result.inicio_vigencia) < curDate && new Date(result.fim_vigencia) > curDate) {
                        $('#detail-keys #selectedCiclo').val(result.id_ciclo);
                  } 
            });
      }
      $scope.filterDetailListWithCycle = function() {
            var selectedCycle = $('#detail-keys #selectedCiclo').val();
            $scope.filteredList.length = 0;
            var tempList = [];
            angular.forEach($scope.detailList, function(result, key) {
                  var keepGoing = true;
                  angular.forEach(result.cycles, function(cycle, key1) {
                        if (keepGoing) {
                              if (cycle.id == selectedCycle) {
                                    tempList.push(result);
                                    keepGoing = false;
                              }
                        }
                  });
            });
            $timeout(function() {
                  $scope.filteredList = tempList;
                  console.log("filtered list:", $scope.filteredList);
            }, 100);
      }
      $('#detail-keys #selectedCiclo').change(function(event) {
            $scope.filterDetailListWithCycle();
      });
      $scope.key_details = function(item) {
            $scope.selectedItem = item;
            $scope.getModalData();
            console.log("detail list:", $scope.detailList );
            if (!$scope.detailList.length) { return; }
            var $user = $('#detail-keys #selectedCiclo'),
                  opts = {
                        allowClear: attrDefault($user, 'allowClear', false)
                  };
            $('#detail-keys #selectedCiclo').select2('destroy');
            $scope.selectCurrentCycle();
            $user.select2(opts);
            $user.addClass('visible');
            $scope.filterDetailListWithCycle();
            $timeout(function() {
                  $('#detail-keys').modal('show', {
                        backdrop: 'static'
                  });
            }, 100);
      }
      $scope.selectPercepcao = function(keyresult, value) {
            if (!keyresult.editing) { return; }
            keyresult.percepcao = value;
      }
      $scope.editDetailKeyResult = function(keyresult) {
            if (keyresult.editing) {
                  keyresult.Medicao = $("#detail_medicao_" + keyresult.id).val();
                  if (keyresult.pattern == 0) {
                        keyresult.medicaoFormatted = formatPercent(keyresult.Medicao);
                  } else {
                        keyresult.medicaoFormatted = formatPattern(keyresult.Medicao, keyresult.pattern);
                  }
                  var data = {
                        medicao: keyresult.Medicao,
                        percepcao: keyresult.percepcao,
                        id: keyresult.id
                  };
                  $globals['updateRchaveDetails'](data).then(function(response) {
                        toastr.success("Registro Atualizado com Sucesso");
                        $globals['get']($scope.selectedYear).then(function(response) {
                              keyresult.editing = !keyresult.editing;
                              $scope.$parent.globals = response;
                              $scope.updatePercentage();
                              $scope.getModalData();
                              $scope.$apply();
                        });
                  });
            } else {
                  keyresult.editing = !keyresult.editing;
            }
      }
      $scope.linkToObjectivePage = function(taticId) {
            window.open(baseurl + 'planejamento#!/tatic/' + taticId, '_blank');
      }

});
elofy.controller('mainCtrl', function globalCtrl($scope, $timeout, $location, $users, $teams, $years, $globals, $tatics, $cycles, $tags, $feed, $alerts, $channels, $translate, $mydashboard) {
      Chart.plugins.unregister(ChartDataLabels);
      $scope.tags = [];
      $scope.user = {};
      $scope.years = [];
      $scope.globals = [];

      $scope.approveDisapprove = function(acao, idObjetivo, nome, email) {
            
            switch (acao) {
                  case "A":
                  $.ajax({
                        url: baseurl + 'approveObjective',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_objetivo : idObjetivo,
                              nome : nome,
                              email : email
                        }
                  });
                  $scope.workflow = 1;
                    break;
                  case "R":
                  $.ajax({
                        url: baseurl + 'disapproveObjective',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_objetivo: idObjetivo,
                              nome : nome,
                              email : email
                        }
                  });
                  $scope.workflow = 2;
                  $('#modal-justificativa').modal('hide');
                    break;
                  case "P":
                  $.ajax({
                        url: baseurl + 'resendObjective',
                        method: 'POST',
                        dataType: 'json',
                        data: {
                              id_objetivo: idObjetivo
                        }
                  });
                  $scope.workflow = 0;
                  $("#tags-status").hide();

                    break;
                  default:
                        console.log("Ação não executada.");
            }
            
      }

      $('#key-pattern').change(function() {
            if ($(this).val() == 1) {
                  $('#key-pattern').select2('destroy');
                  $('#key-pattern').select2();
                  $('#key-pattern').select2('val', 4);
            } else {
                  $('#key-measure').val("");
                  $('#key-measure').removeClass('disable-content');
                  $('#tipo_pattern').removeClass('disable-content');
            }
      });

      moment.locale('pt-BR');
      setTimeout(function() {
            $('.button_sets a').click(function(event) {
                  $('.button_sets .okr_animation').delay(500).offset({
                        left: $(this).offset().left
                  });
            });
      }, 1000);
      if (window.openDatabase) {
            $scope.db = openDatabase('db', '1.0', 'database', 2 * 1024);
      }
      $scope.menuCollapse = false;
      $scope.currentYear = new Date().getFullYear();
      $scope.currentYear = $scope.currentYear.toString();
      if (window.openDatabase) {
            $scope.db.transaction(function(tx) {
                  tx.executeSql("CREATE TABLE IF NOT EXISTS 'configs' ('menu' INT NULL)");
                  tx.executeSql('SELECT * FROM configs', [], function(tx, results) {
                        if (!results.rows.length) {
                              tx.executeSql('INSERT INTO configs(menu) VALUES (0)');
                        } else {
                              $scope.menuCollapse = results.rows.item(0).menu;
                              if (!results.rows.item(0).menu) {
                                    toggle_sidebar_menu(false);
                              }
                        }
                  });
            });
      }
      $('.sidebar-collapse a').click(function() {
            $scope.$apply(function() {
                  $scope.menuCollapse = $scope.menuCollapse ? 0 : 1;
            });
            if (window.openDatabase) {
                  $scope.db.transaction(function(tx) {
                        tx.executeSql("UPDATE 'configs' set menu = " + $scope.menuCollapse);
                  });
            }
      });
      $scope.channels = [];
      $channels['get']().then(function(channels) {
            $scope.channels = channels;
      });
      $scope.limitEstrategicos = 5;
      $scope.estrategicosChange = function() {
            if ($scope.limitEstrategicos > 5) {
                  $scope.limitEstrategicos = 5;
            } else {
                  $scope.limitEstrategicos = $scope.channels.length;
            }
      }
      $scope.limitAfinidade = 5;

      $scope.submitTag = function() {
            var newTag = $('#newTag').val();
            
            if (newTag) {
                  
                  $globals.edit.tags['add']($scope.details.id, newTag).then(function(tags) {
                        $scope.details.tags = tags;
                        $('#newTag').val('');
                        $('.addTag.dropdown.open .dropdown-toggle').dropdown('toggle');
                        
                  });
                 
            }
      }

      $scope.afinidadeChange = function() {
            if ($scope.limitAfinidade > 5) {
                  $scope.limitAfinidade = 5;
            } else {
                  $scope.limitAfinidade = $scope.channels.length;
            }
      }
      $scope.toggleChannel = function() {
            var container = $('.page-container');
            if (container.hasClass('chat-visible')) {
                  container.removeClass('chat-visible');
            } else {
                  container.addClass('chat-visible');
            }
      }
      $scope.newChannel = function() {
            $('#modal-channel').modal('show', {
                  backdrop: 'static'
            });
      }
      $('#form-channel').validate({
            rules: {
                  nome: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        name: $('#channel-name').val()
                  }
                  $('#form-channel .salvar').button('loading');
                  $channels['new'](data).then(function(response) {
                        $('#new-goal').modal('hide');
                        window.location.href = baseurl + 'canais/' + response.id;
                  });
            }
      });
      $.fn.peity.defaults.pie = {
            delimiter: null,
            fill: ["#7a969c", "#ccc", "#ccc"],
            height: 16,
            radius: 8,
            width: 16
      };
      $.validator.addMethod("valueNotEquals", function(value, element, arg) {
            return arg != value;
      }, "Value must not equal arg.");
      $users['me']().then(function(response) {
            $scope.user = response;
            // $translate.use('en');
            $translate.use($scope.user.id_idioma);
      });
      $tags['get']().then(function(response) {
            $scope.tags = response;
            var tagsNames = new Bloodhound({
                  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                  queryTokenizer: Bloodhound.tokenizers.whitespace,
                  local: $scope.tags
            });
            tagsNames.initialize();
            $('.search-tags').typeahead({
                  hint: true,
                  highlight: true,
                  minLength: 1
            }, {
                  name: 'tagnames',
                  displayKey: 'name',
                  valueKey: 'name',
                  source: tagsNames.ttAdapter()
            });
      });
      $scope.markAsRead = function() {
            $feed['get']().then(function(response) {
                  $scope.user.feed = [];
            });
      }
      $scope.searchTag = function() {
            var tag = $('.search-tags.tt-input').val();
            $location.path('/tags/' + tag);
      }
      $scope.initials = function(name) {
            if (!name) {
                  return '';
            }
            var initials = name.match(/\b\w/g) || [];
            initials = ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();
            return initials;
      }
      $scope.initialsToOne = function(name) {
            if (!name) {
                  return '';
            }
            var initials = name.match(/\b\w/g) || [];
            initials = ((initials.shift() || '')).toUpperCase();
            return initials;
      }
      // $scope.$watch('teams',function(newVal,oldVal){
      //   console.log("update on teams", newVal);
      //   });
      // MODAIS
      $users['get']().then(function(response) {
            $scope.users = response;
            $users['get']().then(function(response) {
                  $users['me']().then(function(response1) {
                        $("#okr-user").select2('destroy');
                        $scope.meuser = response1;
                        for (var i = 0; i < $scope.users.length; i++) {
                              if ($scope.users[i].id == $scope.meuser.id) {
                                    $('#okr-user optgroup option[ng-value="' + $scope.users[i].id + '"]').attr('selected', 'selected');
                              }
                        };
                  });
            });
      });
      $teams['getAllTeams']().then(function(response) {
            $scope.teams = response;
            $('.multi-select.allusers-newteams').multiSelect();
            $users['me']().then(function(response1) {
                  $("#okr-team").select2('destroy');
                  $scope.meuser = response1;
                  for (var i = 0; i < $scope.teams.length; i++) {
                        if ($scope.teams[i].id == $scope.meuser.id_time) {
                              $('#okr-team optgroup option[value="' + $scope.teams[i].id + '"]').attr('selected', 'selected');
                        }
                  };
            });
      });
      $years['get']().then(function(response) {
            $scope.years = response;
      });
      if ($scope.selectedYear) {
            $scope.selectedYear = $scope.selectedYear;
      } else {
            $scope.selectedYear = new Date().getFullYear();
      }
      $globals['get']($scope.selectedYear).then(function(response) {
            $scope.globals = response;
      });

      function resetTeamFields(teams, selectedUserTeam) {
            $("#okr-team").select2('destroy');
            if (selectedUserTeam) {
                  for (var i = 0; i < teams.length; i++) {
                        if (teams[i].id == selectedUserTeam) {
                              $('#okr-team optgroup option[value="' + teams[i].id + '"]').attr('selected', 'selected');
                        }
                  };
            } else {
                  $('#okr-team option[value=""]').attr('selected', 'selected');
            }
            $("#okr-team").select2();
      }
      $scope.getUserTeam = function() {
            var user_id = $scope.selectedUserTeam;
            $users['getselecteduserteam'](user_id).then(function(results) {
                  if (!$scope.teams || $scope.teams.length == 0) {
                        $teams['getAllTeams']().then(function(response) {
                              $scope.teams = response;
                              resetTeamFields($scope.teams, results);
                        });
                  } else {
                        resetTeamFields($scope.teams, results);
                  }
            });
      };
      $scope.showResponsavel = function() {
            if ($scope.selectedTipo == 'i') {
                  $("#responsavel_section").css("display", "block");
                  $("#team_section").css("display", "block");
                  $("#team_section").removeClass("col-md-12");
                  $("#team_section").addClass("col-md-6");
            } else if ($scope.selectedTipo == 't') {
                  $("#responsavel_section").css("display", "none");
                  $("#team_section").css("display", "block");
                  $("#team_section").removeClass("col-md-6");
                  $("#team_section").addClass("col-md-12");
            } else {
                  $users['get']().then(function(response) {
                        $("#okr-user").select2('destroy');
                        $scope.users = response;
                        $users['me']().then(function(response1) {
                              $scope.meuser = response1;
                              for (var i = 0; i < $scope.users.length; i++) {
                                    if ($scope.users[i].id == $scope.meuser.id) {
                                          $('#okr-user option').attr('selected', false);
                                          $('#okr-user optgroup option[ng-value="' + $scope.users[i].id + '"]').attr('selected', 'selected');
                                    }
                                    $("#okr-user").select2();
                              };
                        });
                  });
                  // TODO : test if has teams
                  var callusers = function() {
                        $users['me']().then(function(response3) {
                              $scope.meuser = response3;
                              resetTeamFields($scope.teams, $scope.meuser.usuarioviewTime.id_time);
                        });
                  }
                  if (!$scope.teams || $scope.teams == 0) {
                        $teams['getAllTeams']().then(function(response2) {
                              $scope.teams = response2;
                              callusers();
                        });
                  } else {
                        callusers();
                  }
                  $("#responsavel_section").css("display", "none");
                  $("#team_section").css("display", "none");
            }
      };
      //$scope.DeactiveTatic = function(objectivo_id,active){
      //$tatics['deactive_objectivo'](objectivo_id,active).then(function(results){
      //$globals['get']('2017').then(function(response){
      //toastr.success('Objective Successfully deleted.');
      //$scope.globals = response;
      //});
      //});
      //}
      $scope.selectedYear = new Date().getFullYear();
      $scope.direcionador = false;
      $scope.objetivo = false;
      $scope.link_text = 'Direcionador';
      $scope.linkType = function($type) {
            delete $scope.initGoals;
            $("#okr-objectives").select2({
                  allowClear: true
            });
            if ($("#direcionador").prop('checked') || $("#objetivo").prop('checked') || $("#estrategico_obj").prop('checked')) {
                  if ($type == 1) {
                        $scope.link_text = 'Direcionador';
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                        });
                        delete $scope.objetivo;
                        delete $scope.estrategico_obj;
                  }
                  if ($type == 2) {
                        $scope.link_text = 'Objetivo';
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                        });
                        delete $scope.direcionador;
                        delete $scope.estrategico_obj;
                  }
                  if ($type == 3) {
                        $scope.link_text = 'Estrategico';
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                        });
                        delete $scope.direcionador;
                        delete $scope.objetivo;
                  }
            } else {
                  $("#okr-objectives").select2({
                        allowClear: true
                  });
                  $scope.objectives = [];
                  delete $scope.objetivo;
                  delete $scope.direcionador;
            }
      }
      $scope.initGoals = function() {
            $globals['get_objectives']($scope.selectedYear, 1).then(function(response) {
                  $scope.objectives = response;
            });
      }
      // modal novo global
      $scope.okrGlobal = function() {
            $('#form-okr-global')[0].reset();
            if ($('#okr-global-year').hasClass('visible')) {
                  var selectBox = $("#okr-global-year").data("selectBox-selectBoxIt");
                  $('#okr-global-year').removeClass('visible');
                  selectBox.destroy();
            }
            $('#okr-global-year').addClass('visible').selectBoxIt();
            $('select.usuario-okr').select2({
                  allowClear: true
            }).addClass('visible');
            $('#new-okr-global').modal('show', {
                  backdrop: 'static'
            });
      }
      // Validacao Novo
      $('#form-okr-global').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: 'required',
                  ano: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        year: $scope.currentYear,
                        name: $('#okr-global-name').val(),
                        description: $('#okr-global-description').val(),
                        user: $('#okr-global-user').val()
                  }
                  $('#form-okr-global .salvar').button('loading');
                  $globals['insert'](data).then(function(response) {
                        var newId = response[response.length - 1].id;
                        $channels['get']().then(function(channels) {
                              $scope.channels = channels;
                        });
                        $('#new-okr-global').modal('hide');
                        $('#form-okr-global .salvar').button('reset');
                        $scope.currentYear = new Date().getFullYear();
                        $scope.currentYear = $scope.currentYear.toString();
                        window.location.href = baseurl + 'planejamento#!/' + newId;
                  });
            }
      });
      // modal novo tatic
      $scope.okrTatic = function() {
            $('#form-okr-tatic')[0].reset();
            $scope.cycles = [];
            $('select#okr-tatic-cycles').select2('destroy');
            $('select.usuario-okr-tatic').select2({
                  allowClear: true
            }).addClass('visible');
            $('select.times-okr-tatic').select2({
                  allowClear: true
            }).addClass('visible');
            $('select.objetivo-okr-tatic').select2({
                  allowClear: true
            }).addClass('visible');
            $scope.changeCycle = function() {
                  $cycles['get']($scope.objectiveId).then(function(response) {
                        $scope.cycles = response;
                        $timeout(function() {
                              $('select#okr-tatic-cycles').select2({
                                    allowClear: true
                              });
                              //$('select#okr-tatic-cycles').select2('val', null);
                        }, 10);
                  });
            }
            $scope.selectedYear = new Date().getFullYear();
            $globals['get']($scope.selectedYear).then(function(response) {
                  $scope.objectives = response;
            });
            $('#new-okr-tatic').modal('show', {
                  backdrop: 'static'
            });
      }
      // Validacao Novo Tatico
      $('#form-okr-tatic').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            rules: {
                  nome: 'required',
                  descricao: 'required',
                  usuario: 'required',
                  time: 'required',
                  objetivo: 'required',
                  clicos: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        parent_id: $scope.objectiveId,
                        name: $('#okr-tatic-name').val(),
                        description: $('#okr-tatic-description').val(),
                        user: $('#okr-tatic-user').val(),
                        team: $('#okr-tatic-team').val(),
                        weight: 1,
                        cycles: $scope.cyclesModel
                  }
                  $('#form-okr-tatic .salvar').button('loading');
                  $tatics['insert'](data).then(function(response) {
                        var newId = response.tatics[response.tatics.length - 1].id;
                        $('#new-okr-tatic').modal('hide');
                        $('#form-okr-tatic .salvar').button('reset');
                        window.location.href = baseurl + 'planejamento#!/tatic/' + newId;
                  });
            }
      });
      $scope.key_list = [];
      var counter = 0;
      $scope.addNewKey = function() {
            var data = {
                  index: counter,
                  name: $('#okr_keyresult_name').val(),
                  type: $('#okr_keyresult_type').val(),
                  medida: $('#okr_keyresult_medida').val(),
                  start: $('#okr_ponto_partida').val(),
                  goal: $('#okr_meta').val(),
            }
            if (data.name != '') {
                  $scope.key_list.push(data);
                  counter++;
            }
            $('#okr_keyresult_name').val('');
            $('#okr_keyresult_type').val('');
            $('#okr_keyresult_medida').val('');
            $('#okr_ponto_partida').val('');
            $('#okr_meta').val('');
            $('select#okr_keyresult_type').select2('destroy');
            $('select.types-okr-tatic').select2({
                  allowClear: true
            });
            delete $scope.okr_ponto_partida;
            delete $scope.okr_meta;
            $('#okr_ponto_partida').val(0);
            $('#okr_meta').val(100);
      }
      $scope.editKeyResult = function(id) {
            $scope.editKeyBtn = 1;
            $('select#okr_keyresult_type').select2('destroy');
            var edit_data = $scope.key_list[id];
            $scope.index_id = edit_data.index;
            $scope.okr_keyresult_name = edit_data.name;
            $scope.okr_keyresult_type = edit_data.type;
            $scope.okr_keyresult_medida = edit_data.medida;
            $scope.okr_ponto_partida = edit_data.start;
            $scope.okr_meta = edit_data.goal;
            $('#okr_keyresult_name').val($scope.okr_keyresult_name);
            $('#okr_keyresult_medida').val($scope.okr_keyresult_medida);
            $('#okr_ponto_partida').val($scope.okr_ponto_partida);
            $('#okr_meta').val($scope.okr_meta);
            $('#okr_keyresult_type').val($scope.okr_keyresult_type);
            $('select.types-okr-tatic').select2({
                  allowClear: true
            });
      }
      $scope.editSubmitNewKey = function(index_id) {
            $scope.key_list[index_id].name = $('#okr_keyresult_name').val();
            $scope.key_list[index_id].type = $('#okr_keyresult_type').val();
            $scope.key_list[index_id].medida = $('#okr_keyresult_medida').val();
            $scope.key_list[index_id].start = $('#okr_ponto_partida').val();
            $scope.key_list[index_id].goal = $('#okr_meta').val();
            $('#okr_keyresult_name').val('');
            $('#okr_keyresult_type').val('');
            $('#okr_keyresult_medida').val('');
            $('#okr_ponto_partida').val('');
            $('#okr_meta').val('');
            $('select#okr_keyresult_type').select2('destroy');
            $('select.types-okr-tatic').select2({
                  allowClear: true
            });
            delete $scope.editKeyBtn;
            delete $scope.okr_ponto_partida;
            delete $scope.okr_meta;
      }
      $scope.deleteKey = function(index_id) {
            if ($scope.index_id == index_id) {
                  $('#okr_keyresult_name').val('');
                  $('#okr_keyresult_medida').val('');
                  $('#okr_keyresult_type').val('');
                  $('#okr_ponto_partida').val('');
                  $('#okr_meta').val('');
                  $('select#okr_keyresult_type').select2('destroy');
                  $('select.types-okr-tatic').select2({
                        allowClear: true
                  });
                  delete $scope.editKeyBtn;
            }
            $scope.key_list.splice(index_id);
      }
      // modal novo okr
      // modal novo okr
      $scope.okr = function() {
            $('#form-okr')[0].reset();
            $scope.link_text = 'Direcionador';
            $scope.cyclesOkr = [];
            $scope.currentYearOkr = null;
            $scope.cyclesModelOkr = null;
            $scope.initGoals();
            $scope.ObjectiveId = null;
            $('#okr-year').val('');
            $('#form-okr .select2').select2('destroy');
            $('#form-okr .allusers-newteams').multiSelect('destroy');
            $('#okr-objectives').select2('destroy');
            $('#okr_keyresult_type').select2('destroy');
            $('#okr-cycles').select2('destroy');
            $('#okr-team').select2('destroy');
            $('#okr-team').val($scope.user.usuarioviewTime.id_time);
            $('#okr-team').select2({
                  allowClear: true
            });
            if ($('#okr-year').hasClass('visible')) {
                  var selectBox = $("#okr-year").data("selectBox-selectBoxIt");
                  $('#okr-year').removeClass('visible');
                  selectBox.destroy();
            }
            $timeout(function() {
                  $('#form-okr .allusers-newteams').multiSelect();
                  $('select.usuario-okr').select2({
                        allowClear: true
                  }).addClass('visible');
                  $('select.times-okr').select2({
                        allowClear: true
                  }).addClass('visible');
                  $('#direcionador').prop('checked', true);
                  $('#okr-objectives').select2({
                        allowClear: true
                  }).addClass('visible');
            }, 200);
            $('#okr_keyresult_type').select2({
                  allowClear: true
            }).addClass('visible');
            $('#okr-year').addClass('visible').selectBoxIt();
            $("#responsavel_section").css("display", "block");
            $scope.selectedTipo = 'i';
            $('#new-okr').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.changeCycleOkr = function() {
            $cycles['getByYear']($scope.currentYearOkr).then(function(response) {
                  $scope.cyclesOkr = response;
                  $timeout(function() {
                        $('#okr-cycles').select2();
                  }, 10);
            });
      }
      $scope.loadDefaultChartsForDashboard = function(parent_id, id_times = '', id_ciclos = '') {
            var currentDate = moment(new Date()).format("YYYY-MM-DD");
            $teams['getAllTeams']().then(function(response_team) {
                  $scope.teams = response_team;
                  $('#myChart1').remove(); // this is my <canvas> element
                  $('#myChart2').remove(); // this is my <canvas> element
                  $('#myChart3').remove(); // this is my <canvas> element
                  $('#myChart4').remove(); // this is my <canvas> element
                  $('.sec1,.sec2,.sec3,.sec4').css('width', '100%');
                  $('.sec1').append('<canvas id="myChart1"><canvas>');
                  $('.sec2').append('<canvas id="myChart2"><canvas>');
                  $('.sec3').append('<canvas id="myChart3"><canvas>');
                  $('.sec4').append('<canvas id="myChart5"><canvas>');
                  //$scope.initScroll();
                  //var canvas = document.createElement("canvas");
                  $timeout(function() {
                        //$('#selectedTime').select2('val','');
                        $cycles['getCyclesIdByDate'](currentDate).then(function(cycle_data) {
                              var parent_id = $('.dashboard-section').find('.red-side').data('global');
                              var id_ciclo = $('#selectedCiclo').val();
                              var id_time = $('#selectedTime').val();
                              if (parent_id == '') {
                                    parent_id = null;
                              }
                              if (id_ciclos == '') {
                                    if ((id_ciclo == undefined || id_ciclo == '') && !$scope.changeCiclo) {
                                          var id_cycle = cycle_data.id;
                                          $('#selectedCiclo').select2('val', id_cycle);
                                    } else {
                                          var id_cycle = id_ciclo;
                                    }
                              } else {
                                    var id_cycle = id_ciclos;
                                    $('#selectedCiclo').select2('val', id_ciclos);
                              }
                              if (id_times == '') {
                                    if ((id_time == undefined || id_time == '') && !$scope.changeTeam) {
                                          var id_time = res.usuarioviewTime.id_time;
                                          $('#selectedTime').select2('val', id_time);
                                    } else {
                                          var id_time = id_time;
                                    }
                              } else {
                                    var id_time = id_times;
                                    $('#selectedTime').select2('val', id_times);
                              }
                              //alert(id_cycle);return false;
                              $mydashboard['getGraphData'](id_time, id_cycle, parent_id, year).then(function(graph_data_res) {
                                    $scope.subGoals = graph_data_res[4];
                                    $("#graph_not_found").hide();
                                    $("#graph_found").show();
                                    /* if(graph_data_res[0].length < 1){
                                     $("#graph_not_found").show();
                                     $("#graph_found").hide();
                                     }
                                     if(graph_data_res[1].length < 1){
                                     $("#graph_not_found").show();
                                     $("#graph_found").hide();
                                     }
                                     if(graph_data_res[2].length < 1){
                                     $("#graph_not_found").show();
                                     $("#graph_found").hide();
                                     } */
                                    if (graph_data_res[4].length < 1) {
                                          $("#graph_not_found").show();
                                          $("#graph_found").hide();
                                    }
                                    /*****************************************
                                     Pie Chart Styles
                                     ******************************************/
                                    var graph_array1_label = [];
                                    var graph_array1_data = [];
                                    var graph_array1_color_data = [];
                                    angular.forEach(graph_data_res[0], function(item, key) {
                                          graph_array1_label.push(item.total + ' Objetivos ' + item.situacaos);
                                          graph_array1_data.push(item.total);
                                          if (item.situacao == 0) {
                                                graph_array1_color_data.push('#FFF572');
                                          }
                                          if (item.situacao == 2) {
                                                graph_array1_color_data.push('#66CCFB');
                                          }
                                          if (item.situacao == 3) {
                                                graph_array1_color_data.push('#FFA7A8');
                                          }
                                          if (item.situacao == 1) {
                                                graph_array1_color_data.push('#54D490');
                                          }
                                    });
                                    var ctx = document.getElementById("myChart1");
                                    //debugger;
                                    var data = {
                                          labels: graph_array1_label,
                                          datasets: [{
                                                data: graph_array1_data,
                                                backgroundColor: graph_array1_color_data,
                                          }]
                                    }
                                    var myChart = new Chart(ctx, {
                                          type: 'pie',
                                          data: data,
                                          options: {
                                                'onClick': function() {
                                                      $(".scroller-height-charts").animate({
                                                            scrollTop: $("#goalstable").offset().top
                                                      }, 500);
                                                },
                                                "animation": {
                                                      "onComplete": function() {
                                                            var chartInstance = this.chart,
                                                                  ctx = chartInstance.ctx;
                                                            ctx.fillStyle = 'black';
                                                            ctx.font = '12px Calibri';
                                                      }
                                                },
                                                legend: {
                                                      display: true,
                                                      position: 'right',
                                                      labels: {
                                                            padding: 20
                                                      }
                                                },
                                                tooltips: {
                                                      "enabled": false
                                                },
                                                scales: {
                                                      yAxes: [{
                                                            gridLines: {
                                                                  display: false,
                                                                  drawBorder: false,
                                                            },
                                                            ticks: {
                                                                  display: false
                                                            },
                                                      }],
                                                      xAxes: [{
                                                            gridLines: {
                                                                  display: false,
                                                                  drawBorder: false,
                                                            },
                                                            ticks: {
                                                                  display: false
                                                            },
                                                      }]
                                                }
                                          }
                                    });
                                    myChart.clear();
                                    myChart.update();
                                    /*****************************************
                                     Pie Chart Styles
                                     ******************************************/
                                    var graph_array2_label = [];
                                    var graph_array2_data = [];
                                    var graph_array2_color_data = [];
                                    // console.log(graph_data_res[1]);
                                    angular.forEach(graph_data_res[1], function(item, key) {
                                          graph_array2_label.push(item.total + ' Objetivos ' + item.cors);
                                          graph_array2_data.push(item.total);
                                          if (item.cor == 0) {
                                                graph_array2_color_data.push('#FFF572');
                                          }
                                          if (item.cor == 2) {
                                                graph_array2_color_data.push('#66CCFB');
                                          }
                                          if (item.cor == 3) {
                                                graph_array2_color_data.push('#FFA7A8');
                                          }
                                          if (item.cor == 1) {
                                                graph_array2_color_data.push('#66CCFB');
                                          }
                                    });
                                    var ctx2 = document.getElementById("myChart2");
                                    //debugger;
                                    var data2 = {
                                          labels: graph_array2_label,
                                          datasets: [{
                                                data: graph_array2_data,
                                                backgroundColor: graph_array2_color_data,
                                          }]
                                    }
                                    var myChart2 = new Chart(ctx2, {
                                          type: 'pie',
                                          data: data2,
                                          options: {
                                                'onClick': function() {
                                                      $(".scroller-height-charts").animate({
                                                            scrollTop: $("#goalstable").offset().top
                                                      }, 500);
                                                },
                                                legend: {
                                                      display: true,
                                                      position: 'right',
                                                      labels: {
                                                            padding: 20
                                                      }
                                                },
                                                tooltips: {
                                                      "enabled": false
                                                },
                                                scales: {
                                                      yAxes: [{
                                                            gridLines: {
                                                                  display: false,
                                                                  drawBorder: false,
                                                            },
                                                            ticks: {
                                                                  display: false
                                                            },
                                                      }],
                                                      xAxes: [{
                                                            gridLines: {
                                                                  display: false,
                                                                  drawBorder: false,
                                                            },
                                                            ticks: {
                                                                  display: false,
                                                            },
                                                      }]
                                                }
                                          }
                                    });
                                    myChart2.clear();
                                    myChart2.update();
                                    /*****************************************
                                     HorizontalBar Chart Styles
                                     ******************************************/
                                    var graph_array3_label = [];
                                    var graph_array3_full_label = [];
                                    var graph_array3_data = [];
                                    angular.forEach(graph_data_res[2], function(item, key) {
                                          graph_array3_full_label.push(item.nome_unidade);
                                          if (item.nome_unidade.length > 8) {
                                                graph_array3_label.push(item.nome_unidade.substring(0, 8) + " ....");
                                          } else {
                                                graph_array3_label.push(item.nome_unidade);
                                          }
                                          graph_array3_data.push(item.total);
                                    });
                                    // console.log(graph_array3_label);
                                    // console.log(graph_array3_data);
                                    var ctx = document.getElementById("myChart3");
                                    //debugger;
                                    var data = {
                                          labels: graph_array3_label,
                                          datasets: [{
                                                data: graph_array3_data,
                                                backgroundColor: "#f9c598",
                                          }]
                                    }
                                    var myChart = new Chart(ctx, {
                                          type: 'horizontalBar',
                                          // data: [{x:'2016-12-25', y:20}, {x:'2016-12-26', y:10}],
                                          data: data,
                                          options: {
                                                'onClick': function() {
                                                      $(".scroller-height-charts").animate({
                                                            scrollTop: $("#goalstable").offset().top
                                                      }, 500);
                                                },
                                                "animation": {
                                                      "duration": 1,
                                                      "onComplete": function() {
                                                            var chartInstance = this.chart,
                                                                  ctx = chartInstance.ctx;
                                                            ctx.fillStyle = 'black';
                                                            ctx.font = '12px Calibri';
                                                            /* this.data.datasets.forEach(function(dataset, i) {
                                                             var meta = chartInstance.controller.getDatasetMeta(i);
                                                             meta.data.forEach(function(bar, index) {
                                                             var data = dataset.data[index];
                                                             
                                                             ctx.fillText(data, bar._model.x + 10, bar._model.y + 4);
                                                             ctx.fillStyle = 'black';
                                                             ctx.font = '12px Calibri';
                                                             });
                                                             }); */
                                                      }
                                                },
                                                legend: {
                                                      "display": false
                                                },
                                                /* tooltips: {
                                                 "enabled": false
                                                 }, */
                                                tooltips: {
                                                      // Disable the on-canvas tooltip
                                                      enabled: false,
                                                      custom: function(tooltipModel, d) {
                                                            console.log(tooltipModel);
                                                            console.log(d);
                                                            // Tooltip Element
                                                            var tooltipEl = document.getElementById('chartjs-tooltip');
                                                            // Create element on first render
                                                            if (!tooltipEl) {
                                                                  tooltipEl = document.createElement('div');
                                                                  tooltipEl.id = 'chartjs-tooltip';
                                                                  tooltipEl.innerHTML = "<table></table>";
                                                                  document.body.appendChild(tooltipEl);
                                                            }
                                                            // Hide if no tooltip
                                                            if (tooltipModel.opacity === 0) {
                                                                  tooltipEl.style.opacity = 0;
                                                                  return;
                                                            }
                                                            // Set caret Position
                                                            tooltipEl.classList.remove('above', 'below', 'no-transform');
                                                            if (tooltipModel.yAlign) {
                                                                  tooltipEl.classList.add(tooltipModel.yAlign);
                                                            } else {
                                                                  tooltipEl.classList.add('no-transform');
                                                            }

                                                            function getBody(bodyItem) {
                                                                  return bodyItem.lines;
                                                            }
                                                            // Set Text
                                                            if (tooltipModel.body) {
                                                                  var titleLines = tooltipModel.title || [];
                                                                  var bodyLines = tooltipModel.body.map(getBody);
                                                                  var innerHtml = '<thead>';
                                                                  titleLines.forEach(function(title, dataindex) {
                                                                        innerHtml += '<tr ><th style="color: #fff; background: black; padding:5px 8px; border-radius: 5px;">' + graph_array3_full_label[dataindex] + '';
                                                                  });
                                                                  bodyLines.forEach(function(body, i) {
                                                                        var colors = tooltipModel.labelColors[i];
                                                                        var style = 'background:' + colors.backgroundColor;
                                                                        style += '; border-color:' + colors.borderColor;
                                                                        style += '; border-width: 2px';
                                                                        var span = '<span style="' + style + '"></span>';
                                                                        innerHtml += ' ' + span + body + '</th></tr>';
                                                                  });
                                                                  innerHtml += '</thead><tbody>';
                                                                  innerHtml += '</tbody>';
                                                                  var tableRoot = tooltipEl.querySelector('table');
                                                                  tableRoot.innerHTML = innerHtml;
                                                            }
                                                            // `this` will be the overall tooltip
                                                            var position = this._chart.canvas.getBoundingClientRect();
                                                            // Display, position, and set styles for font
                                                            tooltipEl.style.opacity = 1;
                                                            tooltipEl.style.position = 'absolute';
                                                            tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';
                                                            tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY - 20 + 'px';
                                                            tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
                                                            tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
                                                            tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
                                                            tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';
                                                            tooltipEl.style.pointerEvents = 'none';
                                                      }
                                                }
                                                /* tooltips: {
                                                 enabled: true,
                                                 // mode: 'single',
                                                 callbacks: {
                                                 label: function(tooltipItems, data) { 
                                                 // console.log(tooltipItems);
                                                 // return tooltipItems.xLabel;
                                                 return graph_array3_full_label[tooltipItems.index];
                                                 }
                                                 }
                                                 } */
                                                ,
                                                scales: {
                                                      yAxes: [{
                                                            gridLines: {
                                                                  display: false
                                                            },
                                                      }],
                                                      xAxes: [{
                                                            ticks: {
                                                                  userCallback: function(label, index, labels) {
                                                                        // when the floored value is the same as the value we have a whole number
                                                                        if (Math.floor(label) === label) {
                                                                              return label;
                                                                        }
                                                                  },
                                                            },
                                                            gridLines: {
                                                                  display: false
                                                            }
                                                      }]
                                                }
                                          }
                                    });
                                    myChart.clear();
                                    myChart.update();
                                    /*****************************************
                                     Line Chart Styles
                                     ******************************************/
                                    var graph_array4_label = [];
                                    var graph_array4_data = [];
                                    angular.forEach(graph_data_res[3], function(item, key) {
                                          graph_array4_label.push(item.nome_ciclo);
                                          graph_array4_data.push(item.total);
                                    });
                                    var ctx = document.getElementById("myChart5");
                                    //debugger;
                                    var data = {
                                          labels: graph_array4_label,
                                          datasets: [{
                                                data: graph_array4_data,
                                                pointBackgroundColor: '#000000',
                                                backgroundColor: 'transparent',
                                          }]
                                    }
                                    var myChart = new Chart(ctx, {
                                          type: 'line',
                                          data: data,
                                          options: {
                                                "hover": {
                                                      "animationDuration": 0
                                                },
                                                'onClick': function() {
                                                      $(".scroller-height-charts").animate({
                                                            scrollTop: $("#goalstable").offset().top
                                                      }, 500);
                                                },
                                                "animation": {
                                                      // "duration": 1,
                                                      "onComplete": function() {
                                                            var chartInstance = this.chart,
                                                                  ctx = chartInstance.ctx;
                                                            ctx.fillStyle = 'black';
                                                            ctx.font = '12px Calibri';
                                                      }
                                                },
                                                legend: {
                                                      display: false,
                                                },
                                                tooltips: {
                                                      enabled: true,
                                                      // mode: 'single',
                                                      callbacks: {
                                                            label: function(tooltipItems, data) {
                                                                  return tooltipItems.yLabel;
                                                            }
                                                      }
                                                },
                                                scales: {
                                                      yAxes: [{
                                                            gridLines: {
                                                                  display: true
                                                            },
                                                            ticks: {
                                                                  display: true
                                                            },
                                                      }],
                                                      xAxes: [{
                                                            gridLines: {
                                                                  display: false
                                                            }
                                                      }]
                                                },
                                                bezierCurve: false,
                                                elements: {
                                                      line: {
                                                            tension: 0
                                                      }
                                                },
                                          }
                                    });
                                    myChart.clear();
                                    myChart.update();
                              });
                        });
                  }, 200);
            });
      }
      $("#new-okr").on("hidden.bs.modal", function() {
            delete $scope.estrategico;
            $scope.key_list = [];
            delete $scope.okr_keyresult_name;
            delete $scope.okr_keyresult_medida;
            delete $scope.okr_ponto_partida;
            delete $scope.okr_meta;
            delete $scope.editKeyBtn;
      });
      // Validacao Novo Okr
      $('#form-okr').validate({
            ignore: [],
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: 'required',
                  time: 'required',
                  ano: 'required',
                  tipo: 'required',
                  clicos: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var $post_keylist = new Array();
                  if ($scope.key_list) {
                        $.each($scope.key_list, function(index, value) {
                              delete value.$$hashKey;
                              $post_keylist.push(value);
                        });
                  }
                  var parent_id = $('#form-okr').find("#okr-objectives").val();
                  if (parent_id == "") {
                        parent_id = 0;
                  }
                  var tipo = $scope.selectedTipo;
                  if (tipo == 't') {
                        var data = {
                              parent_id: parent_id,
                              name: $('#okr-name').val(),
                              description: $('#okr-description').val(),
                              user: $scope.user.id,
                              team: $('#okr-team').val(),
                              tipo: $("#form-okr [name='tipo']:checked").val(),
                              estrategico: $("#form-okr [name='estrategico']:checked").val(),
                              weight: 1,
                              cycles: $scope.cyclesModelOkr,
                              keyresults: $post_keylist
                        }
                  } else if (tipo == 'c') {
                        var data = {
                              parent_id: parent_id,
                              name: $('#okr-name').val(),
                              description: $('#okr-description').val(),
                              user: $scope.user.id,
                              team: $scope.user.usuarioviewTime.id_time,
                              tipo: $("#form-okr [name='tipo']:checked").val(),
                              estrategico: $("#form-okr [name='estrategico']:checked").val(),
                              weight: 1,
                              cycles: $scope.cyclesModelOkr,
                              keyresults: $post_keylist,
                              resptimes: $scope.userNewTeams,
                        }
                  } else {
                        var userresp = $('#okr-user').val();
                        var arrresp = userresp.split(':');
                        var data = {
                              parent_id: parent_id,
                              name: $('#okr-name').val(),
                              description: $('#okr-description').val(),
                              user: arrresp[1],
                              team: $('#okr-team').val(),
                              tipo: $("#form-okr [name='tipo']:checked").val(),
                              estrategico: $("#form-okr [name='estrategico']:checked").val(),
                              weight: 1,
                              cycles: $scope.cyclesModelOkr,
                              keyresults: $post_keylist
                        }
                  }
                  $('#form-okr .salvar').button('loading');
                  $tatics['insert'](data).then(function(response) {
                        toastr.success('Adicionado.');
                        var newId = response.added_id;
                        $('#form-okr')[0].reset();
                        $('#new-okr').modal('hide');
                        $('#form-okr-tatic .salvar').button('reset');
                        delete $scope.key_list;
                        delete $scope.estrategico;
                        if (typeof $scope.addgoaltype != 'undefined' && $scope.addgoaltype == "dashboard") {
                              var id_time = $('#selectedTime').val();
                              $('#selectedTime').select2('val', id_time);
                              $('#selectedTime').val(id_time);
                              var id_ciclo = $('#selectedCiclo').val();
                              $scope.loadDefaultChartsForDashboard('', id_time, id_ciclo);
                              $(".dashboard-section .nav.metismenu").getNiceScroll().remove();
                              $(".scroller-height-charts").getNiceScroll().remove();
                              $timeout(function() {
                                    $(".dashboard-section .nav.metismenu").niceScroll({
                                          horizrailenabled: false,
                                          cursorcolor: "#3FB9EA"
                                    }).onResize();
                                    $(".scroller-height-charts").niceScroll({
                                          horizrailenabled: false,
                                          cursorcolor: "#3FB9EA"
                                    }).onResize();
                              }, 500);
                        } else {
                              window.location.href = baseurl + 'planejamento#!/tatic/' + newId;
                        }
                  });
            }
      });
      $('#estrategicoval').click(function() {
            if ($("#form-okr [name='estrategico']:checked").val() != '1') {
                  $('#objective_dv .select2').select2('destroy');
                  $timeout(function() {
                        $('#okr-objectives').select2({
                              allowClear: true
                        }).addClass('visible');
                  }, 400);
            }
      });
      /* // modal novo okr
       $scope.okr = function() {
       $('#form-okr')[0].reset();
       $scope.cyclesOkr = [];
       $('#okr-year').val('');
       $('#form-okr .select2').select2('destroy');
       $('#form-okr .allusers-newteams').multiSelect('destroy');
       $('select.cycles-okr').select2('destroy');
       if($('#okr-year').hasClass('visible')){
       var selectBox = $("#okr-year").data("selectBox-selectBoxIt");
       $('#okr-year').removeClass('visible');
       selectBox.destroy();
       }
       $scope.changeCycleOkr = function(){
       $cycles['getByYear']($scope.currentYearOkr).then(function(response){
       $scope.cyclesOkr = response;
       $timeout(function(){
       $('select.cycles-okr').select2();
       }, 10);
       });
       }
       $('#form-okr .allusers-newteams').multiSelect();
       $('select.usuario-okr').select2({allowClear: true}).addClass('visible');
       $('select.times-okr').select2({allowClear: true}).addClass('visible');
       $('#okr-year').addClass('visible').selectBoxIt();
       $('#new-okr').modal('show', {backdrop: 'static'});
       }
       
       // Validacao Novo Okr
       
       $('#form-okr').validate({
       ignore: [],
       ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
       rules: {
       nome: 'required',
       descricao: 'required',
       usuario: 'required',
       ano: 'required',
       time: 'required',
       clicos: 'required'
       },
       success: function(label,element) {
       $(element).parent('div').removeClass('validate-has-error');
       },
       errorPlacement: function(error,element) {
       $(element).parent('div').addClass('validate-has-error');
       },
       submitHandler: function(form) {
       var tipo = $scope.selectedTipo;
       if(tipo == 't'){
       var data = {
       parent_id: $scope.ObjectiveId?$scope.ObjectiveId:0,
       name: $('#okr-name').val(),
       description: $('#okr-description').val(),
       user: $scope.user.id,
       team: $('#okr-team').val(),
       tipo: $scope.selectedTipo,
       weight: 1,
       cycles: $scope.cyclesModelOkr
       }
       }else if(tipo == 'c'){
       var data = {
       parent_id: $scope.ObjectiveId?$scope.ObjectiveId:0,
       name: $('#okr-name').val(),
       description: $('#okr-description').val(),
       user: $scope.user.id,
       team: $scope.user.usuarioviewTime.id_time,
       tipo: $scope.selectedTipo,
       resptimes: $('#new_users_teams').val(),
       weight: 1,
       cycles: $scope.cyclesModelOkr
       }
       }else{
       var data = {
       parent_id: $scope.ObjectiveId?$scope.ObjectiveId:0,
       name: $('#okr-name').val(),
       description: $('#okr-description').val(),
       user: $('#okr-user').val(),
       team: $('#okr-team').val(),
       tipo: $scope.selectedTipo,
       weight: 1,
       cycles: $scope.cyclesModelOkr
       }
       }
       $('#form-okr .salvar').button('loading');
       $tatics['insert'](data).then(function(response){
       var newId = response.tatics[response.tatics.length-1].id;
       $('#form-okr')[0].reset();
       $('#new-okr').modal('hide');
       $('#form-okr-tatic .salvar').button('reset');
       window.location.href = baseurl + 'planejamento#!/tatic/' + newId;
       });
       }
       }); */
      // Modal New Tatic
      $scope.newobjective = function(parent_id) {
            $globals['details'](parent_id).then(function(response) {
                  $scope.details = response;
                  $users['get']().then(function(response) {
                        $scope.users = response;
                        $scope.newUsers = [];
                        for (var i = 0; i < $scope.users.length; i++) {
                              if ($scope.users[i].id) {
                                    $scope.newUsers.push($scope.users[i]);
                              }
                        };
                        $(".scroll").each(function() {
                              var self = $(this);
                              self.mCustomScrollbar({
                                    theme: "minimal",
                                    advanced: {
                                          updateOnBrowserResize: true,
                                          updateOnContentResize: true
                                    }
                              });
                        });
                        $scope.checkId = function(id) {
                              var test = false;
                              for (var i = 0, length = $scope.details.users.length; i < length; i++) {
                                    if (id == $scope.details.users[i].id) {
                                          test = true;
                                    }
                              };
                              return test;
                        }
                  });
                  $tags['get']().then(function(response) {
                        $scope.tags = response;
                        $scope.newTags = [];
                        for (var i = 0; i < $scope.tags.length; i++) {
                              if ($scope.tags[i].id) {
                                    $scope.newTags.push($scope.tags[i]);
                              }
                        };
                        var tagsNames = new Bloodhound({
                              datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                              queryTokenizer: Bloodhound.tokenizers.whitespace,
                              local: $scope.tags
                        });
                        tagsNames.initialize();
                        $('.search-all-tags').typeahead({
                              hint: true,
                              highlight: true,
                              minLength: 1
                        }, {
                              name: 'tagnames',
                              displayKey: 'name',
                              valueKey: 'name',
                              source: tagsNames.ttAdapter()
                        });
                  });
                  // Details
                  $timeout(function() {
                        $('.colorpicker-edit').colorpicker({
                              format: 'hex'
                        });
                        $scope.description = $scope.details.description ? $sce.trustAsHtml($scope.details.description) : $scope.details.description;
                  }, 10);
                  // Tatics
                  if ($scope.details.teamsWithTatics.length) {
                        if ($scope.details.teamsWithTatics[0].id) {
                              $scope.details.teamsWithTatics.unshift({
                                    id: '',
                                    name: 'Todos'
                              });
                        }
                  }
                  $scope.selectedTeamModel = '';
                  $timeout(function() {
                        var $this = $('.select-teams'),
                              opts = {
                                    showFirstOption: attrDefault($this, 'first-option', true),
                                    'native': attrDefault($this, 'native', false),
                                    defaultText: attrDefault($this, 'text', ''),
                              };
                        $this.addClass('visible');
                        $this.selectBoxIt(opts);
                        $('[data-toggle="tooltip"]').tooltip();
                  }, 10);
                  $cycles['get']($scope.details.id).then(function(response) {
                        $scope.cycles = response;
                        if ($scope.cycles.length) {
                              if ($scope.cycles[0].id) {
                                    $scope.cycles.unshift({
                                          id: '',
                                          name: 'Todos'
                                    });
                              }
                        }
                        $scope.selectedCycleModel = '';
                        $timeout(function() {
                              var $this = $('.select-cycle'),
                                    opts = {
                                          showFirstOption: attrDefault($this, 'first-option', true),
                                          'native': attrDefault($this, 'native', false),
                                          defaultText: attrDefault($this, 'text', ''),
                                    };
                              $this.addClass('visible');
                              $this.selectBoxIt(opts);
                        }, 10);
                        $scope.newCycles = [];
                        for (var i = 0; i < $scope.cycles.length; i++) {
                              if ($scope.cycles[i].id) {
                                    $scope.newCycles.push($scope.cycles[i]);
                              }
                        };
                        $timeout(function() {
                              var $this = $('.select2.usuario'),
                                    opts = {
                                          allowClear: attrDefault($this, 'allowClear', false)
                                    };
                              $this.select2(opts);
                              $this.addClass('visible');
                              $('.multi-select.users').multiSelect();
                              $('.multi-select.cycles').multiSelect();
                        }, 10);
                        $tags['get']().then(function(response) {
                              $scope.$parent.tags = response;
                              $timeout(function() {
                                    var tagsNames = new Bloodhound({
                                          datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                                          queryTokenizer: Bloodhound.tokenizers.whitespace,
                                          local: response
                                    });
                                    tagsNames.initialize();
                                    $('.input-tags').tagsinput({
                                          typeaheadjs: {
                                                name: 'tagnames',
                                                displayKey: 'name',
                                                valueKey: 'name',
                                                source: tagsNames.ttAdapter()
                                          }
                                    });
                                    $('#form-tatic').on('keyup keypress', function(e) {
                                          var keyCode = e.keyCode || e.which;
                                          if (keyCode === 13) {
                                                e.preventDefault();
                                                return false;
                                          }
                                    });
                                    $('.input-tags').on('itemAdded', function(event) {
                                          var tag = event.item;
                                    });
                              }, 10);
                        });
                        var doAfterGetAllTeams = function() {
                              $scope.newTeams = [];
                              for (var i = 0; i < $scope.teams.length; i++) {
                                    if ($scope.teams[i].id) {
                                          $scope.newTeams.push($scope.teams[i]);
                                    }
                              };
                              $timeout(function() {
                                    var $this = $('.select2.times'),
                                          opts = {
                                                allowClear: attrDefault($this, 'allowClear', false)
                                          };
                                    $this.select2(opts);
                                    $this.addClass('visible');
                              }, 10);
                        }
                        if (!$scope.teams || $scope.teams == 0) {
                              $teams['getAllTeams']().then(function(response) {
                                    $scope.teams = response;
                                    doAfterGetAllTeams();
                              });
                        } else {
                              doAfterGetAllTeams();
                        }
                        $scope.newWeight = 1;
                        $scope.numberLessNew = function() {
                              var val = $scope.newWeight;
                              var newVal = val > 1 ? val - 1 : 1;
                              $scope.newWeight = newVal;
                        }
                        $scope.numberMoreNew = function() {
                              var val = $scope.newWeight;
                              var newVal = val < 10 ? val + 1 : 10;
                              $scope.newWeight = newVal;
                        }
                        $('#new-tatic .select2').select2('destroy');
                        $('#new-tatic .multi-select.users').multiSelect('destroy');
                        $('#new-tatic .multi-select.cycles').multiSelect('destroy');
                        $('#new-tatic .multi-select.cycles').val(0);
                        if ($('#new-tatic .input-tags').prev().is('.bootstrap-tagsinput')) {
                              $('#new-tatic .input-tags').tagsinput('destroy');
                        }
                        $('#new-tatic').modal('show', {
                              backdrop: 'static'
                        });
                  });
            });
      }
      $scope.empLogoUpload = function() {
            $('#emp-logo-image').val('');
            $('#emp-logo-user-img .error-message').addClass('hide');
            if ($scope.empLogoUploadValidate) {
                  $scope.empLogoUploadValidate.resetForm();
                  $('.validate-has-error').each(function() {
                        $(this).removeClass('validate-has-error');
                  });
            }
            $('#emp-logo-user-img').modal('show', {
                  backdrop: 'static'
            });
            setInterval(function() {
                  $("#form_img_user").find("#progress_user").removeClass("show");
                  $("#form_img_user").find("#progress_user").css("display", "none");
                  $("#form_img_user").find("#log_emp_user_form").removeClass("hide");
            }, 300);
      }
      $scope.empLogoUploadValidate = $("#form_img_user").validate({
            rules: {
                  imagem: {
                        required: true,
                        extension: "png|jpe?g|gif"
                  }
            },
            submitHandler: function(userform) {
                  var formData = new FormData($("form#form_img_user")[0]);
                  $users['emplogoupload'](formData).then(function(response) {
                        $("#logo_empresa_view").attr('src', response.path);
                        $("#logo_empresa_view_main").attr('src', response.path);
                        $("#emp-logo-image").val('');
                        $("#submit_img").attr('disabled', false);
                        $("#submit_img").html('Salvar');
                        $("form#form_img_user")[0].reset();
                  });
            }
      });
      $scope.userDetailImage = false;
      $('#user-image').change(function(event) {
            var tmppath = URL.createObjectURL(event.target.files[0]);
            $timeout(function() {
                  $scope.userDetailImage = tmppath;
            });
      });
      $scope.addgoaltypefun = function(type) {
            $scope.addgoaltype = type;
            $scope.okr();
      }
});
elofy.controller('novaAvaliacaoCtrl', function globalCtrl($scope, $timeout, $users, $years, $cycles, $tatics, $assessments, $dashboard, $translate) {
      $users['get']().then(function(users) {
            users.unshift({
                  id: '',
                  name: 'UsuÃ¡rio'
            });
            $scope.selectedUser = '';
            $scope.users = users;
            $timeout(function() {
                  var $teams = $('.select-user');
                  $teams.addClass('visible');
                  $teams.selectBoxIt();
            }, 10);
      });
      $users['me']().then(function(me) {
            $scope.me = me;
            if ($scope.me.admin == 'true') {
                  $users['adminusuariosTime']().then(function(adminusuariosTime) {
                        $scope.adminusuarios = adminusuariosTime;
                  });
            } else {
                  $users['nonadminusuariosTime']().then(function(nonadminusuariosTime) {
                        $scope.adminusuarios = nonadminusuariosTime;
                  });
            }
      });
      $scope.selectedYear = new Date().getFullYear();
      $years['get']().then(function(years) {
            $scope.$parent.years = years;
            $timeout(function() {
                  var $years = $('.select-year');
                  $years.addClass('visible');
                  $years.selectBoxIt();
            }, 10);
            $cycles['getByYear']($scope.selectedYear).then(function(cycles) {
                  cycles.unshift({
                        id: '',
                        name: 'Trimestre'
                  });
                  $scope.selectedCycle = '';
                  $scope.cycles = cycles;
                  $timeout(function() {
                        var $cycles = $('.select-cycle');
                        $cycles.addClass('visible');
                        $cycles.selectBoxIt();
                  }, 10);
            });
      });
      $scope.changeYear = function() {
            $cycles['getByYear']($scope.selectedYear).then(function(cycles) {
                  cycles.unshift({
                        id: '',
                        name: 'Trimestre'
                  });
                  $scope.selectedCycle = '';
                  $scope.cycles = cycles;
                  if ($('.select-cycle').hasClass('visible')) {
                        var selectBox = $(".select-cycle").data("selectBox-selectBoxIt");
                        $('.select-cycle').removeClass('visible');
                        selectBox.destroy();
                  }
                  $timeout(function() {
                        var $cycles = $('.select-cycle');
                        $cycles.addClass('visible').selectBoxIt();
                  }, 10);
            });
      }
      $dashboard['get']({
            team: $scope.selectedTeam,
            year: $scope.selectedYear,
            cycle: $scope.selectedCycle
      }).then(function(dash) {
            $scope.dash = dash;
            $scope.dash.pd_level = dash.PDLevelGraph;
            $scope.dash.userperformanceReview = dash.userperformanceReview;
            $scope.dash.geralGraph = dash.geralGraph;
            $timeout(function() {
                  $('#competenciasTb').niceScroll({
                        cursorcolor: "#03a9f4",
                        cursorborder: "none"
                  });
                  $scope.initPerDash();
            }, 10);
      });
      $scope.userReviewOverview = function(user_id, avalicao_id) {
            $scope.activetab = 1;
            $cycles['GetReviewById'](user_id, avalicao_id, $scope.selectedTeam, $scope.selectedYear, $scope.selectedCycle).then(function(userreviews) {
                  $scope.userreviews = userreviews;
            });
      }
      $scope.lastevaluations = function(userid, nome_cargo) {
            $(".view_dv_top .profile_section").toggleClass('open_panel');
            /* $(".view_dv_top .profile_section .showusserpanel").toggleClass('hide'); */
            $scope.userid = userid;
            $scope.nome_cargo = nome_cargo;
            $users['details']($scope.userid).then(function(userdetail) {
                  $scope.userdetail = userdetail;
                  $users['lastevaluations']($scope.userid).then(function(lastevaluations) {
                        $scope.evaluations = lastevaluations;
                        $scope.activetab = 1;
                  });
                  $users['my_performance_potencial_profile']($scope.userid).then(function(response) {
                        $scope.performance_potencial = response;
                  });
            });
      };
      $scope.showuserpanel = function() {
            $(".view_dv_top .profile_section").toggleClass('open_panel');
      };
      $scope.backlastevaluations = function(userid) {
            $scope.activetab = 1;
      };
      $scope.showperformance = function(id_protocolo_avaliacao, id_ciclo, year, cyclename) {
            $scope.id_protocolo_avaliacao = id_protocolo_avaliacao;
            $scope.id_ciclo = id_ciclo;
            $scope.year = year;
            $scope.cyclename = cyclename;
            $scope.savecurrentsession($scope.userid, id_protocolo_avaliacao, id_ciclo, year);
      };
      $scope.backshowperformance = function() {
            $scope.activetab = 2;
      };
      $scope.savecurrentsession = function(userid, id_protocolo_avaliacao, id_ciclo, year) {
            $users['savecurrentsession'](userid, id_protocolo_avaliacao, id_ciclo, year).then(function(response) {
                  $tatics['user_goals']($scope.userid, $scope.selectedYear, $scope.selectedCycle).then(function(tatics) {
                        $scope.tatics = tatics;
                        $scope.activetab = 2;
                  });
            });
      };
      $scope.savenewperformance = function() {
            var $newperformances = jQuery('#performance_form').serialize();
            $users['savenewperformance']($newperformances).then(function(response) {});
      };
      $scope.showpotential = function(userid) {
            $scope.activetab = 3;
            $scope.savenewperformance();
            $users['userpotential']($scope.userid).then(function(response) {
                  $scope.userpotentialquestions = response;
            });
      };
      $scope.backshowpotential = function(userid) {
            $scope.activetab = 3;
      };
      $('#performance_form').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  $scope.activetab = 3;
                  $scope.savenewperformance();
                  $users['userpotential']($scope.userid).then(function(response) {
                        $scope.userpotentialquestions = response;
                  });
            }
      });
      $('#potencial_form').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  $scope.showskills();
            }
      });
      $scope.savepotentialanswers = function() {
            var $answers = jQuery('#potencial_form').serialize();
            $users['savepotentialanswers']($answers).then(function(response) {});
      };
      $scope.showskills = function(userid) {
            $scope.activetab = 4;
            $scope.savepotentialanswers();
            $users['userskills']($scope.userid).then(function(response) {
                  $scope.skills = response;
            });
      };
      $scope.backshowskills = function(userid) {
            $scope.activetab = 4;
      };
      $scope.saveskills = function() {
            var $skills = jQuery('#saveskills_form').serialize();
            $users['saveskills']($skills).then(function(response) {});
      };
      $(".avaliacao-points").click(function() {
            $(this).find("input").prop('attr', 'checked');
      });
      $('#saveskills_form').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  $scope.showpdi();
            }
      });
      $scope.showpdi = function(userid) {
            $scope.activetab = 5;
            $scope.saveskills();
            $users['userpdi']().then(function(response) {
                  $scope.userobjectives = response.global;
                  $scope.avaliacoes = response.avaliacoes;
                  $scope.tatics = response.tatics;
            });
      };
      $scope.savegeral = function() {
            var $geral = jQuery("#pdi_form input[name='geral']:checked").val();
            var $avaliacao_quali = jQuery("#avaliacao_quali").val();
            $users['savegeral']($geral, $avaliacao_quali).then(function(response) {
                  $users['details']($scope.userid).then(function(userdetail) {
                        $scope.userdetail = userdetail;
                        $users['lastevaluations']($scope.userid).then(function(lastevaluations) {
                              $scope.evaluations = lastevaluations;
                              $scope.activetab = 1;
                        });
                        $users['my_performance_potencial_profile']($scope.userid).then(function(response) {
                              $scope.performance_potencial = response;
                        });
                  });
                  toastr.success('Avaliação enviada..');
            });
      };
      $('#pdi_form').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  $scope.savegeral();
            }
      });
      $("label.btn.btn-success.btn-success-act.skills").click(function() {
            $(this).parents("tr").find("label.btn.btn-success.btn-success-act.skills").removeClass('active');
            $(this).toggleClass('active');
      });
      $("label.btn.btn-success.btn-success-act.ratting").click(function() {
            $(this).parents(".avaliacao-panel").find("label.btn.btn-success.btn-success-act.ratting").removeClass('active');
            $(this).toggleClass('active');
      });
      // modal novo okr
      $scope.okr = function() {
            $('#form-okr')[0].reset();
            $('#new-okr-avaliacao select.usuario-okr').select2('destroy');
            $('#new-okr-avaliacao select.usuario-okr').val($scope.userid);
            $('#new-okr-avaliacao select.usuario-okr').select2({
                  allowClear: true
            }).addClass('visible');
            $('#new-okr-avaliacao select.times-okr').select2({
                  allowClear: true
            }).addClass('visible');
            $('#new-okr-avaliacao').modal('show', {
                  backdrop: 'static'
            });
      }
      // Validacao Novo Okr
      $('#new-okr-avaliacao #form-okr').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: 'required',
                  time: 'required',
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        parent_id: 0,
                        name: $('#new-okr-avaliacao #okr-name').val(),
                        description: $('#new-okr-avaliacao #okr-description').val(),
                        user: $('#new-okr-avaliacao #okr-user').val(),
                        team: $('#new-okr-avaliacao #okr-team').val(),
                        weight: 1,
                        cycles: [$scope.id_ciclo]
                  }
                  $('#new-okr-avaliacao #form-okr .salvar').button('loading');
                  $tatics['insert'](data).then(function(response) {
                        var newId = response.tatics[response.tatics.length - 1].id;
                        $('#new-okr-avaliacao #form-okr')[0].reset();
                        $('#new-okr-avaliacao #new-okr').modal('hide');
                        $('#new-okr-avaliacao #form-okr-tatic .salvar').button('reset');
                        $users['userpdi']().then(function(response) {
                              $scope.tatics = response.tatics;
                        });
                        $('#new-okr-avaliacao').modal('hide');
                  });
            }
      });
      $scope.updateProgress = function(id, progressmodel) {
            $tatics['editProgress'](id, progressmodel).then(function(result) {
                  $scope.result = result;
                  alert($scope.result);
            });
      }
      $scope.statusText = function(value) {
            var items = ['Pendente', 'Finalizado', 'Cancelado', 'Em andamento'];
            return items[value];
      }
      $scope.filter_year = (new Date()).getFullYear();
      $scope.dashfilter = function() {
            $scope.filter_year = $scope.selectedYear;
            var data = {
                  user: $scope.selectedUser,
                  year: $scope.selectedYear,
                  cycle: $scope.selectedCycle
            }
            $scope.activetab = 0;
            $dashboard['get']({
                  team: $scope.selectedTeam,
                  year: $scope.selectedYear,
                  cycle: $scope.selectedCycle
            }).then(function(dash) {
                  $scope.dash = dash;
                  $scope.dash.pd_level = dash.PDLevelGraph;
                  $scope.dash.userperformanceReview = dash.userperformanceReview;
                  $scope.dash.geralGraph = dash.geralGraph;
                  $timeout(function() {
                        $scope.initPerDash();
                  }, 10);
            });
            $scope.initPerDash();
      }
      $scope.filter = function() {
            $('.filtrar').button('loading');
            if (!$scope.selectedCycle) {
                  $('select.select-cycle').parent().addClass('validate-has-error');
                  $('.filtrar').button('reset');
                  return;
            } else {
                  $('select.select-cycle').parent().removeClass('validate-has-error');
            }
            var data = {
                  user: $scope.selectedUser,
                  year: $scope.selectedYear,
                  cycle: $scope.selectedCycle
            }
            $assessments['okr'](data).then(function(tatics) {
                  $scope.tatics = tatics;
            });
      }
      var PerformanceChart
      $scope.initPerDash = function() {
            // performance review chart start //
            PerformanceChart = c3.generate({
                  bindto: '#performance_bar_chart',
                  data: {
                        x: 'x',
                        columns: $scope.dash.pd_level,
                        type: 'bar',
                  },
                  bar: {
                        width: {
                              ratio: 0.1
                        }
                  },
                  axis: {
                        x: {
                              tick: {
                                    //format: d3.format("low,")
                                    format: function(id) {
                                          if (id == 0) {
                                                return "Low";
                                          } else if (id == 1) {
                                                return "Medium";
                                          } else if (id == 2) {
                                                return "High";
                                          }
                                    }
                              }
                        }
                  }
            });
            // performance review chart end here //
            // geral pie chart start here //
            var chart = c3.generate({
                  bindto: '#geral_pie_chart',
                  data: {
                        columns: $scope.dash.geralGraph,
                        type: 'donut',
                  },
                  donut: {
                        title: "Rating"
                  }
            });
            // geral pie chart end here //
      }
      $scope.change = function(taticId, value) {
            var data = {
                  id: taticId,
                  avaliacao: value
            }
            $assessments['edit'](data).then(function(response) {
                  $('.filtrar').button('reset');
                  for (var i = 0, leng = $scope.tatics.length; i < leng; i++) {
                        if (taticId == $scope.tatics[i].id) {
                              $scope.tatics[i].avaliacao = response.avaliacao;
                        }
                  }
            });
      }
});
elofy.controller('organogramaCtrl', function globalCtrl($scope, $timeout, $globals, $teams, $translate) {
      $scope.globalId = id_global;
      $globals['tree']($scope.globalId).then(function(response) {
            $scope.tree = response;
      });
});
elofy.controller('resultsCtrl', function globalCtrl($scope, $rootScope, $cycleConfiguration, $results, $pesquisaquestion, $timeout, $filter, $location, $globals, $users, $teams, $years, $cycles, $tatics, $key, $tags, $activities, $integration, $translate) {
      $scope.calibratedSelectedAverage = 'n/d';
      $scope.Number = Number;
      $rootScope.reopenData = [];
      $cycleConfiguration['getNiveisByEmpresaId']().then(function(res) {
            $scope.niveis = res;
            setTimeout(function() {
                  $('#selected_user_level').select2();
                  $('#selected_user_level').change(function() {});
            }, 400);
      });
      $scope.$parent.$watch('users', function(newVal, oldVal) {
            if (newVal) {
                  $scope.gestors = JSON.parse(JSON.stringify(newVal));
                  setTimeout(function() {
                        $('#search-gestor').select2();
                  }, 400);
            }
      });
      // $scope.isFiltered = false;
      $scope.modalCarreira = function(id_user, id_cicle) {
            // console.log("teste ->", id_user, id_cicle);
            $("html, body").animate({
                  scrollTop: 0
            }, "slow");
            $timeout(function() {
                  $scope.carreiraUrl = baseurl + "carreira/" + id_user + "/" + id_cicle + "/" + "1";
                  console.log("look:", $scope.carreiraUrl);
                  $('#carreira-modal').fadeIn(400);
            }, 200);
      }
      $scope.closeCarreira = function() {
            $scope.carreiraUrl = "";
            $('#carreira-modal').fadeOut(300);
      }
      $scope.changeSelectedUserLevel = function() {
            angular.forEach($scope.niveis, function(result, key) {
                  if (result['nivel'] == $('#selected_user_level').val()) result.added = true;
            });
            // $scope.filterItem();
      }
      $scope.isFilteredNivel = function() {
            var ret = false;
            angular.forEach($scope.niveis, function(result, key) {
                  if(result.added == true) ret = true;
            });
            return ret;
      }

      $scope.isSelectedFilter = function() {
            if ($('#search-user').val() != null || $('#search-team').val() != null || $('#search-cycle').val() != null || $('#search-gestor').val() != null || $scope.isFilteredNivel()) {
                  return true;
            } else {
                  return false;
            }
      }
/*
      $scope.restartSelectFromSuggestion = function() {
            setTimeout(function() {
                  $('.suggestion').each(function(i, obj) {
                        if (!$(obj).data("select2")) {
                              $(obj).select2({
                                    placeholder: 'Sugestão',
                                    language: 'pt-BR',
                                    maximumSelectionSize: 1
                              });
                        }
                  });
            }, 100);
      }
*/
      $scope.testIfUndefinedOrNullOrZero = function(val) {
            return val == null || Number(val) == 0;
      }
/*
      $scope.filterUser = function(elem) {
            if ($scope.selectedUser && $scope.selectedUser.length > 0) {
                  $scope.restartSelectFromSuggestion();
                  return $scope.selectedUser.indexOf(elem.id_usuario_avaliado) > -1;
            } else {
                  $scope.restartSelectFromSuggestion();
                  return true;
            }
      }
      $scope.filterTeam = function(elem) {
            if ($scope.selectedTeam && $scope.selectedTeam.length > 0) {
                  $scope.restartSelectFromSuggestion();
                  return $scope.selectedTeam.indexOf(elem.id_time) > -1;
            } else {
                  $scope.restartSelectFromSuggestion();
                  return true;
            }
      }
      $scope.filterCycle = function(elem) {
            if ($scope.selectedCycles && $scope.selectedCycles.length > 0) {
                  $scope.restartSelectFromSuggestion();
                  return $scope.selectedCycles.indexOf(elem.id_revisao_ciclo) > -1;
            } else {
                  $scope.restartSelectFromSuggestion();
                  return true;
            }
      }
      $scope.filterNivel = function(elem) {
            var added = false;
            angular.forEach($scope.niveis, function(result, key) {
                  if (result['added'] && result['added'] == true) added = true;
            });
            if (added) {
                  $scope.restartSelectFromSuggestion();
                  return $scope.nivelIsAdded(elem.nivel);
            } else {
                  $scope.restartSelectFromSuggestion();
                  return true;
            }
      }
      $scope.filterGestor = function(elem) {
            if ($scope.notGestor) {
                  $scope.restartSelectFromSuggestion();
                  return elem.tipo_cargo != 4;
            } else {
                  $scope.restartSelectFromSuggestion();
                  return true;
            }
      }
      $scope.nivelIsAdded = function(n) {
            var ret = false;
            angular.forEach($scope.niveis, function(result, key) {
                  if (result['nivel'] == n && result['added'] && result['added'] == true) ret = true;
            });
            return ret;
      }
*/

      $scope.reset = function() {
            delete $scope.selectedUser;
            delete $scope.selectedTeam;
            delete $scope.selectedCycle;
            angular.forEach($scope.niveis, function(result, key) {
                  result['added'] = undefined;
            });
            $scope.notGestor = true;
            $scope.allusers = false;
            $scope.alltags = false;
            $scope.allteams = false;
            $('#selected_user_level').select2('val', '');
            $('#search-user').select2('val', '');
            $('#search-gestor').select2('val', '');
            $('#selectd_tags').select2('val', '');
            $('#search-team').select2('val', '');
            $('#search-cycle').select2('val', '');
            // $scope.isFiltered = false;
            $scope.results = [];
      }

/*
      $scope.filterItem = function() {
            if ($('#search-user').val() != null || $('#search-team').val() != null || $('#search-cycle').val() != null || $scope.isFilteredNivel()) {
                  $scope.isFiltered = true;
            } else {
                  $scope.isFiltered = false;
            }
      }
      $('#div-1 #search-user').change(function() {
            $scope.filterItem();
            // $scope.restartSelectFromSuggestion();
      });
      $('#form-search #selectd_tags').change(function() {
            console.log("change");
            $scope.restartSelectFromSuggestion();
      });
      $('#div-1 #search-team').change(function() {
            $scope.filterItem();
            // $scope.restartSelectFromSuggestion();
      });
      $('#div-1 #search-cycle').change(function() {
            $scope.filterItem();
            // $scope.restartSelectFromSuggestion();
      });
*/

      $scope.openSidebar = function(res, type) {
            $cycleConfiguration['getReguaByCycleId'](res.id_revisao_ciclo).then(function(results) {
                  $scope.selected_cycle_ruler = results;
            });
            $scope.selectedResult = res;
            $scope.selectedType = type;
            $scope.openSideBarMenu = true;
            $scope.currentSelectedOriginalAverage = res.valores_gestor;
            if (type == "competencias") $scope.currentSelectedOriginalAverage = res.competencias_gestor;
            if (type == "resultados") $scope.currentSelectedOriginalAverage = res.resultados_gestor;
            $results['getSingleScoresByRevisaoCicloId'](res.id_revisao_ciclo, res.id_usuario_avaliado, type).then(function(response) {
                  //$scope.selectedSingleScores = response;
                  $scope.selectedSingleScores = [];
                  $scope.currentSelectedAverage = 0;
                  //        $scope.calibratedSelectedAverage = 0;
                  $scope.calibratedSelectedAverage = res[type + '_gestor_calibrado'] ? res[type + '_gestor_calibrado'] : 0;
                  angular.forEach(response, function(result, key) {
                        $scope.currentSelectedAverage += Number((result.score_calibrado) ? result.score_calibrado : result.score);
                        $scope.selectedSingleScores[key] = {
                              'score': result.score,
                              'score_calibrado': result.score_calibrado,
                              'id': result.id_competencia,
                              'name': result.name,
                              'id_revisao_ciclo_avaliacoes_fase': result.id_revisao_ciclo_avaliacoes_fase
                        };
                  });
                  $scope.currentSelectedAverage = $scope.currentSelectedAverage / $scope.selectedSingleScores.length;
            });
      }
      $scope.recalculateAverages = function(inputedValue) {
            if (inputedValue == '') return;
            $scope.calibratedSelectedAverage = 0;
            var length = 0;
            angular.forEach($scope.selectedSingleScores, function(result, key) {
                  var addingValue = result.score;
                  // console.log("result", result);
                  if (result.score_calibrado && result.score_calibrado > 0) addingValue = result.score_calibrado;
                  if (result.calibratedScoreModel && result.calibratedScoreModel > 0) addingValue = result.calibratedScoreModel;
                  if (result.calibratedScoreModelTemp && result.calibratedScoreModelTemp > 0) addingValue = result.calibratedScoreModelTemp;
                  // console.log("addingValue", addingValue, "::", result.score, result.score_calibrado, result.calibratedScoreModel, result.calibratedScoreModelTemp);
                  if (addingValue == 0) return; // continue
                  length++;
                  $scope.calibratedSelectedAverage += Number(addingValue);
            });
            $scope.calibratedSelectedAverage = $scope.calibratedSelectedAverage / length;
      }
      $scope.closeSidebar = function() {
            // console.log("closingSideBar");
            $scope.openSideBarMenu = false;
      }
      $scope.calibrateGrades = function(newAverage) {
            $scope.selectedResult[$scope.selectedType + '_gestor_calibrado'] = newAverage;
            var onlyCalibratedScores = $scope.selectedSingleScores.filter(function(elem, i, array) {
                  if (elem.calibratedScoreModelTemp) {
                        elem.score_calibrado = elem.calibratedScoreModelTemp;
                        return true;
                  } else return false;
            });
            $results['saveCalibratedScores'](onlyCalibratedScores).then(function(response) {
                  if (response.success == true) toastr.success("Nota(s) Calibrada(s)");
                  else toastr.error("Ocorreu algum problema ao calibrar a(s) nota(s)");
                  $results['saveCalibratedAverage']($scope.selectedResult.id_revisao_ciclo_score, newAverage, ($scope.selectedType + '_gestor_calibrado')).then(function(response) {
                        $scope.closeSidebar();
                  });
            });
      }
      $scope.saveSuggestion = function(result) {
            $results['saveScoreSuggestion'](result.id_revisao_ciclo_score, result.suggestionModel[0]).then(function(response) {
                  if (response == true) toastr.success("Sugestão salva");
                  else toastr.error("Ocorreu algum problema ao salvar");
            });
      }
      $scope.reopenType = "reopen";
      $scope.selectedChecks = [];
      $scope.reOpen = function(idrc, idua) {
            $scope.selectedChecks = [];
            $scope.reopenType = "reopen";
            $("#reopen-type").val("reopen");
            // var data = JSON.stringify(data);
            $.post(baseurl + 'reOpenResult', {
                  idrc: idrc,
                  idua: idua
            }, function(data, success) {
                  console.log("success:" + data + idrc, idua);
                  $scope.reopenData = JSON.parse(data);
                  $timeout(function() {
                        $('#reopen-modal').modal('show', {
                              backdrop: 'static'
                        });
                  }, 200);
            });
      }
      $scope.changeReopenType = function() {
            $(".reopenCheck").removeAttr("checked");
            $scope.selectedChecks = [];
            if ($scope.reopenType == "delete") $(".reopenCheck").removeAttr("disabled");
            if ($scope.reopenType == "reopen") $(".checkDisabled").attr("disabled", "true");
      }
      $scope.changeCheckBox = function(primaryk, checkFlag) {
            console.log("primaryk", primaryk, checkFlag);
            if (checkFlag) {
                  $scope.selectedChecks.push(primaryk);
            } else {
                  for (var i = 0; i < $scope.selectedChecks.length; i++) {
                        if ($scope.selectedChecks[i] == primaryk) $scope.selectedChecks.splice(i, 1);
                  }
            }
            console.log("arr:", $scope.selectedChecks);
      }
      $scope.saveReopenData = function() {
            if (!$scope.selectedChecks.length) {
                  alert("You need to select item to save!");
                  return;
            }
            console.log("Save:", $scope.reopenType, $scope.selectedChecks);
            var data = JSON.stringify($scope.selectedChecks);
            $.post(baseurl + 'saveReopenData', {
                  data: data,
                  type: $scope.reopenType
            }, function(data, success) {
                  console.log("successfully saved", data);
                  $(".btn-white").click();
            });
      }
      // $scope.genpdf = function(result, url) {
      //       console.log("used url!");
      //       var data = JSON.stringify(result);
      //       var strJSON = encodeURIComponent(data);
      //       window.open(baseurl + 'genpdf/' + strJSON, '_blank');
      // }
      $scope.genpdf = function(result) {
            console.log("used form!");
            $scope.id_usuario_avaliado = result.id_usuario_avaliado;
            $scope.id_revisao_ciclo = result.id_revisao_ciclo;
            setTimeout(function() {
                  $('#form-generate-pdf').submit();
            }, 100);
      }
      
      $('#chekd6').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-user > option").prop("selected", "selected");
            } else {
                  $("#search-user > option").removeAttr("selected");
            }
            $("#search-user").trigger("change");
      });
      $('#chekd7').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-team > option").prop("selected", "selected");
            } else {
                  $("#search-team > option").removeAttr("selected");
            }
            $("#search-team").trigger("change");
      });
/*
      $scope.listTable = function() {
            var teamsCheck = setInterval(function() {
                  if ($scope.teams) {
                        clearInterval(teamsCheck);
                        console.log("team", $scope.teams);
                        // results loadup
                        $scope.teamsIdList = [];
                        angular.forEach($scope.teams, function(result, key) {
                              $scope.teamsIdList.push(result.id);
                        });
                        $results['list']($scope.teamsIdList).then(function(response) {
                              $scope.results = response;
                              angular.forEach($scope.results, function(result, key) {
                                    if ($scope.results[key].id_recomendacao && $scope.results[key].id_recomendacao > 0) $scope.results[key].suggestionModel = [$scope.results[key].id_recomendacao];
                                    var averageKeys = ['valores_gestor', 'valores_par', 'valores_auto', 'resultados_gestor', 'resultados_par', 'resultados_auto', 'competencias_gestor', 'competencias_par', 'competencias_auto', 'potencial_gestor', 'potencial_par', 'potencial_auto', 'survey_gestor', 'survey_par', 'survey_auto'];
                                    $scope.results[key].total_average = 0;
                                    angular.forEach(averageKeys, function(akey, index) {
                                          $scope.results[key].total_average += Number(result[akey]);
                                    });
                                    $scope.results[key].total_average = ($scope.results[key].total_average / averageKeys.length).toFixed(2);
                                    $timeout(function() {
                                          $('.suggestion').each(function(i, obj) {
                                                if (!$(obj).data("select2")) {
                                                      $(obj).select2({
                                                            placeholder: 'Sugestão',
                                                            language: 'pt-BR',
                                                            maximumSelectionSize: 1
                                                      });
                                                }
                                          });
                                    }, 500);
                              });
                        });
                  }
            }, 200);
      }
*/
      $scope.getUserIds = function() {
            var user_id = [];
            user_id = $('#search-user').val();
            if (user_id && user_id.length > 0) {
                  user_id = user_id.join(',');
            }
            return user_id;
      }
      $scope.getGestorIds = function() {
            var gestor_id = [];
            gestor_id = $('#search-gestor').val();
            if (gestor_id && gestor_id.length > 0) {
                  gestor_id = gestor_id.join(',');
            }
            return gestor_id;
      }
      $scope.getTeamIds = function() {
            var team_id = [];
            team_id = $('#search-team').val();
            if (team_id && team_id.length > 0) {
                  team_id = team_id.join(',');
            }
            return team_id;
      }
      $scope.getCycleIds = function() {
            var cycle_id = [];
            cycle_id = $('#search-cycle').val();
            if (cycle_id && cycle_id.length > 0) {
                  cycle_id = cycle_id.join(',');
            }
            return cycle_id;
      }
      $scope.getNivelIds = function() {
            var nivel_id = [];
            angular.forEach($scope.niveis, function(result, key) {
                  if(result.added == true) nivel_id.push(result.nivel);
            });
            if (nivel_id && nivel_id.length > 0) {
                  nivel_id = nivel_id.join(',');
            } else {
                  nivel_id = null;
            }
            return nivel_id;
      }

      // $scope.listTable();
      $scope.applyFilter = function() {
            if (!$scope.isSelectedFilter()) {
                  alert("Por favor, selecione ao menos um parâmetro de pesquisa!");
                  return;
            }
            var user_id = [];
            user_id = $('#search-user').val();
            if (user_id && user_id.length > 0) {
                  user_id = user_id.join(',');
            }
            var gestor_id = [];
            gestor_id = $('#search-gestor').val();
            if (gestor_id && gestor_id.length > 0) {
                  gestor_id = gestor_id.join(',');
            }
            var team_id = [];
            team_id = $('#search-team').val();
            if (team_id && team_id.length > 0) {
                  team_id = team_id.join(',');
            }
            var cycle_id = [];
            cycle_id = $('#search-cycle').val();
            if (cycle_id && cycle_id.length > 0) {
                  cycle_id = cycle_id.join(',');
            }
            var nivel_id = [];
            angular.forEach($scope.niveis, function(result, key) {
                  if(result.added == true) nivel_id.push(result.nivel);
            });
            if (nivel_id && nivel_id.length > 0) {
                  nivel_id = nivel_id.join(',');
            } else {
                  nivel_id = null;
            }
            $results['list'](user_id, team_id, cycle_id, nivel_id, gestor_id, $scope.notGestor).then(function(response) {
                  $scope.results = response;
                  angular.forEach($scope.results, function(result, key) {
                        if ($scope.results[key].id_recomendacao && $scope.results[key].id_recomendacao > 0) $scope.results[key].suggestionModel = [$scope.results[key].id_recomendacao];
                        var averageKeys = ['valores_gestor', 'valores_par', 'valores_auto', 'resultados_gestor', 'resultados_par', 'resultados_auto', 'competencias_gestor', 'competencias_par', 'competencias_auto', 'potencial_gestor', 'potencial_par', 'potencial_auto', 'survey_gestor', 'survey_par', 'survey_auto'];
                        $scope.results[key].total_average = 0;
                        angular.forEach(averageKeys, function(akey, index) {
                              $scope.results[key].total_average += Number(result[akey]);
                        });
                        $scope.results[key].total_average = ($scope.results[key].total_average / averageKeys.length).toFixed(2);
                        $timeout(function() {
                              $('.suggestion').each(function(i, obj) {
                                    if (!$(obj).data("select2")) {
                                          $(obj).select2({
                                                placeholder: 'Sugestão',
                                                language: 'pt-BR',
                                                maximumSelectionSize: 1
                                          });
                                    }
                              });
                        }, 500);
                  });
            });
      }
      setTimeout(function() {
            $("#search-user").select2();
            $("#search-gestor").select2();
            $('#search-team').select2();
            $('#search-cycle').select2();
            $('#calibrateTip').hide();
      }, 300);
      setInterval(function() {
            var found = false;
            $('.calibrate').each(function() {
                  if ($(this).is(':hover')) {
                        found = true;
                        $('#calibrateTip').offset({
                              top: $(this).find('i').offset().top - 35,
                              left: $(this).find('i').offset().left - 80
                        });
                        if (!$('#calibrateTip').is(":visible")) $('#calibrateTip').show(400);
                  }
            });
            if (!found) $('#calibrateTip').hide();
      }, 300);
      $pesquisaquestion['getAllTagsPesquisa']().then(function(res) {
            $scope.teamTags = res;
            setTagField($('#selectd_tags'), $("#search-team"), $('#chekd_tags'));
      });

      function setTagField(tagsInput, teamInput, checkAllTagInput) {
            tagsInput.select2('destroy');
            $timeout(function() {
                  tagsInput.select2();
                  checkAllTagInput.change(function() {
                        if ($(this).is(':checked')) {
                              tagsInput.find("> option").prop("selected", "selected");
                        } else {
                              tagsInput.find("> option").removeAttr("selected");
                        }
                        tagsInput.trigger("change");
                  });
                  tagsInput.change(function() {
                        var selectd_tags = $(this).val();
                        var strTags = '';
                        if (selectd_tags != null) {
                              var strTags = selectd_tags.join(",");
                        }
                        $scope.id_tags = strTags;
                        teamInput.select2("val", "");
                        var select_val = new Array();
                        $pesquisaquestion['getAllTeamsPesquisa'](strTags).then(function(response) {
                              if (response.length > 0) {
                                    for (var i = 0; i < response.length; i++) {
                                          select_val.push(response[i].id);
                                    }
                              }
                              var teamsId = '';
                              $timeout(function() {
                                    if (selectd_tags != null && selectd_tags.length > 0) {
                                          teamInput.select2('val', select_val);
                                          teamsId = select_val.join(",");
                                    }
                                    teamInput.trigger("change");
                              });
                        });
                  });
            }, 200);
      }
      $cycles['getRevisionCycleByCompany']().then(function(response) {
            $scope.cycles = response;
      });
});

elofy.controller('nineBoxCtrl', function globalCtrl($scope, $rootScope, $results, $pesquisaquestion, $timeout, $filter, $globals, $users, $teams, $years, $cycles, $tatics, $key, $tags, $activities, $integration, $translate, $cycleConfiguration) {

      /* new filters */
      $scope.defaultReponsavelList = [];
      $scope.responsavelsNotAdded = [];
      $scope.responsavelsNotAddedSelected = [];
      $scope.usuariosNotAdded = [];
      $scope.usuariosNotAddedSelected = [];
      $scope.defaultTimeList = [];
      $scope.timesNotAdded = [];
      $scope.timesNotAddedSelected = [];
      $scope.defaultCicloList = [];
      $scope.ciclosNotAdded = [];
      $scope.ciclosNotAddedSelected = [];
      $scope.$parent.$watch('users', function(newVal, oldVal) {
            if (newVal) {
                  $scope.defaultReponsavelList = newVal;
                  $scope.responsavelsNotAdded = JSON.parse(JSON.stringify($scope.defaultReponsavelList));
                  $scope.usuariosNotAdded = JSON.parse(JSON.stringify($scope.defaultReponsavelList));
            }
      });
      $('#search-responsavel').change(function(e) {
            $.each($scope.responsavelsNotAdded, function(i) {
                  if ($scope.responsavelsNotAdded[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.responsavelsNotAdded.splice(i, 1)[0];
                        $scope.responsavelsNotAddedSelected.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedResponsavel = function(ur, justRemove = true) {
            $.each($scope.responsavelsNotAddedSelected, function(i) {
                  if ($scope.responsavelsNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.responsavelsNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.responsavelsNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshResponsavel = function(ur) {
            $('#form-search #search-responsavel').select2('val', '');
            $scope.removeAddedResponsavel(ur);
            $('#chekd6').removeAttr("checked");
      };
      $('#search-usuario').change(function(e) {
            $.each($scope.usuariosNotAdded, function(i) {
                  if ($scope.usuariosNotAdded[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.usuariosNotAdded.splice(i, 1)[0];
                        $scope.usuariosNotAddedSelected.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedUsuario = function(ur, justRemove = true) {
            $.each($scope.usuariosNotAddedSelected, function(i) {
                  if ($scope.usuariosNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.usuariosNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.usuariosNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshUsuario = function(ur) {
            $('#form-search #search-usuario').select2('val', '');
            $scope.removeAddedUsuario(ur);
      };
      // $scope.$parent.$watch('teams', function(newVal, oldVal) {
      //       if (newVal) {
      //             $scope.defaultTimeList = newVal;
      //             $scope.timesNotAdded = JSON.parse(JSON.stringify($scope.defaultTimeList));
      //       }
      // });
      $teams['getAllTeamsAccordingPermission']().then(function(response) {
            $scope.defaultTimeList = response;
            $scope.timesNotAdded = JSON.parse(JSON.stringify($scope.defaultTimeList));
      });
      $('#search-times').change(function(e) {
            $.each($scope.timesNotAdded, function(i) {
                  if ($scope.timesNotAdded[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.timesNotAdded.splice(i, 1)[0];
                        $scope.timesNotAddedSelected.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedTimes = function(ur, justRemove = true) {
            $.each($scope.timesNotAddedSelected, function(i) {
                  if ($scope.timesNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.timesNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.timesNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshTime = function(ur) {
            $('#form-search #search-times').select2('val', '');
            $scope.removeAddedTimes(ur);
            $('#chekd7').removeAttr("checked");
      };
      $cycles['getRevisionCycleByCompany']().then(function(response) {
            $scope.defaultCicloList = response;
            $scope.ciclosNotAdded = JSON.parse(JSON.stringify($scope.defaultCicloList));
      });
      $('#search-ciclos').change(function(e) {
            $.each($scope.ciclosNotAdded, function(i) {
                  if ($scope.ciclosNotAdded[i].id_revisao_ciclo === $(e.currentTarget).val()) {
                        var spliced = $scope.ciclosNotAdded.splice(i, 1)[0];
                        $scope.ciclosNotAddedSelected.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedCiclos = function(ur, justRemove = true) {
            $.each($scope.ciclosNotAddedSelected, function(i) {
                  if ($scope.ciclosNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.ciclosNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.ciclosNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshCiclo = function(ur) {
            $('#form-search #search-ciclos').select2('val', '');
            $scope.removeAddedCiclos(ur);
      };
      /* new filters end */

      /* niveus filter */
      $cycleConfiguration['getNiveisByEmpresaId']().then(function(res) {
            $scope.niveis = res;
            setTimeout(function() {
                  $('#selected_user_level').select2();
                  $('#selected_user_level').change(function() {
                        console.log($('#selected_user_level').val());
                  });
            }, 400);
      });
      $scope.changeSelectedUserLevel = function() {

            angular.forEach($scope.niveis, function(result, key) {
                  if (result['nivel'] == $('#selected_user_level').val()) result.added = true;
            });
      }

      /* niveus filter end */

      $scope.Number = Number;
      $scope.reset = function() {
            /* new filters */
            $scope.responsavelsNotAddedSelected = [];
            $scope.responsavelsNotAdded = JSON.parse(JSON.stringify($scope.defaultReponsavelList));
            $scope.timesNotAddedSelected = [];
            $scope.timesNotAdded = JSON.parse(JSON.stringify($scope.defaultTimeList));
            $scope.ciclosNotAddedSelected = [];
            $scope.ciclosNotAdded = JSON.parse(JSON.stringify($scope.defaultCicloList));
            /* niveus filter */
            angular.forEach($scope.niveis, function(result, key) {
                  result['added'] = undefined;
            });
            $timeout(function() {
                  $('#form-search #search-responsavel').select2('val', '');
                  $('#form-search #search-times').select2('val', '');
                  $('#form-search #search-ciclos').select2('val', '');
                  /* niveus filter */
                  $('#form-search #selected_user_level').select2('val', '');
            }, 100);
            $scope.listTable(true);
            /* new filters end */
            $scope.allusers = false;
            $scope.alltags = false;
            $scope.allteams = false;
            $('#form-search #search-user').select2('val', '');
            $('#form-search #selectd_tags').select2('val', '');
            $('#form-search #search-team').select2('val', '');
            $('#form-search #search-cycle').select2('val', '');
      }
      $scope.listTable = function(filterTeam = false, callback = null) {
            var teamsCheck = setInterval(function() {
                  if ($scope.teams) {
                        clearInterval(teamsCheck);
                        // results loadup
                        $('#chekd6').change(function() {
                              if ($(this).is(':checked')) {
                                    // $("#search-user > option").prop("selected", "selected");
                                    /* new filter */
                                    $scope.responsavelsNotAddedSelected = JSON.parse(JSON.stringify($scope.defaultReponsavelList));
                                    $scope.responsavelsNotAdded = [];
                                    $timeout(function() {
                                          $('#form-search #search-responsavel').select2('val', '');
                                    }, 100);
                              } else {
                                    // $("#search-user > option").removeAttr("selected");
                                    /* new filter */
                                    $scope.responsavelsNotAdded = JSON.parse(JSON.stringify($scope.defaultReponsavelList));
                                    $scope.responsavelsNotAddedSelected = [];
                                    $timeout(function() {
                                          $('#form-search #search-responsavel').select2('val', '');
                                    }, 100);
                              }
                              $("#search-user").trigger("change");
                        });
                        $('#chekd7').change(function() {
                              if ($(this).is(':checked')) {
                                    // $("#search-team > option").prop("selected", "selected");
                                    /* new filter */
                                    $scope.timesNotAddedSelected = JSON.parse(JSON.stringify($scope.defaultTimeList));
                                    $scope.timesNotAdded = [];
                                    $timeout(function() {
                                          $('#form-search #search-times').select2('val', '');
                                    }, 100);
                              } else {
                                    // $("#search-team > option").removeAttr("selected");
                                    /* new filter */
                                    $scope.timesNotAdded = JSON.parse(JSON.stringify($scope.defaultTimeList));
                                    $scope.timesNotAddedSelected = [];
                                    $timeout(function() {
                                          $('#form-search #search-times').select2('val', '');
                                    }, 100);
                              }
                              $("#search-team").trigger("change");
                        });
                        var responsavels = [];
                        var resSelected = $scope.responsavelsNotAddedSelected;
                        if (resSelected && resSelected.length > 0) {
                              $.each(resSelected, function(key, value) {
                                    responsavels.push(value.id);
                              });
                        }

                        var times = [];
                        if (!filterTeam) {
                              angular.forEach($scope.timesNotAdded, function(result, key) {
                                    times.push(result.id);
                              });
                        } else {
                              angular.forEach($scope.timesNotAddedSelected, function(result, key) {
                                    times.push(result.id);
                              });
                        }

                        var ciclos = [];
                        var cicloSelected = $scope.ciclosNotAddedSelected;
                        if (cicloSelected && cicloSelected.length > 0) {
                              $.each(cicloSelected, function(key, value) {
                                    ciclos.push(value.id_revisao_ciclo);
                              });
                        }

                        var usuarios = [];
                        var usuarioSelected = $scope.usuariosNotAddedSelected;
                        if (usuarioSelected && usuarioSelected.length > 0) {
                              $.each(usuarioSelected, function(key, value) {
                                    usuarios.push(value.id);
                              });
                        }

                        var nivies = [];
                        angular.forEach($scope.niveis, function(result, key) {
                              if (result['added'] && result['added'] == true) nivies.push(result['nivel']);
                        });
                        if (!responsavels.length && !times.length && !ciclos.length && !nivies.length && !usuarios.length) {
                              $timeout(function() {
                                    $scope.results = null;
                                    $scope.ninebox = [];
                                    $scope.selectedBox = null;
                              }, 200);
                              return;
                        }
                        $results['list9box'](times, ciclos, responsavels, nivies, usuarios).then(function(response) {
                              $scope.results = response.nine;
                              $scope.resultsCal = response.nine_cal;
                              angular.forEach($scope.results, function(item, key){
                                    angular.forEach(item.users, function(user, key1){
                                          $activities['isValidImage'](user.image).then(function(response) {
                                                if (!response) user.image = 'assets/img/elinho.png';
                                          });
                                    });
                              });
                              angular.forEach($scope.resultsCal, function(item, key){
                                    angular.forEach(item.users, function(user, key1){
                                          $activities['isValidImage'](user.image).then(function(response) {
                                                if (!response) user.image = 'assets/img/elinho.png';
                                          });
                                    });
                              });
                              $scope.ninebox = [];
                              $scope.ninebox_cal = [];
                              $scope.selectedBox = null;
                              $scope.selectedBoxCal = null;
                              for (var i = 0; i <= 9; i++) {
                                    $scope.ninebox[i] = $scope.getResultByNineBoxValue(i);
                                    $scope.ninebox_cal[i] = $scope.getResultByNineBoxCalValue(i);
                              };
                              console.log("ninebox:", response, $scope.ninebox, $scope.ninebox_cal);
                              $scope.putNineBoxValueToCalList();
                              $scope.remakeNineBoxCal();
                              if (callback) callback.call();
                        });
                  }
            }, 200);
      }
      $scope.openBox = function(box) {
            if ($scope.results && $scope.results.length)
            {
                  localStorage.setItem('results', JSON.stringify($scope.results));
                  localStorage.setItem('boxes', JSON.stringify($scope.boxes));
                  localStorage.setItem('box', JSON.stringify(box));
                  location.href = baseurl + 'nineboxdetail';
            }
            return;

            // $scope.selectedBoxCal = null;
            $scope.selectedBox = JSON.parse(JSON.stringify(box));
            var results = $scope.getResultByNineBoxValue(box.number);
            if (results) $scope.selectedBox.users = results.users;
            setTimeout(function() {
                  $('.box-change').select2();
                  // $('.box-change').trigger("change");
            }, 200);
      }

      $scope.showDivNomesCargos = function(box,dados) {
            if (!dados) return;
            var obj = JSON.parse(JSON.stringify(dados));
            $scope.dadosBox1 = "NOME (CARGO)\n";
            for (var pos = 0; pos < obj.length; pos++) { 
                  $scope.dadosBox1 += obj[pos].name + " (" + obj[pos].cargo + ")\n";
            }
            if (obj.length ==  0){
                  $scope.dadosBox1 += "- Nenhum resultado\n"; 
            }
      }

      $scope.openBoxCal = function(box) {
            
            // $scope.selectedBox = null;
            $scope.selectedBoxCal = JSON.parse(JSON.stringify(box));
            angular.forEach($scope.ninebox_cal, function(item, value) {
                  if (item['nine_box_cal'] == box.number) {
                        $scope.selectedBoxCal.users = item.users;
                        return true; 
                  }
            });
      }
      // $scope.listTable(true);
      $scope.changeNineBox = function(id_revisao_ciclo_score, new_ninebox, last_ninebox) {
            if (new_ninebox && new_ninebox != last_ninebox) {
                  console.log("testou", id_revisao_ciclo_score, new_ninebox, last_ninebox, new_ninebox == last_ninebox);
                  $results['update9box'](id_revisao_ciclo_score, new_ninebox).then(function() {
                        toastr.success('Calibração realizada com sucesso.');
                        $scope.listTable(false, function() {
                              // $scope.openBox($scope.selectedBox);
                        });
                  });
            }
      }
      $scope.resetNineBoxCalibrado = function(id_revisao_ciclo_score) {
            $results['reset9boxcalibrado'](id_revisao_ciclo_score).then(function() {
                  toastr.success('Calibração removida com sucesso.');
                  $scope.listTable(false, function() {
                  });
            });
      }
      $scope.getResultByNineBoxValue = function(nineboxvalue) {
            var returnVal = {
                  "total": 0,
                  "nine_box":nineboxvalue,
                  "users":[]
            };
            angular.forEach($scope.results, function(item, value) {
                  if (item['nine_box'] == nineboxvalue) {
                        returnVal = item;
                        return true; // getoff foreach loop
                  }
            });
            return returnVal;
      }
      $scope.getResultByNineBoxCalValue = function(nineboxvalue) {
            var returnVal = {
                  "total": 0,
                  "nine_box_cal":nineboxvalue,
                  "users":[]

            };
            angular.forEach($scope.resultsCal, function(item, value) {
                  if (item['nine_box_cal'] == nineboxvalue) {
                        returnVal = item;
                        return true; // getoff foreach loop
                  }
            });
            return returnVal;
      }
      $scope.putNineBoxValueToCalList = function() {
            angular.forEach($scope.ninebox_cal, function(calbox, k) {
                  if (calbox.nine_box_cal != 0) {
                        angular.forEach(calbox.users, function(caluser, k1) {
                              angular.forEach($scope.ninebox, function(originbox, k2) {
                                    angular.forEach(originbox.users, function(originuser, k4) {
                                          if (caluser.id == originuser.id && caluser.id_revisao_ciclo_score == originuser.id_revisao_ciclo_score) {
                                                caluser.nine_box = originbox.nine_box;
                                          }
                                    });
                              });
                        });
                  }
            });
      }
      $scope.remakeNineBoxCal = function() {
            var notCalibratedUsers = $scope.ninebox_cal[0].users;
            angular.forEach(notCalibratedUsers, function(notCUser, key) {
                  angular.forEach($scope.ninebox, function(originBox, k1) {
                        if (originBox.nine_box != 0) {
                              angular.forEach(originBox.users, function(originUser, k2) {
                                    if (notCUser.id == originUser.id && notCUser.id_revisao_ciclo_score == originUser.id_revisao_ciclo_score) {
                                          notCUser.notcal = 1;
                                          notCUser.nine_box = originBox.nine_box;
                                          $scope.addNotCUserToCList(notCUser);
                                    }
                              });
                        }
                  });
            });
      }
      $scope.addNotCUserToCList = function(notCUser) {
            angular.forEach($scope.ninebox_cal, function(item, key) {
                  if (item.nine_box_cal != 0) {
                        if (item.nine_box_cal == notCUser.nine_box) {
                              item.users.push(notCUser);
                              item.total++;
                        }
                  }
            });
      }
      setTimeout(function() {
            $("#search-user").select2();
            $('#search-team').select2();
            $('#search-cycle').select2();
      }, 300);
      $pesquisaquestion['getAllTagsPesquisa']().then(function(res) {
            $scope.teamTags = res;
            setTagField($('#selectd_tags'), $("#search-team"), $('#chekd_tags'));
      });

      function setTagField(tagsInput, teamInput, checkAllTagInput) {
            tagsInput.select2('destroy');
            $timeout(function() {
                  tagsInput.select2();
                  checkAllTagInput.change(function() {
                        if ($(this).is(':checked')) {
                              tagsInput.find("> option").prop("selected", "selected");
                        } else {
                              tagsInput.find("> option").removeAttr("selected");
                        }
                        tagsInput.trigger("change");
                  });
                  tagsInput.change(function() {
                        var selectd_tags = $(this).val();
                        var strTags = '';
                        if (selectd_tags != null) {
                              var strTags = selectd_tags.join(",");
                        }
                        $scope.id_tags = strTags;
                        teamInput.select2("val", "");
                        // var select_val = new Array();
                        $pesquisaquestion['getAllTeamsPesquisa'](strTags).then(function(response) {
                              $scope.timesNotAddedSelected = [];
                              $scope.timesNotAdded = JSON.parse(JSON.stringify($scope.defaultTimeList));
                              if (response.length > 0 && strTags != '') {
                                    for (var i = 0; i < response.length; i++) {
                                          $.each($scope.timesNotAdded, function(j) {
                                                if ($scope.timesNotAdded[j].id === response[i].id) {
                                                      var spliced = $scope.timesNotAdded.splice(j, 1)[0];
                                                      $scope.timesNotAddedSelected.push(spliced);
                                                      return false;
                                                }
                                          });
                                          // select_val.push(response[i].id);
                                    }
                              }
                              $timeout(function() {
                                    $('#form-search #search-times').select2('val', '');
                              }, 100);
                              // var teamsId = '';
                              // $timeout(function() {
                              //     if (selectd_tags.length > 0) {
                              //         teamInput.select2('val', select_val);
                              //         teamsId = select_val.join(",");
                              //     }
                              //     teamInput.trigger("change");
                              // });
                        });
                  });
            }, 200);
      }
      $scope.initBoxes = function() {
            $scope.$parent.$watch('user', function(newValue) {
                  if (newValue.empresa) {
                        $scope.boxes[0].name_translated = newValue.empresa.nineBox3;
                        $scope.boxes[0].name_translateddesc = newValue.empresa.nineBox3desc;
                        $scope.boxes[1].name_translated = newValue.empresa.nineBox6;
                        $scope.boxes[1].name_translateddesc = newValue.empresa.nineBox6desc;
                        $scope.boxes[2].name_translated = newValue.empresa.nineBox9;
                        $scope.boxes[2].name_translateddesc = newValue.empresa.nineBox9desc;
                        $scope.boxes[3].name_translated = newValue.empresa.nineBox2;
                        $scope.boxes[3].name_translateddesc = newValue.empresa.nineBox2desc;
                        $scope.boxes[4].name_translated = newValue.empresa.nineBox5;
                        $scope.boxes[4].name_translateddesc = newValue.empresa.nineBox5desc;
                        $scope.boxes[5].name_translated = newValue.empresa.nineBox8;
                        $scope.boxes[5].name_translateddesc = newValue.empresa.nineBox8desc;
                        $scope.boxes[6].name_translated = newValue.empresa.nineBox1;
                        $scope.boxes[6].name_translateddesc = newValue.empresa.nineBox1desc;
                        $scope.boxes[7].name_translated = newValue.empresa.nineBox4;
                        $scope.boxes[7].name_translateddesc = newValue.empresa.nineBox4desc;
                        $scope.boxes[8].name_translated = newValue.empresa.nineBox7;
                        $scope.boxes[8].name_translateddesc = newValue.empresa.nineBox7desc;
                  }
            });
      }
});
elofy.controller('okrCtrl', function globalCtrl($scope, $pesquisaquestion, $timeout, $filter, $globals, $users, $teams, $years, $cycles, $tatics, $key, $tags, $activities, $integration, $translate, $objetivos) {
      $scope.chartKeyId = null;
      $scope.selectedYear = new Date().getFullYear();
      $scope.contentLoading = 0;
      var currentDate = moment(new Date()).format("YYYY-MM-DD");
      $scope.selectedTeamNotAddedOkr1 = [];
      $scope.teamsNotAddedSelectedOkr1 = [];
      $scope.selectedTeamNotAddedOkr2 = [];
      $scope.teamsNotAddedSelectedOkr2 = [];
      $scope.selectedTeamNotAddedOkr3 = [];
      $scope.teamsNotAddedSelectedOkr3 = [];
      $cycles['getCyclesIdByDate'](currentDate).then(function(response) {
            $scope.cycle = response;
            $scope.selectedCycle = response.id;
            $scope.selectedCycleHer = response.id;
            $scope.selectedCycleMy = response.id;
      });
      $scope.setKeyId = function(id, tatic, link, percepcao) {
            $scope.modalTatic = tatic;
            $scope.chartKeyId = id;
            $scope.s_objective = tatic.title;
            $scope.s_time = tatic.team.name;
            $scope.s_link = link;
            $scope.s_percepcao = percepcao;
            $scope.loadDefaultCharts(id);
            $key['getMedicaosByIdKey'](id).then(function(response) {
                  $scope.medicaoes = response;
            });
      }
      $scope.selectModalPercepcao = function(percepcao) {
            $scope.s_percepcao = percepcao;
      }
      $scope.viewModalTypeTab1 = function() {
            $scope.modalTypeTab = 1;
      }
      $scope.viewModalTypeTab2 = function() {
            $scope.modalTypeTab = 2;
      }
      // adding measure on modal function
      $scope.resetTaticKeys = function() {
            if (!$scope.modalTatic) {
                  return;
            }
            $scope.filter();
      }
      // adding measure on modal end
      $scope.getCycle = function() {
            $cycles['getByYear']($scope.selectedYear).then(function(response) {
                  $scope.cycles = response;
            });
            // $('#form-search #search-cycle').select2('destroy');
            // $('#form-search-her #search-cycle-her').select2('destroy');
            // $('#form-search-my #search-cycle-my').select2('destroy');
            // $timeout(function(){
            //       $('#form-search #search-cycle').select2();
            //       $('#form-search-her #search-cycle-her').select2();
            //       $('#form-search-my #search-cycle-my').select2();
            // },300);
      }
      // $('#div-1').hide();
      // $('#div-2').hide();
      // $('#div-3').hide();
      // $('#div-4').hide();
      // $('#div-1').show();
      // $('#div-2').show();
      // $('#div-3').show();
      // $('#div-4').show();
      // $scope.okrtab1_filter = false;
      // $scope.okrtab2_filter = false;
      // $scope.okrtab3_filter = false;
      // $scope.okrtab4_filter = false;
      $scope.okrtab1_filter = true;
      $scope.okrtab2_filter = true;
      $scope.okrtab3_filter = true;
      $scope.okrtab4_filter = true;
      $scope.view_filter1 = function() {
            $('#div-1').show();
            $scope.okrtab1_filter = true;
            $scope.getCycle();
            $('#form-search #search-cycle').select2();
            $('#form-search #search-cycle').select2('val', '');
            $timeout(function() {
                  $('#form-search #search-cycle').select2('val', $scope.selectedCycle);
            }, 500);
      }
      $scope.hide_filter1 = function() {
            $('#div-1').hide();
            $scope.okrtab1_filter = false;
      }
      $scope.view_filter2 = function() {
            $('#div-2').show();
            $scope.okrtab2_filter = true;
            $scope.getCycle();
            $('#form-search-her #search-cycle-her').select2();
            $('#form-search-her #search-cycle-her').select2('val', '');
            $timeout(function() {
                  $('#form-search-her #search-cycle-her').select2('val', $scope.selectedCycleHer);
            }, 500);
      }
      $scope.hide_filter2 = function() {
            $('#div-2').hide();
            $scope.okrtab2_filter = false;
      }
      $scope.view_filter3 = function() {
            $('#div-3').show();
            $scope.okrtab3_filter = true;
            $scope.getCycle();
            $('#form-search-my #search-cycle-my').select2();
            $('#form-search-my #search-cycle-my').select2('val', '');
            $timeout(function() {
                  $('#form-search-my #search-cycle-my').select2('val', $scope.selectedCycleMy);
            }, 500);
      }
      $scope.hide_filter3 = function() {
            $('#div-3').hide();
            $scope.okrtab3_filter = false;
      }
      $scope.view_filter4 = function() {
            $('#div-4').show();
            $scope.okrtab4_filter = true;
            $scope.getCycle();
      }
      $scope.hide_filter4 = function() {
            $('#div-4').hide();
            $scope.okrtab4_filter = false;
      }
      setTimeout(function() {
            $scope.view_filter1()
      }, 1000);
      $scope.$parent.$watch('teams', function(newval, oldval) {
            $scope.teams = $scope.$parent.teams;
      });
      $scope.getAllTeams = function() {
            $teams['getAllTeams']().then(function(teams) {
                  $scope.teams = teams;
                  $scope.teamsNotAddedOkr1 = $scope.teams;
                  $scope.teamsNotAddedOkr2 = $scope.teams;
                  $scope.teamsNotAddedOkr3 = $scope.teams;
            });
      }
      $scope.getAllTeams();
      $users['me']().then(function(response1) {
            $scope.user = response1;
            $scope.selectedYear = new Date().getFullYear();
            if ($scope.user.usuarioviewTime) {
                  var id_time = $scope.user.usuarioviewTime.id_time ? $scope.user.usuarioviewTime.id_time : 0;
                  var team_data = {
                        id: id_time,
                        name: $scope.user.usuarioviewTime.nome_unidade
                  };
            } else {
                  var id_time = 0;
                  var team_data = {};
            }
            $scope.selectedTeam = id_time;
            $timeout(function() {
                  $scope.teamsNotAddedSelectedOkr1.push(team_data);
                  $scope.teamsNotAddedSelectedOkr2.push(team_data);
                  //$scope.teamsNotAddedSelectedOkr3.push(team_data);
            }, 600);
            var user_id = $scope.selectedUser;
            if (!user_id) {
                  user_id = $scope.user.id;
            }
            //alert(user_id);
            $objetivos['getAll'](user_id).then(function(objetivos) {
                  $scope.objetivos = objetivos;
            });

            $tatics['getAll']($scope.selectedYear, id_time, $scope.selectedCycle, user_id).then(function(tatics) {
                  $scope.tatics = tatics;
                  $scope.formatPatternOkr();
                  $users['get']().then(function(users) {
                        $scope.users = users;
                        $users['get']().then(function(response) {
                              $users['me']().then(function(response1) {
                                    $("#okr-user-perfil").select2('destroy');
                                    $scope.meuser = response1;
                                    for (var i = 0; i < $scope.users.length; i++) {
                                          if ($scope.users[i].id == $scope.meuser.id) {
                                                $('#okr-user-perfil optgroup option[ng-value="' + $scope.users[i].id + '"]').attr('selected', 'selected');
                                          }
                                    };
                              });
                        });
                  });
                  var getUsersAfterTeams = function() {
                        $users['me']().then(function(response1) {
                              $("#okr-team-perfil").select2('destroy');
                              $scope.meuser = response1;
                              for (var i = 0; i < $scope.teams.length; i++) {
                                    if ($scope.teams[i].id == $scope.meuser.usuarioviewTime.id_time) {
                                          $('#okr-team-perfil optgroup option[value="' + $scope.teams[i].id + '"]').attr('selected', 'selected');
                                    }
                              };
                        });
                  }
                  if (!$scope.teams || $scope.teams.length == 0) {
                        $teams['getAllTeams']().then(function(teams) {
                              $scope.teams = teams;
                              getUsersAfterTeams();
                        });
                  } else {
                        getUsersAfterTeams();
                  }
                  $years['get']().then(function(years) {
                        $scope.years = years;
                  });
            });

            $tatics['getAll']($scope.selectedYear, id_time, $scope.selectedCycle, user_id).then(function(tatics) {
                  $scope.tatics = tatics;
                  $scope.formatPatternOkr();
                  $users['get']().then(function(users) {
                        $scope.users = users;
                        $users['get']().then(function(response) {
                              $users['me']().then(function(response1) {
                                    $("#okr-user-perfil").select2('destroy');
                                    $scope.meuser = response1;
                                    for (var i = 0; i < $scope.users.length; i++) {
                                          if ($scope.users[i].id == $scope.meuser.id) {
                                                $('#okr-user-perfil optgroup option[ng-value="' + $scope.users[i].id + '"]').attr('selected', 'selected');
                                          }
                                    };
                              });
                        });
                  });
                  var getUsersAfterTeams = function() {
                        $users['me']().then(function(response1) {
                              $("#okr-team-perfil").select2('destroy');
                              $scope.meuser = response1;
                              for (var i = 0; i < $scope.teams.length; i++) {
                                    if ($scope.teams[i].id == $scope.meuser.usuarioviewTime.id_time) {
                                          $('#okr-team-perfil optgroup option[value="' + $scope.teams[i].id + '"]').attr('selected', 'selected');
                                    }
                              };
                        });
                  }
                  if (!$scope.teams || $scope.teams.length == 0) {
                        $teams['getAllTeams']().then(function(teams) {
                              $scope.teams = teams;
                              getUsersAfterTeams();
                        });
                  } else {
                        getUsersAfterTeams();
                  }
                  $years['get']().then(function(years) {
                        $scope.years = years;
                  });
            });
            $timeout(function() {
                  var teamsNotAddedOkr1 = $scope.teamsNotAddedOkr1;
                  if (!$scope.teamsNotAddedOkr1) return;
                  for (var i = teamsNotAddedOkr1.length - 1; i >= 0; --i) {
                        if (teamsNotAddedOkr1[i].id == id_time) {
                              teamsNotAddedOkr1.splice(i, 1);
                        }
                  }
            }, 700);
      });
      $('#search-team').change(function(e) {
            $.each($scope.teamsNotAddedOkr1, function(i) {
                  if ($scope.teamsNotAddedOkr1[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.teamsNotAddedOkr1.splice(i, 1)[0];
                        $scope.teamsNotAddedSelectedOkr1.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedTeamOkr1 = function(ur, justRemove = true) {
            $.each($scope.teamsNotAddedSelectedOkr1, function(i) {
                  if ($scope.teamsNotAddedSelectedOkr1[i].id === ur.id) {
                        var spliced = $scope.teamsNotAddedSelectedOkr1.splice(i, 1)[0];
                        if (justRemove) $scope.teamsNotAddedOkr1.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshTeamOkr1 = function(ur) {
            $('#search-team .select2').select2("val", "");
            $scope.removeAddedTeamOkr1(ur);
      };
      /* tab2 start here*/
      $('#search-team-her').change(function(e) {
            $.each($scope.teamsNotAddedOkr2, function(i) {
                  if ($scope.teamsNotAddedOkr2[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.teamsNotAddedOkr2.splice(i, 1)[0];
                        $scope.teamsNotAddedSelectedOkr2.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedTeamOkr2 = function(ur, justRemove = true) {
            $.each($scope.teamsNotAddedSelectedOkr2, function(i) {
                  if ($scope.teamsNotAddedSelectedOkr2[i].id === ur.id) {
                        var spliced = $scope.teamsNotAddedSelectedOkr2.splice(i, 1)[0];
                        if (justRemove) $scope.teamsNotAddedOkr2.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshTeamOkr2 = function(ur) {
            $('#search-team-her .select2').select2("val", "");
            $scope.removeAddedTeamOkr2(ur);
      };
      /* tab2 end here*/
      /* tab3 start here*/
      $('#search-team-my_activities').change(function(e) {
            $.each($scope.teamsNotAddedOkr3, function(i) {
                  if ($scope.teamsNotAddedOkr3[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.teamsNotAddedOkr3.splice(i, 1)[0];
                        $scope.teamsNotAddedSelectedOkr3.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedTeamOkr3 = function(ur, justRemove = true) {
            $.each($scope.teamsNotAddedSelectedOkr3, function(i) {
                  if ($scope.teamsNotAddedSelectedOkr3[i].id === ur.id) {
                        var spliced = $scope.teamsNotAddedSelectedOkr3.splice(i, 1)[0];
                        if (justRemove) $scope.teamsNotAddedOkr3.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshTeamOkr3 = function(ur) {
            $('#search-team-my_activities .select2').select2("val", "");
            $scope.removeAddedTeamOkr3(ur);
      };
      /* tab3 end here*/

      /* export csv in okr */
      $scope.exportOkr = function() {
            $tatics['exportOkr']().then(function() {

            });
      }

      // display elinho image when not validated
      $scope.$watch('profiletatics', function(newVal, oldVal) {
            if (newVal) {
                  angular.forEach($scope.profiletatics, function(result, key) {
                        $activities['isValidImage'](result.image).then(function(response) {
                              if (!response) result.image = 'assets/img/elinho.png';
                        });
                  });
            }
      });

      $tatics['getAllForProfile']().then(function(profiletatics) {
            $scope.profiletatics = profiletatics;
      });

      /* contrato_meta */

      $scope.resetHistoryData = function() {
            var displayData = [];
            if (($scope.keyResultHistory == null || $scope.keyResultHistory.meta_1 == undefined) && ($scope.keyDetails.forma != 2)) {
                  var categories = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro", "Primeiro Semestre", "Segundo Semestre", "Resultado Anual"];
                  angular.forEach(categories, function(item) {
                        var tmp = {};
                        tmp.category = item;
                        tmp.metaFormatted = '';
                        tmp.valoreFormatted = '';
                        tmp.meta = '';
                        tmp.valore = '';
                        tmp.meta_date = '';
                        tmp.valore_date = '';
                        tmp.descricao = '';
                        tmp.isEditing = false;
                        displayData.push(tmp);
                  });
                  $scope.displayHistoryData = displayData;
                  return;
            }
            var tmp;
            tmp = {
                  category: "Janeiro",
                  meta: $scope.keyResultHistory.meta_1,
                  valore: $scope.keyResultHistory.valor_1,
                  descricao: $scope.keyResultHistory.descricao_1,
                  meta_date: $scope.keyResultHistory.meta_1_date,
                  valore_date: $scope.keyResultHistory.valor_1_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_1 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_1 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_1 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_1_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_1_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_1;
                  tmp.meta_date = $scope.keyResultHistory.meta_1_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Fevereiro",
                  meta: $scope.keyResultHistory.meta_2,
                  valore: $scope.keyResultHistory.valor_2,
                  descricao: $scope.keyResultHistory.descricao_2,
                  meta_date: $scope.keyResultHistory.meta_2_date,
                  valore_date: $scope.keyResultHistory.valor_2_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_2 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_2 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_2 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_2_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_2_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_2;
                  tmp.meta_date = $scope.keyResultHistory.meta_2_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Março",
                  meta: $scope.keyResultHistory.meta_3,
                  valore: $scope.keyResultHistory.valor_3,
                  descricao: $scope.keyResultHistory.descricao_3,
                  meta_date: $scope.keyResultHistory.meta_3_date,
                  valore_date: $scope.keyResultHistory.valor_3_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_3 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_3 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_3 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_3_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_3_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_3;
                  tmp.meta_date = $scope.keyResultHistory.meta_3_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Abril",
                  meta: $scope.keyResultHistory.meta_4,
                  valore: $scope.keyResultHistory.valor_4,
                  descricao: $scope.keyResultHistory.descricao_4,
                  meta_date: $scope.keyResultHistory.meta_4_date,
                  valore_date: $scope.keyResultHistory.valor_4_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_4 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_4 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_4 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_4_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_4_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_4;
                  tmp.meta_date = $scope.keyResultHistory.meta_4_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Maio",
                  meta: $scope.keyResultHistory.meta_5,
                  valore: $scope.keyResultHistory.valor_5,
                  descricao: $scope.keyResultHistory.descricao_5,
                  meta_date: $scope.keyResultHistory.meta_5_date,
                  valore_date: $scope.keyResultHistory.valor_5_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_5 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_5 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_5 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_5_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_5_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_5;
                  tmp.meta_date = $scope.keyResultHistory.meta_5_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Junho",
                  meta: $scope.keyResultHistory.meta_6,
                  valore: $scope.keyResultHistory.valor_6,
                  descricao: $scope.keyResultHistory.descricao_6,
                  meta_date: $scope.keyResultHistory.meta_6_date,
                  valore_date: $scope.keyResultHistory.valor_6_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_6 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_6 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_6 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_6_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_6_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_6;
                  tmp.meta_date = $scope.keyResultHistory.meta_6_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Julho",
                  meta: $scope.keyResultHistory.meta_7,
                  valore: $scope.keyResultHistory.valor_7,
                  descricao: $scope.keyResultHistory.descricao_7,
                  meta_date: $scope.keyResultHistory.meta_7_date,
                  valore_date: $scope.keyResultHistory.valor_7_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_7 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_7 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_7 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_7_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_7_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_7;
                  tmp.meta_date = $scope.keyResultHistory.meta_7_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Agosto",
                  meta: $scope.keyResultHistory.meta_8,
                  valore: $scope.keyResultHistory.valor_8,
                  descricao: $scope.keyResultHistory.descricao_8,
                  meta_date: $scope.keyResultHistory.meta_8_date,
                  valore_date: $scope.keyResultHistory.valor_8_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_8 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_8 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_8 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_8_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_8_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_8;
                  tmp.meta_date = $scope.keyResultHistory.meta_8_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Setembro",
                  meta: $scope.keyResultHistory.meta_9,
                  valore: $scope.keyResultHistory.valor_9,
                  descricao: $scope.keyResultHistory.descricao_9,
                  meta_date: $scope.keyResultHistory.meta_9_date,
                  valore_date: $scope.keyResultHistory.valor_9_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_9 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_9 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_9 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_9_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_9_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_9;
                  tmp.meta_date = $scope.keyResultHistory.meta_9_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Outubro",
                  meta: $scope.keyResultHistory.meta_10,
                  valore: $scope.keyResultHistory.valor_10,
                  descricao: $scope.keyResultHistory.descricao_10,
                  meta_date: $scope.keyResultHistory.meta_10_date,
                  valore_date: $scope.keyResultHistory.valor_10_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_10 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_10 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_10 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_10_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_10_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_10;
                  tmp.meta_date = $scope.keyResultHistory.meta_10_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Novembro",
                  meta: $scope.keyResultHistory.meta_11,
                  valore: $scope.keyResultHistory.valor_11,
                  descricao: $scope.keyResultHistory.descricao_11,
                  meta_date: $scope.keyResultHistory.meta_11_date,
                  valore_date: $scope.keyResultHistory.valor_11_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_11 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_11 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_11 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_11_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_11_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_11;
                  tmp.meta_date = $scope.keyResultHistory.meta_11_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Dezembro",
                  meta: $scope.keyResultHistory.meta_12,
                  valore: $scope.keyResultHistory.valor_12,
                  descricao: $scope.keyResultHistory.descricao_12,
                  meta_date: $scope.keyResultHistory.meta_12_date,
                  valore_date: $scope.keyResultHistory.valor_12_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_12 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_12 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_12 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_12_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_12_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_12;
                  tmp.meta_date = $scope.keyResultHistory.meta_12_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Primeiro Semestre",
                  meta: $scope.keyResultHistory.meta_13,
                  valore: $scope.keyResultHistory.valor_13,
                  descricao: $scope.keyResultHistory.descricao_13,
                  meta_date: $scope.keyResultHistory.meta_13_date,
                  valore_date: $scope.keyResultHistory.valor_13_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_13 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_13 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_13 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_13_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_13_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_13;
                  tmp.meta_date = $scope.keyResultHistory.meta_13_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Segundo Semestre",
                  meta: $scope.keyResultHistory.meta_14,
                  valore: $scope.keyResultHistory.valor_14,
                  descricao: $scope.keyResultHistory.descricao_14,
                  meta_date: $scope.keyResultHistory.meta_14_date,
                  valore_date: $scope.keyResultHistory.valor_14_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_14 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_14 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_14 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_14_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_14_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_14;
                  tmp.meta_date = $scope.keyResultHistory.meta_14_date;
            }
            displayData.push(tmp);

            tmp = {
                  category: "Resultado Anual",
                  meta: $scope.keyResultHistory.meta_15,
                  valore: $scope.keyResultHistory.valor_15,
                  descricao: $scope.keyResultHistory.descricao_15,
                  meta_date: $scope.keyResultHistory.meta_15_date,
                  valore_date: $scope.keyResultHistory.valor_15_date
            };
            if ($scope.keyDetails.forma == 2) {
                  tmp.meta = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_15 : '';
                  tmp.valore = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_15 : '';
                  tmp.descricao = ($scope.keyResultForma != null) ? $scope.keyResultForma.descricao_15 : '';
                  tmp.meta_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.meta_15_date : '';
                  tmp.valore_date = ($scope.keyResultForma != null) ? $scope.keyResultForma.valor_15_date : '';
            }
            if ($scope.keyDetails.sistema_origem != null && parseInt($scope.keyDetails.sistema_origem) > 0) {
                  tmp.meta = $scope.keyResultHistory.meta_15;
                  tmp.meta_date = $scope.keyResultHistory.meta_15_date;
            }
            displayData.push(tmp);
            var i=1;
            var keyresult_id = $('#id_key_result').val();
            angular.forEach(displayData, function(item, key) {
                  item.isEditing = false;
                  if ($scope.keyDetails.pattern == 4) {
                        item.metaFormatted = item.meta_date;
                        item.valoreFormatted = item.valore_date;
                  } else {
                        item.metaFormatted = formatPattern(item.meta, $scope.keyDetails.pattern);
                        item.valoreFormatted = formatPattern(item.valore, $scope.keyDetails.pattern);
                  }
                  if ($scope.keyDetails.acomp == 1) {
                        item.metaFormatted = item.meta_date;
                        item.valoreFormatted = item.valore_date;
                  }
                  angular.forEach($scope.keyResultAnexo, function(anexo, key1) {
                        if (i == anexo.category_num) {
                              item.anexo = baseurl + 'assets/empresa/' + $scope.user.empresa.id_empresa + '/keys/' + keyresult_id + '/historica/' + anexo.anexo;
                        }
                  });
                  if (item.anexo == undefined) item.anexo = null;
                  i++;
            });
            $scope.displayHistoryData = displayData;

      }

      var myBarChartHistory;
      $scope.configureHistoryChart = function() {
            if (myBarChartHistory) myBarChartHistory.destroy();
            var historyLabel = [], historyDataMeta = [], historyDataValore = [];
            angular.forEach($scope.displayHistoryData, function(item, key) {
                  historyLabel.push(item.category);
                  historyDataMeta.push(item.meta);
                  historyDataValore.push(item.valore);
            });
            var dataBarHistory = {
                labels: historyLabel,
                  datasets: [{
                    label: "Meta",
                    data: historyDataMeta,
                    backgroundColor: "#006CE8",
                    borderWidth: 0
                }, {
                    label: "Valor",
                    data: historyDataValore,
                    backgroundColor: "#01D799",
                    borderWidth: 0
                }]
              };
            var options = {
                  scales: {
                        yAxes: [{
                          ticks: {
                              beginAtZero:true
                          },
                          gridLines: {
                            display: false,
                            drawBorder: false,
                          },
                          maxBarThickness: 30
                        }],
                        xAxes: [{
                          ticks: {
                              beginAtZero:true
                          },
                          gridLines: {
                            display: false,
                            drawBorder: false,
                          }
                        }]
                  },
                  legend: {
                        display: false
                  },
                  maintainAspectRatio: false,
            };
            $scope.loadHistoryChart(dataBarHistory, options);
      }

      $scope.loadHistoryChart = function(dataBarHistory, options) {
            var ctxBarHistory = document.getElementById("keyresult_history_chart");
            if (ctxBarHistory == null) {
                  setTimeout(function() {
                        $scope.loadHistoryChart(dataBarHistory, options);
                  }, 300);
            } else {
                  myBarChartHistory = new Chart(ctxBarHistory, {
                      type: 'horizontalBar',
                      data: dataBarHistory,
                      options: options
                  });
                  myBarChartHistory.clear();
                  myBarChartHistory.update();
            }
      }

      $scope.downloadContrato = function(url) {
            window.open(url, '_blank');
      }

      $scope.editKeyresultHistory = function(history, index) {
            if (history.isEditing) {
                  var v_p = $('#planejado_' + index).val();
                  var v_m = $('#meta_' + index).val();
                  var v_v = $('#valor_' + index).val();
                  var v_d = $('#descricao_' + index).val();
                  if ($scope.keyDetails.acomp == 1 || $scope.keyDetails.pattern == 4) {
                        v_m = $('#meta_date_' + index).val();
                        v_v = $('#valor_date_' + index).val();
                  }
                  index++;
                  var k_p = "planejado_" + index;
                  var k_m = "meta_" + index;
                  var k_v = "valor_" + index;
                  var k_d = "descricao_" + index;
                  var historyId = $scope.keyResultHistory ? $scope.keyResultHistory.id_rchave_historico : 0;
                  var formaId = $scope.keyResultForma ? $scope.keyResultForma.id_rchave_contrato_atualizacoes : 0;
                  var data = {
                        id: historyId,
                        id_forma: formaId,
                        keyresult_id: $('#id_key_result').val(),
                        key_p: k_p,
                        val_p: v_p,
                        key_m: k_m,
                        val_m: v_m,
                        key_v: k_v,
                        val_v: v_v,
                        key_d: k_d,
                        val_d: v_d,
                        forma: $scope.keyDetails.forma,
                        acomp: $scope.keyDetails.acomp,
                        pattern: $scope.keyDetails.pattern
                  };
                  var formData = new FormData();
                  $.each(data, function(key, value) {
                        formData.append(key, value);
                  });
                  if ($scope.keyDetails.acomp == 1) {
                        index--;
                        var fileInput = $('#attach_' + index),
                        files = fileInput[0].files;
                        for (var i = 0; i < files.length; i++) {
                              formData.append("files[]", files[i]);
                        }
                        index++;
                        formData.append('category_num', index);
                  }
                  $tatics['editKeyresultHistory'](formData).then(function(history) {
                        toastr.success("Historica Resultados chave Atualizado com Sucesso.");
                        $scope.loadHistorica();
                  });  
            } else {
                  $('#meta_date_' + index).datepicker("destroy");
                  $('#meta_date_' + index).datepicker();
                  $('#valor_date_' + index).datepicker("destroy");
                  $('#valor_date_' + index).datepicker();
                  history.isEditing = !history.isEditing;
            } 
      }

      $scope.loadHistorica = function() {
            var keyresult_id = $('#id_key_result').val();
            $tatics['getKeyresultHistory'](keyresult_id, $scope.keyDetails.forma).then(function(response) {
                  $scope.keyResultHistory = response[0];
                  $scope.keyResultForma = response[1];
                  $scope.keyResultAnexo = response[2];
                  angular.forEach($scope.keyResultHistory, function(item, key) {
                        if (item == null) {
                              if (key.indexOf('descricao') == -1) 
                                    $scope.keyResultHistory[key] = 0;
                              if ($scope.keyDetails.acomp == 1 || $scope.keyDetails.pattern == 4) {
                                    if (key.indexOf('meta') != -1 || key.indexOf('valor') != -1)
                                          $scope.keyResultHistory[key] = "";
                              }
                        }
                  });
                  angular.forEach($scope.keyResultForma, function(item, key) {
                        if (item == null) {
                              if (key.indexOf('descricao') == -1) 
                                    $scope.keyResultForma[key] = 0;
                              if ($scope.keyDetails.acomp == 1 || $scope.keyDetails.pattern == 4) {
                                    if (key.indexOf('meta') != -1 || key.indexOf('valor') != -1)
                                          $scope.keyResultForma[key] = "";
                              }
                        }
                  });
                  $scope.resetHistoryData();
                  if ($scope.keyDetails.acomp != 1) 
                        $scope.configureHistoryChart();
            });  
      }

      /* contrato_meta end */

      $scope.loadDefaultCharts = function(id = 0) {
            if (id != 0) {
                  var id_key = id;
            } else {
                  var id_key = $('#okr_medicaoes #id_key_result').val();
            }
            $('#myChart').remove();
            // $('.sec').css('width', '100%');
            $('.sec').append('<canvas id="myChart"><canvas>');
            // $('#myChart').css('min-height', '350px');

            //$scope.initScroll();
            //var canvas = document.createElement("canvas");
            $tatics['getResultadosDetailsById'](id_key).then(function(response) {
                  var old_medicao_realizada = 1;
                  var reverse_response = [];
                  angular.forEach(response[1], function(item, key) {
                        reverse_response.unshift(item);
                  });
                  response[1] = [];
                  response[1] = reverse_response;
                  angular.forEach(response[1], function(item, key) {
                        var new_medicao_realizada = item.medicao_realizada;
                        if (new_medicao_realizada == undefined) {
                              new_medicao_realizada = 1;
                              old_medicao_realizada = 1;
                        }
                        if (key == 0 || ((old_medicao_realizada == 0 || old_medicao_realizada == undefined) && new_medicao_realizada != 0)) {
                              old_medicao_realizada = (new_medicao_realizada * 100);
                              var div = parseInt(new_medicao_realizada, 10) + 100;
                              old_medicao_realizada = old_medicao_realizada / div;
                        }
                        if (old_medicao_realizada == 0 && new_medicao_realizada == 0) {
                              old_medicao_realizada = 1;
                              new_medicao_realizada = 1;
                        }
                        var variation = ((new_medicao_realizada / old_medicao_realizada) - 1) * 100;
                        if (variation < 0) {
                              response[1][key].variation_flag = -1;
                              variation = Math.abs(variation);
                        } else if (variation > 0) {
                              response[1][key].variation_flag = 1;
                        } else {
                              response[1][key].variation_flag = 0;
                        }
                        response[1][key].variation = variation.toFixed(2);
                        if (old_medicao_realizada == 1 && new_medicao_realizada == 1) {
                              old_medicao_realizada = 0;
                        } else {
                              old_medicao_realizada = new_medicao_realizada;
                        }
                  });
                  reverse_response = [];
                  angular.forEach(response[1], function(item, key) {
                        reverse_response.unshift(item);
                  });
                  response[1] = [];
                  response[1] = reverse_response;
                  $scope.table_data = response[1];
                  $scope.se_time = response[0].last_date;
                  $scope.se_percent = response[0].percentage;
                  $scope.se_final_target = response[0].meta_final_prevista;
                  $scope.se_keyresult = response[0].title;
                  /*****************************************
                   Line Chart Styles
                   ******************************************/
                  var graph_array4_label = [];
                  var graph_array4_ids = [];
                  var graph_array4_data = [];
                  var graph_array4_data1 = [];
                  angular.forEach(response[1], function(item, key) {
                        graph_array4_ids.unshift(item.id_acomp_kr);
                        graph_array4_label.unshift(item.data_semana);
                        graph_array4_data.unshift(item.medicao_realizada);
                        graph_array4_data1.unshift(item.meta_prevista_acumulada);
                  });
                  var ctx = document.getElementById("myChart");
                  //debugger;
                  var data = {
                        labels: graph_array4_label,
                        datasets: [{
                                    label: 'Progresso Atual',
                                    pointBackgroundColor: '#fea5a7',
                                    borderColor: '#fea5a7',
                                    backgroundColor: '#fea5a7',
                                    pointBorderWidth: 2,
                                    data: graph_array4_data,
                                    fill: false,
                              },
                              {
                                    label: 'Alvo',
                                    pointBackgroundColor: '#5eb5ef',
                                    borderColor: '#5eb5ef',
                                    backgroundColor: '#5eb5ef',
                                    pointBorderWidth: 2,
                                    data: graph_array4_data1,
                                    fill: false,
                              }
                        ]
                  }
                  var myNewChart = new Chart(ctx, {
                        type: 'line',
                        data: data,
                        options: {
                              //response: true,
                              // hover: {
                              //     animationDuration: 500,
                              //     mode: "nearest",
                              //     intersect: true
                              // },
                              // 'onClick': function(evt) {
                              //     var activePoints = myNewChart.getElementsAtEvent(evt);
                              //     if (activePoints[0]) {
                              //         var chartData = activePoints[0]['_chart'].config.data;
                              //         var idx = activePoints[0]['_index'];
                              //         var label = chartData.labels[idx];
                              //         var value = chartData.datasets[0].data[idx];
                              //         var color = chartData.datasets[0].backgroundColor[idx]; //Or any other data you wish to take from the clicked slice
                              //         var id_ciclo = graph_array4_ids[idx];
                              //         var id_time = $('#selectedTime').val();
                              //         $scope.FilterChartByClickOnChart(id_ciclo, id_time);
                              //     }
                              //     $(".scroller-height-charts").animate({
                              //         scrollTop: $("#goalstable").offset().top
                              //     }, 500);
                              // },
                              // "animation": {
                              //     // "duration": 1,
                              //     "onComplete": function() {
                              //         var chartInstance = this.chart,
                              //             ctx = chartInstance.ctx;
                              //         ctx.fillStyle = 'black';
                              //         ctx.font = '12px Calibri';
                              //     }
                              // // },
                              // legend: {
                              //     display: true,
                              // },
                              tooltips: {
                                    mode: 'index',
                                    intersect: false,
                                    // mode: 'single',
                                    // callbacks: {
                                    //     label: function(tooltipItems, data) {
                                    //         return tooltipItems.yLabel;
                                    //     }
                                    // }
                              },
                              maintainAspectRatio: false,
                              scales: {
                                    yAxes: [{
                                          gridLines: {
                                                display: true
                                          },
                                          ticks: {
                                                display: true
                                          }
                                    }],
                                    xAxes: [{
                                          gridLines: {
                                                display: true
                                          }
                                    }]
                              },
                              layout: {
                                    padding: {
                                          left: 0,
                                          right: 0,
                                          top: 20,
                                          bottom: 0
                                    }
                              }
                        }
                  });
                  myNewChart.clear();
                  myNewChart.update();
            });
      }

      $('#tipo_acomp').change(function() {
            $scope.keyDetails.acomp = $(this).val();
            $scope.$apply();
            console.log("acomp:", $scope.keyDetails);
            if ($(this).val() == 1) {
                  $('#tipo_pattern').select2('destroy');
                  $('#tipo_pattern').select2();
                  $('#tipo_pattern').select2('val', 4);
                  $('#tipo_pattern').addClass('disable-content');
            } else {
                  $('#tipo_pattern').select2('destroy');
                  $('#tipo_pattern').select2();
                  $('#tipo_pattern').select2('val', 0);
                  $('#tipo_pattern').removeClass('disable-content');
            }
            $scope.editKeyresultDetail(true);
            $scope.loadHistorica();
      });

      $scope.editKeyresultDetail = function(fromAccompFlag = false) {
            $scope.isKeyresultEditing = true;
            if ($scope.keyDetails.acomp != 1 && !fromAccompFlag) {
                  $('#minimo').focus();
                  var temp  = $('#minimo').val();
                  $('#minimo').val('');
                  $('#minimo').val(temp);
            } else if ($scope.keyDetails.acomp == 1) {
                  $('#minimo_date').datepicker("destroy");
                  $('#minimo_date').datepicker();
                  $('#maximo_date').datepicker("destroy");
                  $('#maximo_date').datepicker();
                  $('#target_date').datepicker("destroy");
                  $('#target_date').datepicker();
                  $('#tipo_pattern').addClass('disable-content');
            }
      }

      $scope.dismissEditingKeyresultDetail = function() {
            $scope.isKeyresultEditing = false;
      }

      $scope.saveKeyresultDetail = function() {
            var id_key = $('#okr_medicaoes #id_key_result').val();
            var data = {
                  id_key: id_key,
                  inferior: $('#minimo').val().replace(',','.'),
                  superior: $('#maximo').val().replace(',','.'),
                  target: $('#target').val().replace(',','.'),
                  peso: $('#peso').val(),
                  nome: $('#keyresult_name').val(),
                  descricao: $('#keyresult_descricao').val(),
                  forma: $('#forma_type').val(),
                  sistema_origem: $('#sistema_origem').val(),
                  acomp: $scope.keyDetails.acomp,
                  pattern: $('#tipo_pattern').val(),
                  calculo: $('#forma_calculo').val(),
                  unidade: $('#unidade').val(),
                  direcao: $('#direcao').val()
            };
            if (data.acomp == 1) {
                  data.minimo_date = $('#minimo_date').val();
                  data.target_date = $('#target_date').val();
                  data.maximo_date = $('#maximo_date').val();
            }
            $tatics['editKeyresultDetailMedicao'](data).then(function(response) {
                  toastr.success('Successfully saved');
                  $scope.okrMedicaoes_details();
            });
      }

      $scope.tipo_formas = [{
                  id: "1",
                  name: "Automática"
            },
            {
                  id: "2",
                  name: "Manual"
            }
      ];
      $scope.acompTipos = [{
                  id: "0",
                  name: "Numérico"
            },
            {
                  id: "1",
                  name: "Cronograma"
            }
      ];
      $scope.patterns = [{
                  id: "0",
                  name: "Número"
            },
            {
                  id: "1",
                  name: "Monetário"
            },
            {
                  id: "2",
                  name: "Percentual"
            },
            {
                  id: "3",
                  name: "Inteiro"
            },
            {
                  id: "4",
                  name: "Data"
            },
            {
                  id: "5",
                  name: "Numérico 3 casas decimais"
            },
            {
                  id: "6",
                  name: "Monetário Reduzido"
            }

      ];
      $scope.formaCalculos = [{
                  id: "0",
                  name: "média das linhas preenchidas"
            },
            {
                  id: "1",
                  name: "total proporcional"
            },
            {
                  id: "2",
                  name: "total absoluto"
            },
            {
                id: "3",
                name: "última linha preenchida"
            },
            {
                id: "4",
                name: "manual"
            }
      ];
      $scope.direcao = [{
                id: "0",
                name: "Maior Melhor"
          },
          {
                id: "1",
                name: "Menor Melhor"
          }
      ];

      $scope.okrMedicaoes_details = function(id = 0) {
            if (id != 0) {
                  var id_key = id;
            } else {
                  var id_key = $('#okr_medicaoes #id_key_result').val();
            }
            $tatics['getResultadosDetailsById'](id_key).then(function(response) {
                  $scope.isKeyresultEditing = false;
                  $scope.keyDetails = response[0];
                  $scope.keyDetails.sistema_origem = $scope.keyDetails.sistema_origem ? parseInt($scope.keyDetails.sistema_origem) : '';
                  setTimeout(function() {
                        $("#forma_type").select2();
                        $("#forma_type").val($scope.keyDetails.forma);
                        $("#tipo_acomp").select2();
                        $("#tipo_acomp").val($scope.keyDetails.acomp);
                        $("#tipo_pattern").select2();
                        $("#tipo_pattern").val($scope.keyDetails.pattern);
                        $("#forma_calculo").select2();
                        $("#forma_calculo").val($scope.keyDetails.calculo);
                        $("#direcao").select2();
                        $("#direcao").val($scope.keyDetails.direcao);
                        setTimeout(function() {
                              $("#forma_type").select2();
                              $("#tipo_acomp").select2();
                              $("#tipo_pattern").select2();
                              $("#forma_calculo").select2();
                              $("#direcao").select2();
                        }, 500);
                  }, 1000);
                  $scope.keyDetails.inferior = formatPattern($scope.keyDetails.inferior, $scope.keyDetails.pattern);
                  $scope.keyDetails.superior = formatPattern($scope.keyDetails.superior, $scope.keyDetails.pattern);
                  $scope.keyDetails.goal = formatPattern($scope.keyDetails.goal, $scope.keyDetails.pattern);
                  $scope.keyDetails.Medicao = formatPattern($scope.keyDetails.Medicao, $scope.keyDetails.pattern);
                  $scope.keyDetails.meta_final_prevista = formatPattern($scope.keyDetails.meta_final_prevista, $scope.keyDetails.pattern);
                  if ($scope.keyDetails.pattern == 0) {
                        $scope.keyDetails.Medicao = formatPercent($scope.keyDetails.Medicao);
                        $scope.keyDetails.meta_final_prevista = formatPercent($scope.keyDetails.meta_final_prevista);
                  }
                  $('#minimo').val($scope.keyDetails.inferior);
                  $('#maximo').val($scope.keyDetails.superior);
                  $('#target').val($scope.keyDetails.goal);
                  $scope.table_data = response[1];
                  $scope.chart_data = response[1];
                  $scope.loadHistorica();
                  var chart_data = $scope.chart_data;
                  var years = ["x"];
                  var required_values = ["Progresso Atual"];
                  var actual_values = ["Alvo"];
                  if (chart_data.length > 0) {
                        for (var i = 0; i < chart_data.length; i++) {
                              years.push(chart_data[i].data_semana);
                              required_values.push(chart_data[i].medicao_realizada);
                              actual_values.push(chart_data[i].meta_prevista_acumulada);
                        }
                  }
                  var chart = c3.generate({
                        bindto: '#kr_chart',
                        data: {
                              x: 'x',
                              //        xFormat: '%Y%m%d', // 'xFormat' can be used as custom format of 'x'
                              columns: [
                                    years,
                                    required_values,
                                    actual_values
                              ]
                        },
                        axis: {
                              x: {
                                    type: 'timeseries',
                                    tick: {
                                          format: '%m-%Y',
                                          fit: true,
                                          connectNull: true,
                                    }
                              }
                        }
                  });
                  setTimeout(function() {
                        chart.load({
                              columns: [
                                    years,
                                    required_values,
                                    actual_values
                              ]
                        });
                  }, 1000);
            });
      }
      $scope.selectPercepcao = function(keyresult, value) {
            keyresult.percepcao = value;
      }
      $scope.viewTypeTab1 = function() {
            $scope.typetab = 1;
      }
      $scope.viewTypeTab2 = function() {
            var id_key = $('#okr_medicaoes #id_key_result').val();
            $key['getMedicaosByIdKey'](id_key).then(function(response) {
                  $scope.medicaoes = response;
            });
            $scope.typetab = 2;
      }
      $scope.update_confirm = function(id) {
            $("#userId").val(id);
      }
      $scope.update = function() {
            var id = $("#userId").val();
            $key['update_user'](id).then(function(response) {
                  $("#myModal .noButton").trigger('click');
                  $scope.viewTypeTab2();
                  $scope.loadDefaultCharts();
            });
      }
      $scope.datafunction = function() {
            $timeout(function() {
                  if ($.isFunction($.fn.datepicker)) {
                        $(".data").each(function(i, el) {
                              var $this = $(this),
                                    opts = {
                                          format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                                          startDate: attrDefault($this, 'startDate', ''),
                                          endDate: attrDefault($this, 'endDate', ''),
                                          daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                                          startView: attrDefault($this, 'startView', 0),
                                          language: 'pt-BR',
                                          rtl: rtl()
                                    },
                                    $n = $this.next(),
                                    $p = $this.prev();
                              $this.datepicker(opts);
                              if ($n.is('.input-group-addon') && $n.has('a')) {
                                    $n.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                              if ($p.is('.input-group-addon') && $p.has('a')) {
                                    $p.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                        });
                  }
            }, 100);
      }
      $scope.showUpdateForm = false;;
      $scope.viewUpdateForm = function() {
            $scope.datafunction();
            $scope.showUpdateForm = true;
      }
      // adding measure on modal
      $scope.submitMeasurementNew = function() {
            $('#form-measurement_new').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        data: 'required',
                        medicao: 'required'
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  submitHandler: function(form) {
                        var taticId = $('#taticId').val(),
                              fileInput = $('#measure-files'),
                              files = fileInput[0].files;
                        var data = {
                              id: $scope.chartKeyId,
                              date: $('#measure-date').val(),
                              value: $('#measure-value').val(),
                              comentary: $('#measure-description').val(),
                        }
                        $scope.form = new FormData();
                        $.each(data, function(key, value) {
                              $scope.form.append(key, value);
                        });
                        $scope.form.append("percepcao", $scope.s_percepcao);
                        for (var i = 0; i < files.length; i++) {
                              $scope.form.append("files[]", files[i]);
                        }
                        $('#form-measurement_new .salvar').button('loading');
                        $key['measure']($scope.form).then(function(response) {
                              $scope.okrMedicaoes_details($scope.chartKeyId);
                              $scope.loadDefaultCharts($scope.chartKeyId);
                              $('#form-measurement_new')[0].reset();
                              $('#form-measurement_new .salvar').button('reset');
                              toastr.success('Successfully saved');
                              $scope.resetTaticKeys();
                              $key['getMedicaosByIdKey']($scope.chartKeyId).then(function(response) {
                                    $scope.medicaoes = response;
                              });
                        });
                  }
            });
      }
      // adding measure on modal end
      $scope.submitMeasurement = function() {
            $('#form-measurement').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        data: 'required',
                        medicao: 'required'
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  submitHandler: function(form) {
                        var taticId = $('#taticId').val(),
                              fileInput = $('#measure-files'),
                              files = fileInput[0].files;
                        var id_key = $('#okr_medicaoes #id_key_result').val();
                        var data = {
                              id: $('#okr_medicaoes #id_key_result').val(),
                              date: $('#measure-date').val(),
                              value: $('#measure-value').val(),
                              comentary: $('#measure-description').val(),
                        }
                        $scope.form = new FormData();
                        $.each(data, function(key, value) {
                              $scope.form.append(key, value);
                        });
                        $scope.form.append("percepcao", $scope.keyDetails.percepcao);
                        for (var i = 0; i < files.length; i++) {
                              $scope.form.append("files[]", files[i]);
                        }
                        $('#form-measurement .salvar').button('loading');
                        $key['measure']($scope.form).then(function(response) {
                              $scope.okrMedicaoes_details();
                              $scope.loadDefaultCharts();
                              $('#form-measurement')[0].reset();
                              $('#form-measurement .salvar').button('reset');
                              toastr.success('Successfully saved');
                              //$('#modal-measure').modal('hide');
                              $key['getMedicaosByIdKey'](id_key).then(function(response) {
                                    $scope.medicaoes = response;
                              });
                        });
                  }
            });
            $scope.viewTypeTab2();
            $scope.loadDefaultCharts();
      }
      $scope.direcionadorperfil = false;
      $scope.objetivoperfil = false;
      $scope.link_text_perfil = 'Direcionador';
      $scope.linkTypePerfil = function($type) {
            $("#okr-objectives-perfil").select2({
                  allowClear: true
            });
            if ($("#direcionador-perfil").prop('checked') || $("#objetivo-perfil").prop('checked') || $("#estrategico-perfil").prop('checked')) {
                  if ($type == 1) {
                        $scope.link_text_perfil = 'Direcionador';
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                        });
                        delete $scope.objetivoperfil;
                        delete $scope.estrategicoperfil;
                  }
                  if ($type == 2) {
                        $scope.link_text_perfil = 'Objetivo';
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                        });
                        delete $scope.direcionadorperfil;
                        delete $scope.estrategicoperfil;
                  }
                  if ($type == 3) {
                        $scope.link_text_perfil = 'Estrategico';
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                        });
                        delete $scope.direcionadorperfil;
                        delete $scope.objetivoperfil;
                  }
            } else {
                  $("#okr-objectives-perfil").select2({
                        allowClear: true
                  });
                  $scope.objectives = [];
                  delete $scope.objetivoperfil;
                  delete $scope.direcionadorperfil;
            }
      }
      $scope.key_list_perfil = new Array();
      var counter_perfil = 0;
      $scope.addNewKeyPerfil = function() {
            var data = {
                  index: counter_perfil,
                  name: $('#okr_keyresult_name_perfil').val(),
                  type: $('#okr_keyresult_type_perfil').val(),
                  medida: $('#okr_keyresult_medida_perfil').val(),
                  start: $('#okr_ponto_partida_perfil').val(),
                  goal: $('#okr_meta_perfil').val(),
            }
            if (data.name != '') {
                  $scope.key_list_perfil.push(data);
                  counter_perfil++;
            }
            $('#okr_keyresult_name_perfil').val('');
            $('#okr_keyresult_type_perfil').val('');
            $('#okr_keyresult_medida_perfil').val('');
            $('#okr_ponto_partida_perfil').val('');
            $('#okr_meta_perfil').val('');
            $('select#okr_keyresult_type_perfil').select2('destroy');
            $('select.types-okr-tatic').select2({
                  allowClear: true
            });
            delete $scope.okr_ponto_partida_perfil;
            delete $scope.okr_meta_perfil;
      }
      $scope.editKeyResultPerfil = function(id) {
            $scope.editKeyBtnPerfil = 1;
            $('select#okr_keyresult_type_perfil').select2('destroy');
            var edit_data = $scope.key_list_perfil[id];
            $scope.index_id = edit_data.index;
            $scope.okr_keyresult_name_perfil = edit_data.name;
            $scope.okr_keyresult_type_perfil = edit_data.type;
            $scope.okr_keyresult_medida_perfil = edit_data.medida;
            $scope.okr_ponto_partida_perfil = edit_data.start;
            $scope.okr_meta_perfil = edit_data.goal;
            $('#okr_keyresult_name_perfil').val($scope.okr_keyresult_name_perfil);
            $('#okr_keyresult_medida_perfil').val($scope.okr_keyresult_medida_perfil);
            $('#okr_ponto_partida_perfil').val($scope.okr_ponto_partida_perfil);
            $('#okr_meta_perfil').val($scope.okr_meta_perfil);
            $('#okr_keyresult_type_perfil').val($scope.okr_keyresult_type_perfil);
            $('select.types-okr-tatic').select2({
                  allowClear: true
            });
      }
      $scope.editSubmitNewKeyPerfil = function(index_id) {
            $scope.key_list_perfil[index_id].name = $('#okr_keyresult_name_perfil').val();
            $scope.key_list_perfil[index_id].type = $('#okr_keyresult_type_perfil').val();
            $scope.key_list_perfil[index_id].medida = $('#okr_keyresult_medida_perfil').val();
            $scope.key_list_perfil[index_id].start = $('#okr_ponto_partida_perfil').val();
            $scope.key_list_perfil[index_id].goal = $('#okr_meta_perfil').val();
            $('#okr_keyresult_name_perfil').val('');
            $('#okr_keyresult_type_perfil').val('');
            $('#okr_keyresult_medida_perfil').val('');
            $('#okr_ponto_partida_perfil').val('');
            $('#okr_meta_perfil').val('');
            $('select#okr_keyresult_type_perfil').select2('destroy');
            $('select.types-okr-tatic').select2({
                  allowClear: true
            });
            delete $scope.editKeyBtnPerfil;
            delete $scope.okr_ponto_partida_perfil;
            delete $scope.okr_meta_perfil;
      }
      $scope.deleteKeyPerfil = function(index_id) {
            if ($scope.index_id == index_id) {
                  $('#okr_keyresult_name_perfil').val('');
                  $('#okr_keyresult_type_perfil').val('');
                  $('#okr_keyresult_medida_perfil').val('');
                  $('#okr_ponto_partida_perfil').val('');
                  $('#okr_meta_perfil').val('');
                  $('select#okr_keyresult_type_perfil').select2('destroy');
                  $('select.types-okr-tatic').select2({
                        allowClear: true
                  });
                  delete $scope.editKeyBtnPerfil;
            }
            $scope.key_list_perfil.splice(index_id);
      }
      $scope.initGoals = function() {
            $globals['get_objectives']($scope.selectedYear, 1).then(function(response) {
                  $scope.objectives = response;
            });
      }
      // modal novo okr
      $scope.okrperfil = function() {
            $('#form-okrperfil')[0].reset();
            $scope.link_text_perfil = 'Direcionador';
            $scope.cyclesOkrPerfil = [];
            $scope.currentYearOkrPerfil = null;
            $scope.cyclesModelOkrPerfil = null;
            $scope.initGoals();
            $scope.ObjectiveIdPerfil = null;
            $('#okr-year-perfil').val('');
            $('#form-okrperfil .select2').select2('destroy');
            $('#form-okrperfil #okr-user-perfil').select2('destroy');
            $('#form-okrperfil .allusers-newteams').multiSelect('destroy');
            $('#okr_keyresult_type_perfil').select2('destroy');
            $('#form-okrperfil #okr-team-perfil').select2('destroy');
            $('#okr-objectives-perfil').select2('destroy');
            $('#okr-cycles-perfil').select2('destroy');
            if ($('#okr-year-perfil').hasClass('visible')) {
                  var selectBox = $("#okr-year-perfil").data("selectBox-selectBoxIt");
                  $('#okr-year-perfil').removeClass('visible');
                  selectBox.destroy();
            }
            $timeout(function() {
                  $('#form-okrperfil #okr-objectives-perfil').val('');
                  $('#form-okrperfil #okr-objectives-perfil').select2();
                  $("#form-okrperfil #individualPrefile").prop('checked', true);
                  $('#form-okrperfil #direcionador-perfil').prop('checked', true);
                  $('#form-okrperfil #okr_keyresult_type_perfil').select2({
                        allowClear: true
                  }).addClass('visible');
                  $('#form-okrperfil #okr-team-perfil').val($scope.user.usuarioviewTime.id_time);
                  $('#form-okrperfil #okr-team-perfil').select2({
                        allowClear: true
                  });
                  $('#form-okrperfil .allusers-newteams').multiSelect();
                  $('select.usuario-okrperfil').select2({
                        allowClear: true
                  }).addClass('visible');
                  $('select.times-okrperfil').select2({
                        allowClear: true
                  }).addClass('visible');
            }, 200);
            $('#form-okrperfil #okr-year-perfil').addClass('visible').selectBoxIt();
            $("#responsavel_section_prefil").css("display", "block");
            $scope.selectedTipoPrefil = 'i';
            $('#new-okr-perfil').modal('show', {
                  backdrop: 'static'
            });
      }
      $("#new-okr-perfil").on("hidden.bs.modal", function() {
            delete $scope.estrategicoperfil;
            $scope.key_list_perfil = [];
            delete $scope.okr_keyresult_name_perfil;
            delete $scope.okr_keyresult_medida_perfil;
            delete $scope.okr_ponto_partida_perfil;
            delete $scope.okr_meta_perfil;
            delete $scope.editKeyBtnPerfil;
            $('#form-okrperfil')[0].reset();
      });
      $scope.changeCycleOkrPerfil = function() {
            $cycles['getByYear']($scope.currentYearOkrPerfil).then(function(response) {
                  $scope.direcionadorperfil = null;
                  $scope.cyclesOkrPerfil = response;
                  $timeout(function() {
                        $('#okr-cycles-perfil').select2();
                  }, 10);
            });
      }
      // Validacao Novo Okr
      $('#form-okrperfil').validate({
            ignore: [],
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            rules: {
                  nome: 'required',
                  descricao: 'required',
                  usuario: 'required',
                  time: 'required',
                  ano: 'required',
                  tipo: 'required',
                  clicos: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var $post_keylist_perfil = new Array();
                  if ($scope.key_list_perfil) {
                        $.each($scope.key_list_perfil, function(index, value) {
                              delete value.$$hashKey;
                              $post_keylist_perfil.push(value);
                        });
                  }
                  var parent_id = $('#form-okrperfil').find("#okr-objectives-perfil").val();
                  if (parent_id == "") {
                        parent_id = 0;
                  }
                  var tipo = $scope.selectedTipoPrefil;
                  if (tipo == 't') {
                        var data = {
                              parent_id: parent_id,
                              name: $('#okr-name-perfil').val(),
                              description: $('#okr-description-perfil').val(),
                              user: $scope.user.id,
                              team: $('#okr-team-perfil').val(),
                              tipo: $("#form-okrperfil [name='tipo']:checked").val(),
                              estrategico: $("#form-okrperfil [name='estrategicoperfil']:checked").val(),
                              weight: 1,
                              cycles: $scope.cyclesModelOkrPerfil,
                              keyresults: $post_keylist_perfil
                        }
                  } else if (tipo == 'c') {
                        var data = {
                              parent_id: parent_id,
                              name: $('#okr-name-perfil').val(),
                              description: $('#okr-description-perfil').val(),
                              user: $scope.user.id,
                              team: $scope.user.usuarioviewTime.id_time,
                              tipo: $("#form-okrperfil [name='tipo']:checked").val(),
                              estrategico: $("#form-okrperfil [name='estrategicoperfil']:checked").val(),
                              weight: 1,
                              cycles: $scope.cyclesModelOkrPerfil,
                              keyresults: $post_keylist_perfil,
                              resptimes: $scope.userNewTeamsPerfil,
                        }
                  } else {
                        var userresp = $('#okr-user-perfil').val();
                        var arrresp = userresp.split(':');
                        var data = {
                              parent_id: parent_id,
                              name: $('#okr-name-perfil').val(),
                              description: $('#okr-description-perfil').val(),
                              user: arrresp[1],
                              team: $('#okr-team-perfil').val(),
                              tipo: $("#form-okrperfil [name='tipo']:checked").val(),
                              estrategico: $("#form-okrperfil [name='estrategicoperfil']:checked").val(),
                              weight: 1,
                              cycles: $scope.cyclesModelOkrPerfil,
                              keyresults: $post_keylist_perfil
                        }
                  }
                  $('#form-okrperfil .salvar').button('loading');
                  $tatics['insert'](data).then(function(response) {
                        toastr.success('Objetivo adicionado com sucesso.');
                        $tatics['getAll']($scope.selectedYear, $scope.user.usuarioviewTime.id_time).then(function(tatics) {
                              $scope.tatics = tatics;
                              $scope.formatPatternOkr();
                              $timeout(function() {
                                    $("#Section6").getNiceScroll().resize();
                              }, 100);
                        });
                        $('#form-okrperfil')[0].reset();
                        $('#new-okr-perfil').modal('hide');
                        $('#form-okrperfil .salvar').button('reset');
                        $tatics['getAllForProfile']().then(function(profiletatics) {
                              $scope.profiletatics = profiletatics;
                        });
                        delete $scope.key_list_perfil;
                        delete $scope.estrategicoperfil;
                  });
            }
      });
      $('#estrategicoperfil').click(function() {
            if ($("#form-okrperfil [name='estrategicoperfil']:checked").val() != '1') {
                  $('#okr-objectives-perfil .select2').select2('destroy');
                  $timeout(function() {
                        $('#okr-objectives-perfil').select2({
                              allowClear: true
                        }).addClass('visible');
                  }, 400);
            }
      });
      $scope.getPrefilUserTeam = function() {
            var user_id = $scope.selectedPrefilUser;
            $users['getselecteduserteam'](user_id).then(function(results) {
                  var afterHavingAllTeams = function() {
                        $("#okr-team-perfil").select2('destroy');
                        if (results) {
                              for (var i = 0; i < $scope.teams.length; i++) {
                                    if ($scope.teams[i].id == results) {
                                          $('#okr-team-perfil optgroup option[value="' + $scope.teams[i].id + '"]').attr('selected', 'selected');
                                    }
                              };
                        } else {
                              $('#okr-team-perfil option[value=""]').attr('selected', 'selected');
                        }
                        $("#okr-team-perfil").select2();
                  }
                  if (!$scope.teams || $scope.teams.length == 0) {
                        $teams['getAllTeams']().then(function(response) {
                              $scope.teams = response;
                              afterHavingAllTeams();
                        });
                  } else {
                        afterHavingAllTeams();
                  }
            });
      };
      $scope.showResponsavelPrefil = function() {
            if ($scope.selectedTipoPrefil == 'i') {
                  $("#responsavel_section_prefil").css("display", "block");
                  $("#team_section_prefil").css("display", "block");
                  $("#team_section_prefil").removeClass("col-md-12");
                  $("#team_section_prefil").addClass("col-md-6");
            } else if ($scope.selectedTipoPrefil == 't') {
                  $("#responsavel_section_prefil").css("display", "none");
                  $("#team_section_prefil").css("display", "block");
                  $("#team_section_prefil").removeClass("col-md-6");
                  $("#team_section_prefil").addClass("col-md-12");
            } else {
                  $users['get']().then(function(response) {
                        $("#okr-user-perfil").select2('destroy');
                        $scope.users = response;
                        $users['me']().then(function(response1) {
                              $scope.meuser = response1;
                              for (var i = 0; i < $scope.users.length; i++) {
                                    if ($scope.users[i].id == $scope.meuser.id) {
                                          $('#okr-user-perfil option').attr('selected', false);
                                          $('#okr-user-perfil optgroup option[ng-value="' + $scope.users[i].id + '"]').attr('selected', 'selected');
                                    }
                                    $("#okr-user-perfil").select2();
                              };
                        });
                  });
                  var afterHavingAllTeams = function() {
                        $("#okr-team-perfil").select2('destroy');
                        $users['me']().then(function(response3) {
                              $scope.meuser = response3;
                              for (var i = 0; i < $scope.teams.length; i++) {
                                    if ($scope.teams[i].id == $scope.meuser.usuarioviewTime.id_time) {
                                          $('#okr-team-perfil option').attr('selected', false);
                                          $('#okr-team-perfil optgroup option[ng-value="' + $scope.teams[i].id + '"]').attr('selected', 'selected');
                                    }
                                    $("#okr-team-perfil").select2();
                              };
                        });
                  }
                  if (!$scope.teams || $scope.teams.length == 0) {
                        $teams['getAllTeams']().then(function(response2) {
                              $scope.teams = response2;
                              afterHavingAllTeams();
                        });
                  } else {
                        afterHavingAllTeams();
                  }
                  $("#responsavel_section_prefil").css("display", "none");
                  $("#team_section_prefil").css("display", "none");
            }
      };
      $scope.DeleteTatic = function(objectivo_id, active) {
            $('#delete-tatic-modal').modal('show', {
                  backdrop: 'static'
            });
            $('#performTask').click(function() {
                  $tatics['deactive_objectivo'](objectivo_id, active).then(function(results) {
                        $tatics['getAll']($scope.selectedYear, $scope.user.usuarioviewTime.id_time).then(function(tatics) {
                              $('#toast-container').html('');
                              toastr.success('Objetivo inativado com sucesso.');
                              $scope.tatics = tatics;
                              $scope.formatPatternOkr();
                              $scope.profiletatics = tatics;
                              $scope.mytatics = tatics;
                              $scope.hierarchicaltatics = tatics;
                        });
                        $timeout(function() {
                              $scope.filter();
                        }, 300);
                        $('#delete-tatic-modal').modal('hide');
                  });
            });
      }
      $scope.OkrTab = function(objectivo_id, active) {
            // $scope.hierarchicaltatics = [];
            $scope.okrtab = 1;
            // var id_ciclo = $scope.selectedCycle;
            // var user_id = $scope.selectedUser;
            // $tatics['getAll']($scope.selectedYear, $scope.user.usuarioviewTime.id_time, id_ciclo, user_id).then(function(alltatics) {
            //     $scope.tatics = alltatics;
            // });
            //console.log("tatics length okrr", $scope.tatics.length, $scope.q);
            if ($scope.teamsNotAddedSelectedOkr1.length > 0) {
                  var teamsNotAddedOkr1 = $scope.teamsNotAddedOkr1;
                  $.each($scope.teamsNotAddedSelectedOkr1, function(i, val) {
                        for (var i = teamsNotAddedOkr1.length - 1; i >= 0; --i) {
                              if (teamsNotAddedOkr1[i].id == val.id) {
                                    teamsNotAddedOkr1.splice(i, 1);
                              }
                        }
                  });
            }
      }
      $scope.HierarchicalTab = function(objectivo_id, active) {
            // $scope.tatics = [];
            //console.log("tatics length hierarchicaltatics", $scope.tatics.length, $scope.q);
            $scope.okrtab = 2;
            if ($scope.user.usuarioviewTime) {
                  var id_time = $scope.user.usuarioviewTime.id_time ? $scope.user.usuarioviewTime.id_time : 0;
            } else {
                  var id_time = 0;
            }
            var user_id = $scope.selectedUserher;
            if (!user_id) {
                  user_id = $scope.user.id;
            }
            $tatics['getAllHierarchicaltatics']($scope.selectedYear, id_time, $scope.selectedCycleHer, user_id).then(function(hierarchicaltatics) {
                  $scope.hierarchicaltatics = hierarchicaltatics;
            });
            if ($scope.teamsNotAddedSelectedOkr2.length > 0) {
                  var teamsNotAddedOkr2 = $scope.teamsNotAddedOkr2;
                  $.each($scope.teamsNotAddedSelectedOkr2, function(i, val) {
                        for (var i = teamsNotAddedOkr2.length - 1; i >= 0; --i) {
                              if (teamsNotAddedOkr2[i].id == val.id) {
                                    teamsNotAddedOkr2.splice(i, 1);
                              }
                        }
                  });
            }
      }
      $scope.myActivitiesTab = function(objectivo_id, active) {
            // $scope.tatics = [];
            //console.log("tatics length activities", $scope.tatics.length, $scope.q);
            $scope.hierarchicaltatics = [];
            $scope.okrtab = 4;
            $('#search-user-my_activities').select2();
            $('#search-team-my_activities').select2();
            $scope.getAllTeams();
            $timeout(function() {
                  $scope.contentLoading++;
                  $tatics['searchmyactivitiesokr']().then(function(activities) {
                        $('#tbl_activities').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                        $scope.contentLoading--;
                        $scope.activities = activities;
                  });
            }, 10);
      }

      $scope.myObjectivesTab = function(objectivo_id, active) {
            // $scope.tatics = [];
            //console.log("tatics length activities", $scope.tatics.length, $scope.q);
            $scope.hierarchicaltatics = [];
            $scope.okrtab = 5;
            $('#search-user-my_activities').select2();
            $('#search-team-my_activities').select2();
            $scope.getAllTeams();
            $timeout(function() {
                  $scope.contentLoading++;
                  $tatics['searchmyactivitiesokr']().then(function(activities) {
                        $('#tbl_activities').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                        $scope.contentLoading--;
                        $scope.activities = activities;
                  });
            }, 10);
      }

      $scope.downloadActCsv = function() {
            $tatics['download_activity_csv']().then(function(response) {
                  window.location.href = response;
                  $scope.response = response;
            });
      }
      $scope.viewsColumsFilter = function() {
            $timeout(function() {
                  $('#section_filter_box').niceScroll({
                        cursorcolor: "#03a9f4",
                        cursorborder: "none"
                  });
                  window.dispatchEvent(new Event('resize'));
            }, 100);
      }
      $scope.viewColumn = function(event, column_name, type_value) {
            $("#viewmorecolumn").addClass('open');
            if (column_name == 'nome_tipo_ativ') {
                  if ($scope.type_column) {
                        delete $scope.type_column;
                  } else {
                        $scope.type_column = 1;
                  }
            }
            if (column_name == 'descr_atividade') {
                  if ($scope.description_column) {
                        delete $scope.description_column;
                  } else {
                        $scope.description_column = 1;
                  }
            }
            if (column_name == 'descr_situacao_ativ') {
                  if ($scope.situation_column) {
                        delete $scope.situation_column;
                  } else {
                        $scope.situation_column = 1;
                  }
            }
            if (column_name == 'nome_empresa') {
                  if ($scope.empresa_name_column) {
                        delete $scope.empresa_name_column;
                  } else {
                        $scope.empresa_name_column = 1;
                  }
            }
            if (column_name == 'nome_time') {
                  if ($scope.team_name_column) {
                        delete $scope.team_name_column;
                  } else {
                        $scope.team_name_column = 1;
                  }
            }
            if (column_name == 'nome_objetivo') {
                  if ($scope.objective_name_column) {
                        delete $scope.objective_name_column;
                  } else {
                        $scope.objective_name_column = 1;
                  }
            }
            if (column_name == 'progresso_objetivo') {
                  if ($scope.objective_progress_column) {
                        delete $scope.objective_progress_column;
                  } else {
                        $scope.objective_progress_column = 1;
                  }
            }
            if (column_name == 'descricao_objetivo') {
                  if ($scope.objective_description_column) {
                        delete $scope.objective_description_column;
                  } else {
                        $scope.objective_description_column = 1;
                  }
            }
            if (column_name == 'data_ini_objetivo') {
                  if ($scope.objetivo_start_column) {
                        delete $scope.objetivo_start_column;
                  } else {
                        $scope.objetivo_start_column = 1;
                  }
            }
            if (column_name == 'data_fim_objetivo') {
                  if ($scope.objetivo_end_column) {
                        delete $scope.objetivo_end_column;
                  } else {
                        $scope.objetivo_end_column = 1;
                  }
            }
            if (column_name == 'objetivo_pai') {
                  if ($scope.objetivo_pai_column) {
                        delete $scope.objetivo_pai_column;
                  } else {
                        $scope.objetivo_pai_column = 1;
                  }
            }
            if (column_name == 'descr_situacao') {
                  if ($scope.descr_situacao_column) {
                        delete $scope.descr_situacao_column;
                  } else {
                        $scope.descr_situacao_column = 1;
                  }
            }
            if (column_name == 'nome_RChave') {
                  if ($scope.nome_RChave_column) {
                        delete $scope.nome_RChave_column;
                  } else {
                        $scope.nome_RChave_column = 1;
                  }
            }
            if (column_name == 'descr_RChave') {
                  if ($scope.descr_RChave_column) {
                        delete $scope.descr_RChave_column;
                  } else {
                        $scope.descr_RChave_column = 1;
                  }
            }
            if (column_name == 'meta_final_prev_RChave') {
                  if ($scope.meta_final_column) {
                        delete $scope.meta_final_column;
                  } else {
                        $scope.meta_final_column = 1;
                  }
            }
            if (column_name == 'medicao_RChave') {
                  if ($scope.Medicao_rchave_column) {
                        delete $scope.Medicao_rchave_column;
                  } else {
                        $scope.Medicao_rchave_column = 1;
                  }
            }
            if (column_name == 'peso_RChave') {
                  if ($scope.Peso_rchave_column) {
                        delete $scope.Peso_rchave_column;
                  } else {
                        $scope.Peso_rchave_column = 1;
                  }
            }
            if (column_name == 'progresso_RChave') {
                  if ($scope.Progress_rchave_column) {
                        delete $scope.Progress_rchave_column;
                  } else {
                        $scope.Progress_rchave_column = 1;
                  }
            }
            if (column_name == 'nome_resp_RChave') {
                  if ($scope.Responsival_rchave_column) {
                        delete $scope.Responsival_rchave_column;
                  } else {
                        $scope.Responsival_rchave_column = 1;
                  }
            }
            if (column_name == 'descr_RChave') {
                  if ($scope.Rchave_description_column) {
                        delete $scope.Rchave_description_column;
                  } else {
                        $scope.Rchave_description_column = 1;
                  }
            }
            if (column_name == 'Data_execucao') {
                  if ($scope.Data_execucao) {
                        delete $scope.Data_execucao;
                  } else {
                        $scope.Data_execucao = 1;
                  }
            }
            if (column_name == 'Nome_usuario') {
                  if ($scope.Nome_usuario) {
                        delete $scope.Nome_usuario;
                  } else {
                        $scope.Nome_usuario = 1;
                  }
            }
            if (column_name == 'percentual_avaliacao') {
                  if ($scope.percentual_avaliacao) {
                        delete $scope.percentual_avaliacao;
                  } else {
                        $scope.percentual_avaliacao = 1;
                  }
            }
            if (column_name == 'peso') {
                  if ($scope.peso) {
                        delete $scope.peso;
                  } else {
                        $scope.peso = 1;
                  }
            }
            if (column_name == 'qtd_objetivos') {
                  if ($scope.qtd_objetivos) {
                        delete $scope.qtd_objetivos;
                  } else {
                        $scope.qtd_objetivos = 1;
                  }
            }
            if (column_name == 'qtd_atividades') {
                  if ($scope.qtd_atividades) {
                        delete $scope.qtd_atividades;
                  } else {
                        $scope.qtd_atividades = 1;
                  }
            }
            if (column_name == 'qtd_rchaves') {
                  if ($scope.qtd_rchaves) {
                        delete $scope.qtd_rchaves;
                  } else {
                        $scope.qtd_rchaves = 1;
                  }
            }
            if (column_name == 'publico') {
                  if ($scope.publico) {
                        delete $scope.publico;
                  } else {
                        $scope.publico = 1;
                  }
            }
            if (column_name == 'situacao') {
                  if ($scope.situacao) {
                        delete $scope.situacao;
                  } else {
                        $scope.situacao = 1;
                  }
            }
            if (column_name == 'avaliacao') {
                  if ($scope.avaliacao) {
                        delete $scope.avaliacao;
                  } else {
                        $scope.avaliacao = 1;
                  }
            }
            if (column_name == 'descr_avaliacao') {
                  if ($scope.descr_avaliacao) {
                        delete $scope.descr_avaliacao;
                  } else {
                        $scope.descr_avaliacao = 1;
                  }
            }
            if (column_name == 'destaque') {
                  if ($scope.destaque) {
                        delete $scope.destaque;
                  } else {
                        $scope.destaque = 1;
                  }
            }
            if (column_name == 'data_atualiz_obj') {
                  if ($scope.data_atualiz_obj) {
                        delete $scope.data_atualiz_obj;
                  } else {
                        $scope.data_atualiz_obj = 1;
                  }
            }
            if (column_name == 'ativo') {
                  if ($scope.ativo) {
                        delete $scope.ativo;
                  } else {
                        $scope.ativo = 1;
                  }
            }
            if (column_name == 'corresponsaveis') {
                  if ($scope.corresponsaveis) {
                        delete $scope.corresponsaveis;
                  } else {
                        $scope.corresponsaveis = 1;
                  }
            }
            if (column_name == 'frequencia_RChave') {
                  if ($scope.frequencia_RChave) {
                        delete $scope.frequencia_RChave;
                  } else {
                        $scope.frequencia_RChave = 1;
                  }
            }
            if (column_name == 'unidade_meta_RChave') {
                  if ($scope.unidade_meta_RChave) {
                        delete $scope.unidade_meta_RChave;
                  } else {
                        $scope.unidade_meta_RChave = 1;
                  }
            }
            if (column_name == 'progresso_ajust_RChave') {
                  if ($scope.progresso_ajust_RChave) {
                        delete $scope.progresso_ajust_RChave;
                  } else {
                        $scope.progresso_ajust_RChave = 1;
                  }
            }
            if (column_name == 'corresponsaveis_RChave') {
                  if ($scope.corresponsaveis_RChave) {
                        delete $scope.corresponsaveis_RChave;
                  } else {
                        $scope.corresponsaveis_RChave = 1;
                  }
            }
            if (column_name == 'publico_RChave') {
                  if ($scope.publico_RChave) {
                        delete $scope.publico_RChave;
                  } else {
                        $scope.publico_RChave = 1;
                  }
            }
            if (column_name == 'situacao_RChave') {
                  if ($scope.situacao_RChave) {
                        delete $scope.situacao_RChave;
                  } else {
                        $scope.situacao_RChave = 1;
                  }
            }
            if (column_name == 'descr_situacao_RChave') {
                  if ($scope.descr_situacao_RChave) {
                        delete $scope.descr_situacao_RChave;
                  } else {
                        $scope.descr_situacao_RChave = 1;
                  }
            }
            if (column_name == 'tipo_calculo_RChave') {
                  if ($scope.tipo_calculo_RChave) {
                        delete $scope.tipo_calculo_RChave;
                  } else {
                        $scope.tipo_calculo_RChave = 1;
                  }
            }
            if (column_name == 'data_atualiz_RChave') {
                  if ($scope.data_atualiz_RChave) {
                        delete $scope.data_atualiz_RChave;
                  } else {
                        $scope.data_atualiz_RChave = 1;
                  }
            }
            if (column_name == 'ativo_RChave') {
                  if ($scope.ativo_RChave) {
                        delete $scope.ativo_RChave;
                  } else {
                        $scope.ativo_RChave = 1;
                  }
            }
            if (column_name == 'descr_situacao') {
                  if ($scope.descr_situacao) {
                        delete $scope.descr_situacao;
                  } else {
                        $scope.descr_situacao = 1;
                  }
            }
            if (column_name == 'hierarquia_times') {
                  if ($scope.hierarquia_times) {
                        delete $scope.hierarquia_times;
                  } else {
                        $scope.hierarquia_times = 1;
                  }
            }
            if (column_name == 'hora_ativ') {
                  if ($scope.hora_ativ) {
                        delete $scope.hora_ativ;
                  } else {
                        $scope.hora_ativ = 1;
                  }
            }
            if (column_name == 'data_fim_real_ativ') {
                  if ($scope.data_fim_real_ativ) {
                        delete $scope.data_fim_real_ativ;
                  } else {
                        $scope.data_fim_real_ativ = 1;
                  }
            }
            if (column_name == 'situacao_ativ') {
                  if ($scope.situacao_ativ) {
                        delete $scope.situacao_ativ;
                  } else {
                        $scope.situacao_ativ = 1;
                  }
            }
            if (column_name == 'corresponsaveis_ativ') {
                  if ($scope.corresponsaveis_ativ) {
                        delete $scope.corresponsaveis_ativ;
                  } else {
                        $scope.corresponsaveis_ativ = 1;
                  }
            }
            if (column_name == 'data_atualiz_ativ') {
                  if ($scope.data_atualiz_ativ) {
                        delete $scope.data_atualiz_ativ;
                  } else {
                        $scope.data_atualiz_ativ = 1;
                  }
            }
            if (column_name == 'nome_time_atv') {
                  if ($scope.nome_time_atv) {
                        delete $scope.nome_time_atv;
                  } else {
                        $scope.nome_time_atv = 1;
                  }
            }
            $timeout(function() {
                  $('#tbl_activities').niceScroll({
                        cursorcolor: "#03a9f4",
                        cursorborder: "none"
                  });
                  window.dispatchEvent(new Event('resize'));
            }, 100);
            return true;
      }
      $scope.searchName = function() {
            $scope.q = $scope.query;
      }
      $scope.onlyMe = false;
      $scope.my = function() {
            if ($scope.onlyMe) {
                  $scope.userId = '';
                  $scope.onlyMe = false;
            } else {
                  $scope.userId = $scope.$parent.user['id'];
                  $scope.onlyMe = true;
            }
      }
      $pesquisaquestion['getAllTagsPesquisa']().then(function(res) {
            $scope.teamTags = res;
            setTagField($('#selectd_tags'), $("#search-team"), $('#chekd_tags'));
            setTagField($('#selectd_tags_her'), $("#search-team-her"), $('#chekd_tags_her'));
            setTagField($('#selectd_tags_activities'), $("#search-team-my_activities"), $('#chekd_tags_activities'));
      });

      function setTagField(tagsInput, teamInput, checkAllTagInput) {
            tagsInput.select2('destroy');
            $timeout(function() {
                  tagsInput.select2();
                  checkAllTagInput.change(function() {
                        console.log("chnged");
                        if ($(this).is(':checked')) {
                              tagsInput.find("> option").prop("selected", "selected");
                        } else {
                              tagsInput.find("> option").removeAttr("selected");
                        }
                        tagsInput.trigger("change");
                  });
                  tagsInput.change(function() {
                        var selectd_tags = $(this).val();
                        var strTags = '';
                        if (selectd_tags != null) {
                              var strTags = selectd_tags.join(",");
                        }
                        $scope.id_tags = strTags;
                        teamInput.select2("val", "");
                        var select_val = new Array();
                        $pesquisaquestion['getAllTeamsPesquisa'](strTags).then(function(response) {
                              if (response.length > 0) {
                                    for (var i = 0; i < response.length; i++) {
                                          select_val.push(response[i].id);
                                    }
                              }
                              var teamsId = '';
                              $timeout(function() {
                                    if (selectd_tags.length > 0) {
                                          teamInput.select2('val', select_val);
                                          teamsId = select_val.join(",");
                                    }
                              });
                        });
                  });
            }, 200);
      }
      $tags['get']().then(function(response) {
            $scope.tags = response;
            var tagsNames = new Bloodhound({
                  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                  queryTokenizer: Bloodhound.tokenizers.whitespace,
                  local: $scope.tags
            });
            tagsNames.initialize();
            $('.search-all-tags').typeahead({
                  hint: true,
                  highlight: true,
                  minLength: 1
            }, {
                  name: 'tagnames',
                  displayKey: 'name',
                  valueKey: 'name',
                  source: tagsNames.ttAdapter()
            });
      });
      $scope.statusText = function(value) {
            var items = ['Pendente', 'Finalizado', 'Cancelado', 'Em andamento'];
            return items[value];
      }
      $users['me']().then(function(res) {
            $scope.user = res;
            /* filter for ano, cycles, objectivo starts for okr main */
            $('#form-search select.usuario').select2({
                  allowClear: true
            }).addClass('visible');
            $('#form-search select.time').select2({
                  allowClear: true
            }).addClass('visible');
            $('#form-search select.color').select2({
                  allowClear: true
            }).addClass('visible');
            $('#form-search-her select.colorher').select2({
                  allowClear: true
            }).addClass('visible');
            $('#form-search-my select.colormy').select2({
                  allowClear: true
            }).addClass('visible');
            $('#form-search #search-team').select2();
            $('#form-search #search-cycles').select2();
            $('#form-search #search-year').select2('destroy');
            $('#form-search #search-year').removeClass('visible');
            $('#form-search #search-user').select2('val', '');
            $('#form-search #search-team').select2('val', '');
            $('#form-search #search-cycles').select2('val', '');
            $('#form-search #search-year').val($scope.selectedYear);
            $scope.selectedYearName = $scope.selectedYear;
            $timeout(function() {
                  $('#form-search #search-year').select2({
                        allowClear: true,
                        minimumResultsForSearch: -1
                  }).addClass('visible');
                  $('#form-search #search-user').select2('val', $scope.user.id);
                  $('#form-search #search-team').select2('val', $scope.user.usuarioviewTime.id_time);
                  $('#form-search #search-cycles').select2('val', $scope.user.selectedCycle);
            }, 1000);
            $scope.loadCycles = function() {
                  var formCycles = $('#form-search .filter_form_view.cycles');
                  var formGlobals = $('#form-search .filter_form_view.globals');
                  if ($scope.selectedYearName) {
                        $cycles['getByYear']($scope.selectedYearName).then(function(response) {
                              $scope.cycles = response;
                              $timeout(function() {
                                    formCycles.removeClass('hidden');
                                    $('#form-search select.trimestres').select2('destroy');
                                    $('#form-search select.trimestres').select2({
                                          allowClear: true,
                                          minimumResultsForSearch: -1
                                    }).addClass('visible');
                              }, 10);
                        });
                        $globals['get']($scope.selectedYearName).then(function(response) {
                              $scope.objectives = response;
                              $timeout(function() {
                                    formGlobals.removeClass('hidden');
                                    $('#form-search select.globals').select2('destroy');
                                    $('#form-search select.globals').select2({
                                          allowClear: true,
                                          minimumResultsForSearch: -1
                                    }).addClass('visible');
                              }, 10);
                        });
                  } else {
                        formCycles.addClass('hidden');
                        formGlobals.addClass('hidden');
                  }
            }
            if (!$scope.selectedYearName) {
                  $('#form-search .filter_form_view.cycles').addClass('hidden');
                  $('#form-search .filter_form_view.globals').addClass('hidden');
            }
            /* filter for ano, cycles, objectivo end for okr main */
            /* filter for ano, cycles, objectivo starts for herirical main */
            $scope.loadCyclesHer = function() {
                  var formCycles = $('#form-search-her .filter_form_view.cyclesHer');
                  var formGlobals = $('#form-search-her .filter_form_view.globalsHer');
                  if ($scope.selectedYearNameHer) {
                        $cycles['getByYear']($scope.selectedYearNameHer).then(function(response) {
                              $scope.cycles = response;
                              $timeout(function() {
                                    formCycles.removeClass('hidden');
                                    $('#form-search-her select.trimestres').select2('destroy');
                                    $('#form-search-her select.trimestres').select2({
                                          allowClear: true,
                                          minimumResultsForSearch: -1
                                    }).addClass('visible');
                              }, 10);
                        });
                        $globals['get']($scope.selectedYearNameHer).then(function(response) {
                              $scope.objectives = response;
                              $timeout(function() {
                                    formGlobals.removeClass('hidden');
                                    $('#form-search-her select.globalsHer').select2('destroy');
                                    $('#form-search-her select.globalsHer').select2({
                                          allowClear: true,
                                          minimumResultsForSearch: -1
                                    }).addClass('visible');
                              }, 10);
                        });
                  } else {
                        formCycles.addClass('hidden');
                        formGlobals.addClass('hidden');
                  }
            }
            if (!$scope.selectedYearNameHer) {
                  $('#form-search-her .filter_form_view.cycles').addClass('hidden');
                  $('#form-search-her .filter_form_view.globals').addClass('hidden');
            }
            $('#form-search-her #search-year-her').select2('destroy');
            $('#form-search-her #search-year-her').removeClass('visible');
            $('#form-search-her #search-user-her').select2();
            $('#form-search-her #search-team-her').select2();
            $('#form-search-her #search-cycle-her').select2();
            $('#form-search-her #search-user-her').select2('val', '');
            $('#form-search-her #search-team-her').select2('val', '');
            $('#form-search-her #search-cycle-her').select2('val', '');
            $('#form-search-her #search-year-her').val($scope.selectedYear);
            $scope.selectedYearNameHer = $scope.selectedYear;
            $timeout(function() {
                  $('#form-search-her #search-year-her').select2({
                        allowClear: true,
                        minimumResultsForSearch: -1
                  }).addClass('visible');
                  $('#form-search-her #search-user-her').select2('val', $scope.user.id);
                  $('#form-search-her #search-team-her').select2('val', $scope.user.usuarioviewTime.id_time);
                  $('#form-search-her #search-cycle-her').select2('val', $scope.selectedCycleHer);
            }, 1000);
            /* filter for ano, cycles, objectivo end for herirical main */
            /* filter for ano, cycles, objectivo starts for my okr main */
            $scope.loadCyclesMy = function() {
                  var formCycles = $('#form-search-my .filter_form_view.cyclesMy');
                  var formGlobals = $('#form-search-my .filter_form_view.globalsMy');
                  if ($scope.selectedYearNameMy) {
                        $cycles['getByYear']($scope.selectedYearNameMy).then(function(response) {
                              $scope.cycles = response;
                              $timeout(function() {
                                    formCycles.removeClass('hidden');
                                    $('#form-search-my select.trimestres').select2('destroy');
                                    $('#form-search-my select.trimestres').select2({
                                          allowClear: true,
                                          minimumResultsForSearch: -1
                                    }).addClass('visible');
                              }, 10);
                        });
                        $globals['get']($scope.selectedYearNameMy).then(function(response) {
                              $scope.objectives = response;
                              $timeout(function() {
                                    formGlobals.removeClass('hidden');
                                    $('#form-search-my select.globalsMy').select2('destroy');
                                    $('#form-search-my select.globalsMy').select2({
                                          allowClear: true,
                                          minimumResultsForSearch: -1
                                    }).addClass('visible');
                              }, 10);
                        });
                  } else {
                        formCycles.addClass('hidden');
                        formGlobals.addClass('hidden');
                  }
            }
            if (!$scope.selectedYearNameHer) {
                  $('#form-search-my .filter_form_view.cycles').addClass('hidden');
                  $('#form-search-my .filter_form_view.globals').addClass('hidden');
            }
            $('#form-search-my #search-user-my').select2();
            $('#form-search-my #search-team-my').select2();
            $('#form-search-my #search-cycle-my').select2();
            $('#form-search-my #search-year-my').select2('destroy');
            $('#form-search-my #search-year-my').removeClass('visible');
            $('#form-search-my #search-user-my').select2('val', '');
            $('#form-search-my #search-team-my').select2('val', '');
            $('#form-search-my #search-cycle-my').select2('val', '');
            $('#form-search-my #search-year-my').val($scope.selectedYear);
            $scope.selectedYearNameMy = $scope.selectedYear;
            $timeout(function() {
                  $('#form-search-my #search-year-my').select2({
                        allowClear: true,
                        minimumResultsForSearch: -1
                  }).addClass('visible');
                  $('#form-search-my #search-user-my').select2('val', $scope.user.id);
                  $('#form-search-my #search-team-my').select2('val', $scope.user.usuarioviewTime.id_time);
                  $('#form-search-my #search-cycle-my').select2('val', $scope.selectedCycleMy);
            }, 1000);
            /* filter for ano, cycles, objectivo end for my okr main */
      });
      $scope.okrfilterd = false;
      $scope.filter = function() {
            $scope.okrfilterd = true;
            $scope.q = $scope.query;
            $scope.selectedColorVisaoOkr = $scope.selectedColorVisao;
            $scope.yearName = $scope.selectedYearName;
            $scope.objectiveId = $scope.selectedId;
            $scope.onlyMe = false;
            var user_id = [];
            user_id = $('#search-user').val();
            if (user_id && user_id.length > 0) {
                  user_id = user_id.join(',');
            }
            var team_id = [];
            var teamsselected = $scope.teamsNotAddedSelectedOkr1;
            if (teamsselected && teamsselected.length > 0) {
                  $.each(teamsselected, function(key, value) {
                        team_id.push(value.id);
                  });
            }
            if (team_id && team_id.length > 0) {
                  team_id = team_id.join(',');
            }
            var cycle_id = [];
            cycle_id = $('#search-cycle').val();
            if (cycle_id && cycle_id.length > 0) {
                  cycle_id = cycle_id.join(',');
            }
            var selSituation = [];
            if ($scope.selectedSituation) {
                  angular.forEach($scope.selectedSituation, function(item, key) {
                        if (item) selSituation.push(key);
                  });
            }
            var selType = [];
            if ($scope.selectedType) {
                  for (var i = 0; i < 4; i++) {
                        if ($scope.selectedType[i]) {
                              selType.push($scope.selectedType[i]);
                        }
                  };
            }
            $scope.contentLoading++;
            $tatics['getAll']($scope.yearName, team_id, cycle_id, user_id, $scope.estrategicofilter, selSituation, selType, $scope.selectedColorVisao, $scope.selectedWorkflow).then(function(tatics) {
                  $scope.tatics = tatics;
                  $scope.formatPatternOkr();
                  console.log("okrs", tatics);
                  $scope.contentLoading--;
            });
            // $scope.hide_filter1();
      }

      $scope.formatPatternOkr = function() {
            angular.forEach($scope.tatics, function(tatic, key1) {
                  angular.forEach(tatic.keys, function(keyresult, key2) {
                        if (keyresult.pattern == 0) {
                              keyresult.de = formatPercent(keyresult.de);
                              keyresult.para = formatPercent(keyresult.para);
                              keyresult.atual = formatPercent(keyresult.atual);
                        } else {
                              keyresult.de = formatPattern(keyresult.de, keyresult.pattern);
                              keyresult.para = formatPattern(keyresult.para, keyresult.pattern);
                              keyresult.atual = formatPattern(keyresult.atual, keyresult.pattern);
                        }
                  });
            });
      }

      $scope.exportOkrCsv = function() {
            $('#exportTeam').val($scope.getTeamsString());
            $('#exportCycle').val($scope.getCyclesString());
            $('#exportResponsavel').val($scope.getResponsavelsString());
            $('#form-export-okr-csv').submit();
      }
      $scope.getTeamsString = function() {
            var team_id = [];
            var teamsselected = $scope.teamsNotAddedSelectedOkr1;
            if (teamsselected && teamsselected.length > 0) {
                  $.each(teamsselected, function(key, value) {
                        team_id.push(value.id);
                  });
            } else return null;
            if (team_id && team_id.length > 0) {
                  team_id = team_id.join(',');
            }
            return team_id;
      }
      $scope.getCyclesString = function() {
            var cycle_id = [];
            cycle_id = $('#search-cycle').val();
            if (cycle_id && cycle_id.length > 0) {
                  cycle_id = cycle_id.join(',');
            } else return null;
            return cycle_id;
      }
      $scope.getResponsavelsString = function() {
            var user_id = [];
            user_id = $('#search-user').val();
            if (user_id && user_id.length > 0) {
                  user_id = user_id.join(',');
            } else return null;
            return user_id;
      }
      $('#chekd6').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-user > option").prop("selected", "selected");
            } else {
                  $("#search-user > option").removeAttr("selected");
            }
            $("#search-user").trigger("change");
      });
      $('#chekd7').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-team > option").prop("selected", "selected");
            } else {
                  $("#search-team > option").removeAttr("selected");
            }
            $("#search-team").trigger("change");
      });
      $('#chekd_trimstre').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-cycle > option").prop("selected", "selected");
            } else {
                  $("#search-cycle > option").removeAttr("selected");
            }
            $("#search-cycle").trigger("change");
      });
      $('#chekd_her6').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-user-her > option").prop("selected", "selected");
            } else {
                  $("#search-user-her > option").removeAttr("selected");
            }
            $("#search-user-her").trigger("change");
      });
      $('#chekd_her7').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-team-her > option").prop("selected", "selected");
            } else {
                  $("#search-team-her > option").removeAttr("selected");
            }
            $("#search-team-her").trigger("change");
      });
      $('#chekd_trimstre_her').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-cycle-her > option").prop("selected", "selected");
            } else {
                  $("#search-cycle-her > option").removeAttr("selected");
            }
            $("#search-cycle-her").trigger("change");
      });
      $('#chekd_my6').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-user-my > option").prop("selected", "selected");
            } else {
                  $("#search-user-my > option").removeAttr("selected");
            }
            $("#search-user-my").trigger("change");
      });
      $('#chekd_my7').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-team-my > option").prop("selected", "selected");
            } else {
                  $("#search-team-my > option").removeAttr("selected");
            }
            $("#search-team-my").trigger("change");
      });
      $('#chekd_trimstre_my').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-cycle-my > option").prop("selected", "selected");
            } else {
                  $("#search-cycle-my > option").removeAttr("selected");
            }
            $("#search-cycle-my").trigger("change");
      });
      $('#chekd_my6_activities').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-user-my_activities > option").prop("selected", "selected");
            } else {
                  $("#search-user-my_activities > option").removeAttr("selected");
            }
            $("#search-user-my_activities").trigger("change");
      });
      $('#chekd_my7_activities').change(function() {
            if ($(this).is(':checked')) {
                  $("#search-team-my_activities > option").prop("selected", "selected");
            } else {
                  $("#search-team-my_activities > option").removeAttr("selected");
            }
            $("#search-team-my_activities").trigger("change");
      });
      $scope.reset = function() {
            $('#form-search')[0].reset();
            $scope.query = '';
            $scope.selectedSituation = null;
            $scope.selectedType = {};
            $scope.selectedUser = '';
            $scope.selectedTeam = '';
            $scope.selectedYearName = '';
            $scope.selectedCycle = '';
            $scope.selectedId = '';
            delete $scope.selectedColorVisaoOkr;
            delete $scope.selectedColorVisao;
            delete $scope.selectedWorkflow;
            $scope.teamsNotAddedSelectedOkr1 = [];
            $scope.getAllTeams();
            $(".color").select2('destroy');
            $(".color").select2();
            $("#search-cycle").select2();
            $("#search-objectives").select2();
            $('#form-search #search-year').select2('destroy');
            $('#form-search #search-year').removeClass('visible');
            $('#form-search #search-user').select2('destroy');
            $('#form-search #search-user').removeClass('visible');
            $('#form-search #search-cycle').select2('destroy');
            $('#form-search #search-cycle').removeClass('visible');
            $('#form-search #search-year').val();
            $('#form-search #search-user').val();
            $('#form-search #search-team').val();
            $('#form-search #search-cycle').val();
            $timeout(function() {
                  $('#form-search #search-year').select2({
                        allowClear: true,
                        minimumResultsForSearch: -1
                  }).addClass('visible');
                  $('#form-search #search-user').select2({
                        allowClear: true,
                        minimumResultsForSearch: -1
                  }).addClass('visible');
                  $('#form-search #search-team').select2('val', '');
                  $('#form-search #search-cycle').select2({
                        allowClear: true,
                        minimumResultsForSearch: -1
                  }).addClass('visible');
            }, 100);
            $scope.filter();
            $scope.view_filter1();
      }
      $scope.okrfilterd_her = false;
      $scope.filter_her = function() {
            $scope.okrfilterd_her = true;
            $scope.qher = $scope.queryher;
            $scope.selectedColorHerOkr = $scope.selectedColorHer;
            $scope.yearNameHer = $scope.selectedYearNameHer;
            $scope.cycleIdHer = $scope.selectedCycleHer;
            $scope.objectiveIdher = $scope.selectedIdHer;
            $scope.onlyMe = false;
            var user_id = [];
            user_id = $('#search-user-her').val();
            if (user_id && user_id.length > 0) {
                  user_id = user_id.join(',');
            }
            var team_id = [];
            var teamsselected = $scope.teamsNotAddedSelectedOkr2;
            if (teamsselected && teamsselected.length > 0) {
                  $.each(teamsselected, function(key, value) {
                        team_id.push(value.id);
                  });
            }
            //team_id = $('#search-team-her').val();
            if (team_id && team_id.length > 0) {
                  team_id = team_id.join(',');
            }
            var cycle_id = [];
            cycle_id = $('#search-cycle-her').val();
            if (cycle_id && cycle_id.length > 0) {
                  cycle_id = cycle_id.join(',');
            }
            var hselSituation = [];
            if ($scope.selectedSituationher) {
                  angular.forEach($scope.selectedSituationher, function(item, key) {
                        if (item) hselSituation.push(key);
                  });
            }
            var hselType = [];
            if ($scope.selectedTypeher) {
                  for (var i = 0; i < 4; i++) {
                        if ($scope.selectedTypeher[i]) {
                              hselType.push($scope.selectedTypeher[i]);
                        }
                  };
            }
            $scope.contentLoading++;
            $tatics['getAllHierarchicaltatics']($scope.yearNameHer, team_id, cycle_id, user_id, $scope.hestrategicofilter, hselSituation, hselType, $scope.selectedColorHer).then(function(hierarchicaltatics) {
                  $scope.hierarchicaltatics = hierarchicaltatics;
                  $scope.contentLoading--;
            });
            // $scope.hide_filter2();
      }
      $scope.reset_her = function() {
            $('#form-search-her')[0].reset();
            delete $scope.selectedColorHerOkr;
            delete $scope.selectedColorHer;
            $scope.queryher = '';
            $scope.selectedSituationher = [];
            $scope.selectedUserher = '';
            $scope.selectedTeamher = '';
            $scope.selectedYearNameHer = '';
            $scope.selectedCycleHer = '';
            $scope.selectedIdHer = '';
            $scope.teamsNotAddedSelectedOkr2 = [];
            $scope.getAllTeams();
            $(".colorher").select2('destroy');
            $(".colorher").select2();
            $('#form-search-her #search-year-her').select2('destroy');
            $('#form-search-her #search-year-her').removeClass('visible');
            $('#form-search-her #search-user-her').select2('destroy');
            $('#form-search-her #search-user-her').removeClass('visible');
            $('#form-search-her #search-cycle-her').select2('destroy');
            $('#form-search-her #search-cycle-her').removeClass('visible');
            $('#form-search-her #search-year-her').val();
            $('#form-search-her #search-user-her').val();
            $('#form-search-her #search-team-her').val();
            $('#form-search-her #search-cycle-her').val();
            $timeout(function() {
                  $('#form-search-her #search-year-her').select2({
                        allowClear: true,
                        minimumResultsForSearch: -1
                  }).addClass('visible');
                  $('#form-search-her #search-user-her').select2({
                        allowClear: true,
                        minimumResultsForSearch: -1
                  }).addClass('visible');
                  $('#form-search-her #search-team-her').select2('val', '');
                  $('#form-search-her #search-cycle-her').select2({
                        allowClear: true,
                        minimumResultsForSearch: -1
                  }).addClass('visible');
            }, 100);
            $("#search-cycle-her").select2();
            $("#search-objectives-her").select2();
            $scope.filter_her();
            $scope.view_filter2();
      }
      $scope.okrfilterd_my_activities = false;
      $scope.filter_my_activities = function() {
            $scope.okrfilterd_my_activities = true;
            $scope.q_my_activities = $scope.query_my_activities;
            $scope.ActiveSearchModel = $scope.ActiveSearch;
            $scope.AtrasadoSearchModel = $scope.AtrasadoSearch;
            var user_id = [];
            user_id = $('#search-user-my_activities').val();
            if (user_id && user_id.length > 0) {
                  user_id = user_id.join(',');
            }
            var team_id = [];
            var teamsselected = $scope.teamsNotAddedSelectedOkr3;
            if (teamsselected && teamsselected.length > 0) {
                  $.each(teamsselected, function(key, value) {
                        team_id.push(value.id);
                  });
            }
            //team_id = $('#search-team-my_activities').val();
            if (team_id && team_id.length > 0) {
                  team_id = team_id.join(',');
            }
            var aselSituation = [];
            if ($scope.selectedSituation_my_activities) {
                  angular.forEach($scope.selectedSituation_my_activities, function(item, key) {
                        if (item) aselSituation.push(key);
                  });
            }
            $scope.contentLoading++;
            $tatics['searchmyactivitiesokr'](user_id, team_id, aselSituation).then(function(activities) {
                  $('#tbl_activities').niceScroll({
                        cursorcolor: "#03a9f4",
                        cursorborder: "none"
                  });
                  $scope.contentLoading--;
                  $scope.activities = activities;
            });
            // $scope.hide_filter4();
      }
      $scope.reset_my_activities = function() {
            $('#form-search-my-activities')[0].reset();
            delete $scope.ActiveSearchModel;
            delete $scope.ActiveSearch;
            delete $scope.AtrasadoSearchModel;
            delete $scope.AtrasadoSearch;
            $scope.query_my_activities = '';
            $scope.selectedSituation_my_activities = [];
            $scope.selectedUser_my_activities = '';
            $scope.selectedTeam_my_activities = '';
            $scope.teamsNotAddedSelectedOkr3 = [];
            $scope.getAllTeams();
            $("#search-user-my_activities").select2('destroy');
            $("#search-team-my_activities").select2('destroy');
            $("#search-user-my_activities").select2();
            $("#search-team-my_activities").select2();
            $scope.filter_my_activities();
            $scope.view_filter4();
      }
      $scope.updatePercentage = function($key) {
            $timeout(function() {
                  var self = $('.item' + $key);
                  self.find('span.pie').peity("pie");
            }, 10);
      }
      $("#modal-measure").on("hidden.bs.modal", function() {
            delete $scope.model_tipo_calculo;
      });
      $scope.modalMeasure = function(taticId, $key_id, $tipo_calculo) {
            if ($tipo_calculo != 1) {
                  $('#modal-measure').find(".tipo_calculo").show();
            } else {
                  $('#modal-measure').find(".tipo_calculo").hide();
            }
            $scope.model_tipo_calculo = $tipo_calculo;
            $('#form-measure')[0].reset();
            $scope.inputs = [];
            $scope.key_id = $key_id;
            $scope.tatic_id = taticId;
            $scope.measures = false;
            var increment = 0;
            $key['measureList']($scope.key_id).then(function(response) {
                  $scope.measures = response;
            });
            var tatic;
            for (var i = 0, leng = $scope.tatics.length; i < leng; i++) {
                  if ($scope.tatics[i].id === taticId) {
                        tatic = i;
                  }
            };
            var key;
            for (var i = 0, leng = $scope.tatics[tatic].keys.length; i < leng; i++) {
                  if ($scope.tatics[tatic].keys[i].id === $key_id) {
                        key = i;
                        $scope.measureText = $scope.tatics[tatic].keys[i].title;
                  }
            };
            $scope.incrementInput = function() {
                  increment++;
                  $scope.inputs.push(increment);
            }
            $('#modal-measure').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.deleteKeyResults = function($key_id) {
            $('#delete-key-results').modal('show', {
                  backdrop: 'static'
            });
            $('#deleteKeyAction').click(function() {
                  $key['deleteKeyResultsByid']($key_id).then(function(response) {
                        toastr.success('Resultado chave eliminado.');
                        $tatics['getAll']($scope.yearName, $scope.teamId).then(function(tatics) {
                              $scope.tatics = tatics;
                              $scope.formatPatternOkr();
                        });
                        $tatics['getMyAllGlobaltatics']($scope.yearName, $scope.teamId, $scope.selectedCycleMy, $scope.user.id).then(function(mytatics) {
                              $scope.mytatics = mytatics;
                        });
                        $('#delete-key-results').modal('hide');
                  });
            });
      }
      $scope.modalKeyResult = function($key_id) {
            $scope.key_id = $key_id;
            $scope.keyDetail = false;
            $scope.keyDetailUser = '';
            $scope.keyDetailUsers = [];
            $scope.keyWeight = 1;
            $scope.frequencyKey = 0;
            $scope.chkd_manutencao = false;
            $scope.frequencies = [{
                        id: '0',
                        name: 'Selecione'
                  },
                  {
                        id: '1',
                        name: 'Diário'
                  },
                  {
                        id: '2',
                        name: 'Semanal'
                  },
                  {
                        id: '3',
                        name: 'Mensal'
                  },
                  {
                        id: '4',
                        name: 'Trimestral'
                  },
                  {
                        id: '5',
                        name: 'Anual'
                  }
            ];
            //var selectBox = $('.select-frequency').select2();
            $('#form-key-result #key-frequency').select2('destroy');
            $('#form-key-result #tipo_calculo').select2('destroy');
            if (!$key_id) {
                  $('#form-key-result #tipo_calculo').select2();
                  $('#form-key-result #key-frequency').select2();
                  $('#form-key-result #key_pattern').select2();
            }
            $('#modal-key-result .multi-select').multiSelect('destroy');
            $timeout(function() {
                  $('#modal-key-result .multi-select').multiSelect();
            }, 300);
            if ($('#modal-key-result .input-tags-key').prev().is('.bootstrap-tagsinput')) {
                  $('#modal-key-result .input-tags-key').tagsinput('removeAll');
                  $('#modal-key-result .input-tags-key').tagsinput('destroy');
            }
            var $user = $('#form-key-result #key-user'),
                  opts = {
                        allowClear: attrDefault($user, 'allowClear', false)
                  };
            $user.select2(opts);
            $user.addClass('visible');
            $users['get']().then(function(response) {
                  $scope.users = response;
                  if (!$key_id) {
                        var $user = $('#modal-key-result #key-user'),
                              opts = {
                                    allowClear: attrDefault($user, 'allowClear', false)
                              };
                        $('#modal-key-result #key-user').select2('destroy');
                        $user.select2(opts);
                        $user.addClass('visible');
                        //$('.select-frequency').addClass('visible').select2();
                  }
                  $('.multi-select.users-key').multiSelect();
            });
            $tags['get']().then(function(tags) {
                  $scope.$parent.tags = tags;
                  var tagsNames = new Bloodhound({
                        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                        queryTokenizer: Bloodhound.tokenizers.whitespace,
                        local: $scope.$parent.tags
                  });
                  tagsNames.initialize();
                  $('#modal-key-result #key-tags-rchave').tagsinput({
                        typeaheadjs: {
                              name: 'tagnames',
                              displayKey: 'name',
                              valueKey: 'name',
                              source: tagsNames.ttAdapter()
                        }
                  });
                  $('#form-key-result').on('keyup keypress', function(e) {
                        var keyCode = e.keyCode || e.which;
                        if (keyCode === 13) {
                              e.preventDefault();
                              return false;
                        }
                  });
                  $('#modal-key-result #key-tags-rchave').on('itemAdded', function(event) {
                        var tag = event.item;
                  });
            });
            $('#form-key-result #key-frequency').select2('destroy');
            $('#form-key-result #key-frequency').select2();
            $('#form-key-result #periodicidade').select2('destroy');
            $('#form-key-result #periodicidade').select2();
            $('#form-key-result #periodicidade').select2('val', 't');

            if ($key_id) {
                  $key['details']($key_id).then(function(response) {
                        $scope.keyDetail = response;
                        $scope.keyDetailUser = $scope.keyDetail.user.id;
                        $scope.keyDetailUsers = $scope.keyDetail.users;
                        $scope.keyWeight = $scope.keyDetail.weight;
                        $scope.frequencyKey = $scope.keyDetail.frequency;
                        var $user = $('#key-user'),
                              opts = {
                                    allowClear: attrDefault($user, 'allowClear', false)
                              };
                        $('#modal-key-result #key-user').select2('destroy');
                        $('#modal-key-result #key-user').val(response.user.id);
                        $user.select2(opts);
                        $user.addClass('visible');
                        $('#form-key-result #key-frequency').val(response.frequency);
                        $('#form-key-result #key-frequency').select2();
                        //$('#key-frequency').addClass('visible').selectBoxIt();
                        $('#form-key-result #tipo_calculo').val(response.tipo_calculo);
                        $('#form-key-result #tipo_calculo').select2();
                        $('#form-key-result #periodicidade').val(response.periodicidade);
                        $('#form-key-result #periodicidade').select2();
                        $timeout(function() {
                              if (response.manutencao == 1) {
                                    $(document).find('#form-key-result #chkd_manutencao').prop('checked', true);
                                    $scope.chkd_manutencao = true;
                              } else {
                                    $(document).find('#form-key-result #chkd_manutencao').prop('checked', false);
                                    $scope.chkd_manutencao = false;
                              }
                        }, 300);
                        for (var i = 0; i < $scope.keyDetail.tag.length; i++) {
                              $('#modal-key-result .input-tags-key').tagsinput('add', $scope.keyDetail.tag[i].name);
                        };
                        var array = [];
                        for (var i = 0; i < $scope.keyDetail.users.length; i++) {
                              array.push($scope.keyDetail.users[i].id);
                        };
                        $('.multi-select.users-key').multiSelect('select', array);
                        $scope.tipo_calculo = response.type;
                        if (response.type == 2 && response.tipo_calculo == 1) {
                              $('#tipo_calculo').select2('destroy');
                              $('#tipo_calculo').val(response.type);
                              $('#tipo_calculo').select2();
                              $timeout(function() {
                                    $(document).find('#chkd_tipo').prop('checked', true);
                              }, 300);
                        } else if (response.type == 2 && response.tipo_calculo == 0) {
                              $('#tipo_calculo').select2('destroy');
                              $('#tipo_calculo').val(response.type);
                              $('#tipo_calculo').select2();
                              $timeout(function() {
                                    $(document).find('#chkd_tipo').prop('checked', false);
                              }, 300);
                        } else if (response.type == null) {
                              if (response.tipo_calculo == 0 && response.direcao == 0) {
                                    $('#tipo_calculo').select2('destroy');
                                    $('#tipo_calculo').val(0);
                                    $('#tipo_calculo').select2();
                              }
                              if (response.tipo_calculo == 0 && response.direcao == 1) {
                                    $('#tipo_calculo').select2('destroy');
                                    $('#tipo_calculo').val(1);
                                    $('#tipo_calculo').select2();
                              }
                              $timeout(function() {
                                    $(document).find('#chkd_tipo').prop('checked', false);
                              }, 300);
                        } else {
                              $('#tipo_calculo').select2('destroy');
                              $('#tipo_calculo').val(response.type);
                              $('#tipo_calculo').select2();
                              $timeout(function() {
                                    $(document).find('#chkd_tipo').prop('checked', false);
                              }, 300);
                        }
                  });
            }
            $('#modal-key-result').modal('show', {
                  backdrop: 'static'
            });
      }
      $('#tipo_calculo').change(function() {
            if ($(this).val() == 2) {
                  $timeout(function() {
                        $(document).find('#chkd_tipo').prop('checked', true);
                  }, 200);
            }
      });
      $scope.numberLessKey = function() {
            var val = $scope.keyWeight;
            var newVal = val > .1 ? val - .1 : 1;
            $scope.keyWeight = parseFloat(newVal.toFixed(2));
      }
      $scope.numberMoreKey = function() {
            var val = $scope.keyWeight;
            var newVal = val < 100 ? val + .1 : 100;
            $scope.keyWeight = parseFloat(newVal.toFixed(2));
      }
      $scope.opcoesAvancadasOkr = function() {
            $scope.frequencia = [{
                        id: '0',
                        name: 'Selecione'
                  },
                  {
                        id: '1',
                        name: 'Diário'
                  },
                  {
                        id: '2',
                        name: 'Semanal'
                  },
                  {
                        id: '3',
                        name: 'Mensal'
                  }
            ];
            if ($('#form-key-result #fonte-dados').hasClass('visible')) {
                  var selectBox = $("#fonte-dados").data("selectBox-selectBoxIt");
                  $('#form-key-result #fonte-dados').removeClass('visible');
                  //selectBox.destroy();
            }
            if ($('#form-key-result #frequenci').hasClass('visible')) {
                  var selectBox = $("#form-key-result #frequenci").data("selectBox-selectBoxIt");
                  $('#form-key-result #frequenci').removeClass('visible');
                  // selectBox.destroy();
            }
            $('select.select-fonte').select2({
                  allowClear: true
            }).addClass('visible');
            $('select.select-frequencia').select2({
                  allowClear: true
            }).addClass('visible');
            $('#form-key-result #advanced-options').show();
            if ($scope.keyDetail) {
                  if ($scope.keyDetail.integration.type == 0) {
                        $("#advanced-options #Database").prop('checked', true);
                        $integration['getintegracoestype'](0).then(function(response) {
                              $scope.integracoes = response;
                        });
                  } else if ($scope.keyDetail.integration.type == 1) {
                        $("#advanced-options #WebService").prop('checked', true);
                        $integration['getintegracoestype'](1).then(function(response) {
                              $scope.integracoes = response;
                        });
                  }
                  $scope.selectedOption = $scope.keyDetail.integration.type;
                  $scope.selectedIntegration = $scope.keyDetail.integration.id;
                  $scope.selectedFrequenci = $scope.keyDetail.frequencia_int;
                  $("#form-key-result #frequenci").select2();
                  $scope.selectedFrequenci = $scope.keyDetail.frequencia_int;
                  $("#frequenci").select2('destroy');
                  $("#form-key-result #fonte-dados").select2();
                  $scope.selectedIntegration = $scope.keyDetail.id_integracao;
                  $("#form-key-result #fonte-dados").select2('destroy');
            }
      }
      $scope.hideModalkeyAdvanced = function() {
            $('#form-key-result #advanced-options').hide();
            $('#form-key-result #advanced-options #fonte-dados').select2('destroy');
            $('#form-key-result #advanced-options #frequenci').select2('destroy');
      }
      $scope.optionType = function($type) {
            $('select.select-fonte').select2({
                  allowClear: true
            }).addClass('visible');
            $('select.select-frequencia').select2({
                  allowClear: true
            }).addClass('visible');
            if ($("#form-key-result #WebService").prop('checked') || $("#form-key-result #Database").prop('checked')) {
                  if ($type) {
                        $integration['getintegracoestype']($type).then(function(response) {
                              $scope.integracoes = response;
                        });
                  }
            } else {
                  $("#form-key-result #fonte-dados").select2({
                        allowClear: true
                  });
                  $scope.integracoes = [];
            }
      }
      $scope.saveKeyAdvanced = function() {
            if ($('#form-key-result').valid()) {
                  $scope.key_type = $scope.selectedOption;
                  $scope.key_fonte = $scope.selectedIntegration;
                  $scope.key_frequancia = $scope.selectedFrequenci;
                  $('#advanced-options .salvar').button('reset');
                  $('#form-key-result #advanced-options').hide();
            }
      }
      $('#form-key-result').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: {
                        required: true,
                        valueNotEquals: "?"
                  },
                  frequencia: {
                        valueNotEquals: "number:0"
                  },
                  tipo_calculo: {
                        required: true,
                        valueNotEquals: "number:0"
                  },
                  peso: 'required',
                  meta: 'required',
                  unidade: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        id_tatic: $scope.key_id,
                        id_team: $scope.user.usuarioviewTime.id_time,
                        name: $('#form-key-result #key-name').val(),
                        description: $('#form-key-result #key-description').val(),
                        user: $scope.keyDetailUser,
                        frequency: $scope.frequencyKey,
                        weight: $('#form-key-result #key-weight').val(),
                        ponto_partida: $('#form-key-result #ponto_partida').val(),
                        tipo_calculo: $('#form-key-result #tipo_calculo').val(),
                        goal: $('#form-key-result #key-goal').val(),
                        measurement: $('#form-key-result #key-measure').val(),
                        responsibles: $('#form-key-result #key-users').val(),
                        tags: $('#form-key-result #key-tags-rchave').val(),
                        chkd_tipo: $('#chkd_tipo:checked').val(),
                        chkd_manutencao: $('#chkd_manutencao:checked').val(),
                        periodicidade: $('#periodicidade').val(),
                  }
                  var frequencias = $scope.selectedFrequenci;
                  if ($scope.key_fonte) {
                        data.id_integracao = $scope.key_fonte;
                  } else {
                        data.id_integracao = 0;
                  }
                  if (frequencias) {
                        data.frequencia_int = $scope.key_frequancia;
                  } else {
                        data.frequencia_int = 0;
                  }
                  var type = 'insert';
                  if ($scope.key_id) {
                        data.id = $scope.key_id;
                        type = 'edit';
                  }
                  $('#form-key-result .salvar').button('loading');
                  $key[type](data).then(function(response) {
                        $tatics['getMyAllGlobaltatics']($scope.selectedYear, $scope.user.usuarioviewTime.id_time, $scope.selectedCycleMy, $scope.user.id).then(function(res) {
                              $scope.mytatics = res;
                        });
                        $timeout(function() {
                              delete $scope.key_type;
                              delete $scope.key_fonte;
                              delete $scope.key_frequancia;
                              delete $scope.selectedOption;
                              delete $scope.selectedIntegration;
                              delete $scope.selectedFrequenci;
                              delete $scope.key_id;
                              // $tatics['getAll']($scope.selectedYear, $scope.user.usuarioviewTime.id_time, $scope.selectedCycle, $scope.user.id).then(function(res) {
                              //     $scope.tatics = res;
                              // });
                              $scope.filter();
                        }, 100);
                        $('#form-key-result')[0].reset();
                        $('#form-key-result .salvar').button('reset');
                        $('#modal-key-result').modal('hide');
                  });
                  $('#form-key-result #key-frequency').select2('destroy');
                  $('#form-key-result #key-frequency').select2();
                  $('#form-key-result #key-user').select2('destroy');
                  $('#form-key-result #tipo_calculo').select2('destroy');
            }
      });
      $('#modal-key-result').on('hidden.bs.modal', function() {
            delete $scope.key_type;
            delete $scope.key_fonte;
            delete $scope.key_frequancia;
            delete $scope.selectedOption;
            delete $scope.selectedIntegration;
            delete $scope.selectedFrequenci;
            delete $scope.key_id;
            delete $scope.tipo_calculo;
            delete $scope.keyDetailUsers;
            $scope.keyDetailUsers = [];
            $('#modal-key-result .multi-select').multiSelect('destroy');
            $('#modal-key-result .multi-select').multiSelect();
      })
      $scope.showokrdetail = function($event) {
            $($event.currentTarget).parent().parent().parent().toggleClass("open");
      }
      // modal novo tatic
      $scope.okrNewTatic = function() {
            $('#profile-form-okr-tatic')[0].reset();
            $scope.cycles = [];
            $('select#profile-okr-tatic-cycles').select2('destroy');
            $('select.usuario-okr-tatic').select2({
                  allowClear: true
            }).addClass('visible');
            $('select.times-okr-tatic').select2({
                  allowClear: true
            }).addClass('visible');
            $('select#profile-okr-tatic-cycles').select2({
                  allowClear: true
            });
            $('select.profile-okr-tatic-objectives').select2({
                  allowClear: true
            }).addClass('visible');
            $(document).on('change', 'select#profile-okr-tatic-objectives', function() {
                  $scope.changenewCycle();
            });
            $scope.changenewCycle = function() {
                  $cycles['get']($scope.objectiveId).then(function(response) {
                        $scope.cycles = response;
                        $timeout(function() {
                              $('select#profile-okr-tatic-cycles').select2({
                                    allowClear: true
                              });
                        }, 10);
                  });
            }
            if ($scope.selectedYear) {
                  $scope.selectedYear = $scope.selectedYear;
            } else {
                  $scope.selectedYear = new Date().getFullYear();
            }
            $globals['get']($scope.selectedYear).then(function(response) {
                  $scope.objectives = response;
                  $scope.$parent.objectives = response;
            });
            $('#profile-new-okr-tatic').modal('show', {
                  backdrop: 'static'
            });
      }
      // Validacao Novo Tatico
      $('#profile-form-okr-tatic').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: 'required',
                  time: 'required',
                  objetivo: 'required',
                  clicos: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        parent_id: $scope.objectiveId,
                        name: $('#profile-okr-tatic-name').val(),
                        description: $('#profile-okr-tatic-description').val(),
                        user: $('#profile-okr-tatic-user').val(),
                        team: $('#profile-okr-tatic-team').val(),
                        weight: 1,
                        cycles: $scope.cyclesModel
                  }
                  $('#profile-form-okr-tatic .salvar').button('loading');
                  $tatics['insertobjectivetatic'](data).then(function(response) {
                        toastr.success('Objetivo adicionado com sucesso.');
                        $tatics['getAll']($scope.selectedYear, $scope.user.usuarioviewTime.id_time, $scope.user.id).then(function(tatics) {
                              $scope.tatics = tatics;
                              $scope.formatPatternOkr();
                              $timeout(function() {
                                    $("#Section6").getNiceScroll().resize();
                              }, 100);
                        });
                        $('#profile-new-okr-tatic').modal('hide');
                        $('#profile-form-okr-tatic .salvar').button('reset');
                  });
            }
      });
      $scope.modalActivities = function($key_id, $activity_id) {
            $scope.activityDetail = false;
            $scope.activityDetailUser = '';
            $scope.activityDetailUsers = [];
            $scope.typeActivity = 0;
            $scope.key_id = $key_id;
            $scope.activity_id = $activity_id;
            $(".slider").find('.ui-slider-handle .ui-label').text('0');
            $('#modal-activities .select2.usuario-activity').select2('destroy');
            $('#modal-activities .multi-select').multiSelect('destroy');
            if ($('#modal-activities .input-tags-activity').prev().is('.bootstrap-tagsinput')) {
                  $('#modal-activities .input-tags-activity').tagsinput('removeAll');
                  $('#modal-activities .input-tags-activity').tagsinput('destroy');
            }
            $tags['get']().then(function(tags) {
                  $scope.$parent.tags = tags;
                  var tagsNames = new Bloodhound({
                        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                        queryTokenizer: Bloodhound.tokenizers.whitespace,
                        local: $scope.$parent.tags
                  });
                  tagsNames.initialize();
                  $('#modal-activities .input-tags-activity').tagsinput({
                        typeaheadjs: {
                              name: 'tagnames',
                              displayKey: 'name',
                              valueKey: 'name',
                              source: tagsNames.ttAdapter()
                        }
                  });
                  $('#form-activities').on('keyup keypress', function(e) {
                        var keyCode = e.keyCode || e.which;
                        if (keyCode === 13) {
                              e.preventDefault();
                              return false;
                        }
                  });
                  $('#modal-activities .input-tags-activity').on('itemAdded', function(event) {
                        var tag = event.item;
                  });
                  $users['get']().then(function(response) {
                        $scope.users = response;
                        if ($activity_id) {
                              $activities['details']($activity_id).then(function(response) {
                                    $scope.activityDetail = response;
                                    $scope.typeActivity = $scope.activityDetail.type;
                                    $scope.activityDetailUser = $scope.activityDetail.user.id;
                                    $scope.activityDetailUsers = $scope.activityDetail.users;
                                    $tatics['details']($scope.activityDetail.parent_id).then(function(response) {
                                          $scope.tatic = response;
                                    });
                                    $timeout(function() {
                                          $(".slider").slider({
                                                range: "min",
                                                min: 0,
                                                max: 100,
                                                value: $scope.activityDetail.percentage,
                                                create: function() {
                                                      var $handles = $(".slider").find('.ui-slider-handle');
                                                      $handles.html('<span class="ui-label">' + $(this).slider("value") + '</span>');
                                                },
                                                slide: function(event, ui) {
                                                      $("#activity-percentage").val(ui.value);
                                                      var $handles = $(".slider").find('.ui-slider-handle');
                                                      $handles.html('<span class="ui-label">' + ui.value + '</span>');
                                                }
                                          });
                                          $(".slider .ui-slider-handle .ui-label").text($scope.activityDetail.percentage);
                                          var $this = $('.select2.usuario-activity'),
                                                opts = {
                                                      allowClear: attrDefault($this, 'allowClear', false)
                                                };
                                          $this.select2(opts);
                                          $this.addClass('visible');
                                          for (var i = 0; i < $scope.activityDetail.tags.length; i++) {
                                                $('#modal-activities .input-tags-activity').tagsinput('add', $scope.activityDetail.tags[i].name);
                                          };
                                          var array = [];
                                          for (var i = 0; i < $scope.activityDetail.users.length; i++) {
                                                array.push($scope.activityDetail.users[i].id);
                                          };
                                          $('.multi-select.users-activity').multiSelect();
                                    });
                              });
                        } else {
                              $timeout(function() {
                                    $(".slider").slider({
                                          range: "min",
                                          min: 0,
                                          max: 100,
                                          value: 0,
                                          slide: function(event, ui) {
                                                $("#activity-percentage").val(ui.value);
                                                var $handles = $(".slider").find('.ui-slider-handle');
                                                $handles.html('<span class="ui-label">' + ui.value + '</span>');
                                          }
                                    });
                                    var $this = $('.select2.usuario-activity'),
                                          opts = {
                                                allowClear: attrDefault($this, 'allowClear', false)
                                          };
                                    $this.select2(opts);
                                    $this.addClass('visible');
                                    $('.multi-select.users-activity').multiSelect();
                                    //$('.select-type').addClass('visible').selectBoxIt();
                              }, 10);
                        }
                  });
            });
            $('#modal-activities').modal('show', {
                  backdrop: 'static'
            });
      }
      $('#form-activities').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: {
                        valueNotEquals: "?"
                  },
                  // horas: 'required',
                  inicio: 'required',
                  fim: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        tatic_id: $scope.tatic.id,
                        key_id: $scope.key_id,
                        name: $('#activity-name').val(),
                        description: $('#activity-description').val(),
                        percentage: $('#activity-percentage').val(),
                        user: $scope.activityDetailUser,
                        init: $('#activity-init').val(),
                        end: $('#activity-end').val(),
                        hour: $('#activity-hours').val(),
                        responsibles: $('#activity-users').val(),
                        tags: $('#activity-tags').val(),
                        id_team: $scope.tatic.team.id
                  }
                  var type = 'insert';
                  if ($scope.activity_id) {
                        data.id = $scope.activity_id;
                        type = 'edit';
                  }
                  $('#form-activities .salvar').button('loading');
                  $activities[type](data).then(function(editresponse) {
                        $tatics['details']($scope.tatic.id).then(function(response) {
                              for (var i = 0, tleng = $scope.tatics.length; i < tleng; i++) {
                                    if ($scope.tatics[i].id === $scope.tatic.id) {
                                          $scope.tatics[i] = response;
                                    }
                              };
                        });
                        if ($('table').hasClass('dataTable')) {
                              $('table').DataTable().destroy();
                        }
                        $timeout(function() {
                              $("span.pie").peity("pie");
                              if (!$('table').hasClass('dataTable')) {
                                    $('table.table').DataTable({
                                          "bDestroy": true,
                                          'paging': false,
                                          'info': false,
                                          'searching': false,
                                          columnDefs: [{
                                                targets: 'no-sort',
                                                orderable: false
                                          }]
                                    });
                              }
                        }, 10);
                        $('#form-activities')[0].reset();
                        $('#form-activities .salvar').button('reset');
                        $('#modal-activities').modal('hide');
                  });
            }
      });
      $('#form-measure').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  data: 'required',
                  medicao: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var taticId = $('#taticId').val(),
                        fileInput = $('#measure-files'),
                        files = fileInput[0].files;
                  var data = {
                        id: $scope.key_id,
                        date: $('#measure-date').val(),
                        value: $('#measure-value').val(),
                        comentary: $('#measure-description').val(),
                  }
                  $scope.form = new FormData();
                  $.each(data, function(key, value) {
                        $scope.form.append(key, value);
                  });
                  for (var i = 0; i < files.length; i++) {
                        $scope.form.append("files[]", files[i]);
                  }
                  $('#form-measure .salvar').button('loading');
                  $key['measure']($scope.form).then(function(response) {
                        var tatic;
                        for (var i = 0, leng = $scope.tatics.length; i < leng; i++) {
                              if ($scope.tatics[i].id === taticId) {
                                    tatic = i;
                              }
                        };
                        $scope.tatics[tatic].percentage = response.rkey_parent_perc;
                        $scope.tatics[tatic].keys = response.keys;
                        var keyId;
                        for (var i = 0, leng = $scope.tatics[tatic].keys.length; i < leng; i++) {
                              if ($scope.tatics[tatic].keys[i].id === $scope.key_id) {
                                    $scope.tatics[tatic].keys[i].percentage = response.rkey_perc;
                                    keyId = $scope.tatics[tatic].keys[i].id;
                              }
                        };
                        $timeout(function() {
                              $('.item' + keyId).find('span.pie').peity("pie");
                        });
                        $scope.measures = response.medicoes;
                        $('#form-measure')[0].reset();
                        $('#form-measure .salvar').button('reset');
                        //$('#modal-measure').modal('hide');
                  });
            }
      });
      if ($.isFunction($.fn.datepicker)) {
            $(".date_picker").each(function(i, el) {
                  var $this = $(el),
                        opts = {
                              format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                              startDate: attrDefault($this, 'startDate', ''),
                              endDate: attrDefault($this, 'endDate', ''),
                              daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                              startView: attrDefault($this, 'startView', 0),
                              language: 'pt-BR',
                              rtl: rtl()
                        },
                        $n = $this.next(),
                        $p = $this.prev();
                  $this.datepicker(opts);
                  if ($n.is('.input-group-addon') && $n.has('a')) {
                        $n.on('click', function(ev) {
                              ev.preventDefault();
                              $this.datepicker('show');
                        });
                  }
                  if ($p.is('.input-group-addon') && $p.has('a')) {
                        $p.on('click', function(ev) {
                              ev.preventDefault();
                              $this.datepicker('show');
                        });
                  }
            });
      }


});
elofy.controller('zapierCtrl', function($scope, $zapier) {
      $scope.token = '';
      $zapier['getToken']().then(function(response) {
            $scope.token = response.zapier_token;
      });
      $zapier['getApiToken']().then(function(response) {
            $scope.api_token = response.hash;
            $scope.expire_date = response.data_expiracao;
            $('#expire_date').datepicker();
      });
      $scope.generateToken = function() {
            console.log("gerando token");
            $zapier['generateToken']().then(function(response) {
                  $scope.token = response;
            });
      }
      $scope.generateAPIToken = function() {
            if ($('#expire_date').val() == '') {
                  alert("expire date is required!");
                  return;
            }
            $zapier['generateApiToken']($('#expire_date').val()).then(function(response) {
                  $scope.api_token = response.api_token;
                  $scope.expire_date = response.expire_date;
            });
      }
});
elofy.controller('feedbackCtrl', function($rootScope, $scope, $routeParams, $users, $location, $empressa, $timeout) {
      $scope.lastAction = "";
      $rootScope.feedbackRatings = [];
      $users['adminusuariosTime']().then(function(adminusuariosTime) {
            $scope.adminusuarios = adminusuariosTime;
      });
      $empressa['getallvalores']().then(function(response) {
            $scope.valores = response;
            angular.forEach($scope.valores, function(item, key) {
                  var value = {
                        id: item.id,
                        value: 0
                  };
                  $rootScope.feedbackRatings[item.id] = value;
            });
            console.log($scope.valores);
      });
      $scope.feedbackOptionsPreset = function() {
            setTimeout(function() {
                  $('#feedback-options a').each(function() {
                        var me = $(this);
                        me.html(me.text().replace(/(^\w+)/, '<strong>$1</strong>'));
                  });
            }, 300);
      };
      $scope.requestFeedbackPreset = function() {
            setTimeout(function() {
                  var opts = {
                        format: 'dd/mm/yyyy',
                        language: 'pt-BR'
                  }
                  $('#prazo').datepicker(opts);
                  $('#request_feedback #requestuser').select2({
                        maximumSelectionSize: 1,
                        minimumInputLength: 1
                  });
                  $('#request_feedback').validate({
                        ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                        success: function(label, element) {
                              $(element).parent('div').removeClass('validate-has-error');
                        },
                        errorPlacement: function(error, element) {
                              $(element).parent('div').addClass('validate-has-error');
                        },
                        submitHandler: function(form) {
                              $scope.requestfeedback();
                        }
                  });
            }, 300);
      };
      $scope.giveFeedbackPreset = function() {
            setTimeout(function() {
                  $('#give_feedback #feedbacktouser').select2({
                        maximumSelectionSize: 20,
                        minimumInputLength: 1
                  });
                  $('#give_feedback').validate({
                        ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                        rules: {
                              feedbacktouser: 'required',
                              feedback_given_answer: 'required'
                        },
                        success: function(label, element) {
                              $(element).parent('div').removeClass('validate-has-error');
                        },
                        errorPlacement: function(error, element) {
                              $(element).parent('div').addClass('validate-has-error');
                        },
                        submitHandler: function(form) {
                              $scope.submitfeedback();
                        }
                  });

                  if ($scope.feedback_id) {
                        $users['getFeedbackById']($scope.feedback_id).then(function(response){
                              $scope.feedbackDetail = response;
                              if ($scope.adminusuarios && $scope.adminusuarios.length > 0) {
                                    console.log("tentou ", $scope.feedbackDetail.destino );
                                    $timeout(function() {
                                          $("#feedbacktouser").val($scope.feedbackDetail.destino).trigger('change');
                                    }, 300);
                              } else {
                                    $scope.destinoInterval = setInterval(function(){
                                          if ($scope.adminusuarios && $scope.adminusuarios.length > 0) {
                                                console.log("tentou 2", $scope.feedbackDetail.destino );
                                                $timeout(function() {
                                                      $("#feedbacktouser").val($scope.feedbackDetail.destino).trigger('change');
                                                }, 300);
                                                clearInterval($scope.destinoInterval);
                                          }
                                    }, 1000);
                              }
                        });
                  }
            }, 300);
      };
      $scope.privateNotePreset = function() {
            setTimeout(function() {
                  $('#private_notes #privateto').select2({
                        language: 'pt-BR',
                        maximumSelectionSize: 1,
                        minimumInputLength: 1
                  });
                  $('#private_notes').validate({
                        ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                        rules: {
                              privateto: 'required',
                              notes_given_answer: 'required'
                        },
                        success: function(label, element) {
                              $(element).parent('div').removeClass('validate-has-error');
                        },
                        errorPlacement: function(error, element) {
                              $(element).parent('div').addClass('validate-has-error');
                        },
                        submitHandler: function(form) {
                              $scope.submitPrivateNotes();
                        }
                  });
            }, 300);
      };
      $scope.requestfeedback = function() {
            var requestuser = $('#requestuser').val();
            var request_description = $('#request_description').val();
            var prazo = $('#prazo').val();
            $('#request_feedback .salvar').button('loading');
            $users['requestfeedback'](requestuser, request_description, prazo).then(function(requestfeedback) {
                  $users['my_requested_feedback_profile']().then(function(my_requested_feedback_profile) {
                        $scope.feedback_requested = my_requested_feedback_profile;
                  });
                  $('#request_feedback')[0].reset();
                  $('#request_feedback .salvar').button('reset');
            });
            $location.path("/complete");
      };
      $scope.submitfeedback = function() {
            var values = new Array();
            var ratingScore = new Array();
            var idFeedback = $('#id_feedback').val();
            var feedbacktouser = $('#feedbacktouser').val();
            var feedback_given_answer = $('#feedback_given_answer').val();
            var tipoFeedback = $("#give_feedback  input[name='tipoFeedback']:checked").val();
            var valore_id = angular.forEach($scope.valores, function(result, key) {
                  if (result.checked){
                        if (result.value == -1) result.value = 0;
                        values.push(result.id);
                        ratingScore.push(result.value);
                  }
            });
            $('#give_feedback .salvar').button('loading');
            $users['insertfeedback'](feedbacktouser, feedback_given_answer, values, ratingScore, tipoFeedback, idFeedback).then(function(insertfeedback) {
                  $('#give_feedback')[0].reset();
                  $('#give_feedback .salvar').button('reset');
                  $location.path("/complete");
            });
      };
      $scope.submitPrivateNotes = function() {
            var values = new Array();
            var privateto = $('#privateto').val();
            var notes_given_answer = $('#notes_given_answer').val();
            var valore_id = $.each($("input[name='valore[]']:checked"), function() {
                  values.push($(this).val());
            });
            $('#private_notes .salvar').button('loading');
            $users['insertprivatenotes'](privateto, notes_given_answer, values).then(function(insertprivatenotes) {
                  $('#private_notes')[0].reset();
                  $('#private_notes .salvar').button('reset');
                  $location.path("/complete");
            });
      };
      $scope.doAction = function() {
            console.log("test", $routeParams);
            $scope.lastAction = $scope.action;
            if (!$routeParams.action || !$.inArray($routeParams.action, ['', 'ask', 'give', 'notes'])) $scope.action = '';
            else $scope.action = $routeParams.action;
            if ($routeParams.objId) {
                  $scope.feedback_id = $routeParams.objId;
            }
            setTimeout(function() {
                  $('.actionview').addClass('in');
            }, 500);
            if ($routeParams.action) {
                  switch ($routeParams.action) {
                        case "ask":
                              $scope.requestFeedbackPreset();
                              break;
                        case "give":
                              $scope.giveFeedbackPreset();
                              break;
                        case "notes":
                              $scope.privateNotePreset();
                              break;
                        case "complete":
                              break;
                        default:
                              break;
                  }
            } else {
                  console.log("testando ");
                  $scope.feedbackOptionsPreset();
            }
      }
      $scope.changeValore = function(valore) {

      }
});

elofy.controller('careerCtrl', function globalCtrl($scope, $results, $timeout, $years, $cycles, $cycleConfiguration, $users, $teams, $tags, $skills, $tatics, $globals, $empressa, $elos, timeAgo, nowTime, $dashboard, $carreers, $cargo, $surveys, $translate, $filter, $activities, $competencias, $mydashboard) {

      if (window.location.href.includes('carreira')) {
            $scope.$watch('user', function(newValue, oldValue) {
                  if (typeof newValue.empresa != 'undefined') {
                        // $scope.eloTab();
                        $scope.carreerTab(0);
                  }
            });
      }

      function addRadarData(data_array) {
            var myRadarChart = new Chart(document.getElementById('competencia_chart'), {
                  "type": "radar",
                  "data": {
                        "labels": ["Gestor", "Auto", "Média Pares", "Equipe"],
                        "datasets": data_array
                  },
                  "options": {
                        "elements": {
                              "line": {
                                    "tension": 0,
                                    "borderWidth": 3
                              }
                        }
                  }
            });
      }
      var myCompetenciaRadar;
      $scope.carreerTab = function() {
            $scope.profiletab = 5;
            $scope.CargoNotAddedSelected = [];
            $scope.CargoNotAddedSelectedFilter = [];
            delete $scope.meta_id;
            delete $scope.goal_id;
            delete $scope.updateDpObjModel;
            delete $scope.situacaoStatus;
            $("#career_users").select2();
            $("#active_status_career").select2();
            $("#objective_time").select2();
            $scope.viewInFullSize = true;
            $scope.viewFullCrossfeed = true;
            $scope.viewFullActivity = true;
            $scope.addMode = false;
            $scope.editMode = false;
            $timeout(function() {
                  myCompetenciaRadar = new Chart(document.getElementById('competencia_chart'), {
                        "type": "radar",
                        "data": {
                              "labels": [],
                              "datasets": []
                        },
                        "options": {
                              "elements": {
                                    "line": {
                                          "tension": 0,
                                          "borderWidth": 3
                                    }
                              },
                              scale: {
                                    pointLabels: {
                                          fontSize: 16,
                                          fontStyle: '300'
                                    },
                                    ticks: {
                                          beginAtZero: true,
                                          min: 0,
                                    }
                              }
                        }
                  });
                  $(document).on('click', '#filter_btn .dropdown-menu', function(e) {
                        e.stopPropagation();
                  });
                  $scope.datafunction();
                  $("#Planejamento_status").val('1');
                  $("#Planejamento_status").select2();
                  $("#performance-cycle-select").select2();
                  $("#performance-cycle-select-time").select2();
                  $('#dev_sent_updates').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('#dev_received_updates').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('#carrier_block_hgt').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('.career_sidebar_details').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('#active_status_career').select2('val', 1);
                  $results['getCompetenciaFromUserByCycle']($scope.user.id, $scope.selectedPerformanceCycle).then(function(results) {
                        $scope.competenciaFromUsuarioByCycle = results;
                        console.log(results);
                        $scope.competencia_1_visibility = false;
                        $scope.competencia_2_visibility = false;
                        $scope.competencia_3_visibility = false;
                        $scope.competencia_4_visibility = false;
                        myCompetenciaRadar.data.labels = [];
                        myCompetenciaRadar.data.datasets = [];
                        if ($scope.competenciaFromUsuarioByCycle.length > 0) {
                              angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                                    myCompetenciaRadar.data.labels.push(item['nome_competencia']);
                              });
                              myCompetenciaRadar.data.datasets.push({
                                    "label": 'Gestor',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(159, 224, 167, 0.4)",
                                    "borderColor": 'rgb(159, 224, 167)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Auto',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(228, 228, 166, 0.4)",
                                    "borderColor": 'rgb(228, 228, 166)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Pares',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(198, 173, 243, 0.4)",
                                    "borderColor": 'rgb(198, 173, 243)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Equipes',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(200, 132, 218, 0.4)",
                                    "borderColor": 'rgb(200, 132, 218)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, );
                              myCompetenciaRadar.update();
                        }
                        angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                              $scope.competencia_1_visibility |= item['score_1'] || item['numComentarios_1'];
                              $scope.competencia_2_visibility |= item['score_2'] || item['numComentarios_2'];
                              $scope.competencia_3_visibility |= item['score_3'] || item['numComentarios_3'];
                              $scope.competencia_4_visibility |= item['score_4'] || item['numComentarios_4'];
                              myCompetenciaRadar.data.datasets[0].data.push(item['score_2']);
                              myCompetenciaRadar.data.datasets[1].data.push(item['score_1']);
                              myCompetenciaRadar.data.datasets[2].data.push(item['score_3']);
                              myCompetenciaRadar.data.datasets[3].data.push(item['score_4']);
                        });
                        myCompetenciaRadar.update();
                  });
            }, 1000);
            $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                  $scope.career_details = response;
            });
            $carreers['getAll']($scope.user.id).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived']($scope.user.id).then(function(response) {
                  $scope.received_carreers = response;
            });
            $users['getAllUsersCombo']().then(function(response) {
                  $scope.users_combo = response;
                  if (!$scope.users_combo.find(x => x.id === $scope.$parent.user.id)) $scope.users_combo.push({
                        id: $scope.$parent.user.id,
                        name: $scope.$parent.user.name
                  });
                  $scope.carrer_user_id = $scope.$parent.user.id;
                  setTimeout(function() {
                        $("#career_users").val($scope.$parent.user.id);
                        $("#career_users").trigger('change');
                  }, 300);
            });
            $users['activities_career']($scope.user.id).then(function(activities) {
                  $scope.activities_career = activities;
            });
            $scope.addDevelopmentTab = 1;
            $cargo['cargos']().then(function(response) {
                  $scope.cargos = response;
                  $scope.CargosNotAdded = response;
                  $scope.CargosNotAddedFilter = response;
            });
            $scope.selectedPerformanceUser = $scope.user.id;
            // tirei esta chamada pois ela já acontece no set do usuário default
            // $scope.loadPerformanceServices($scope.selectedPerformanceUser);      
      }
      $scope.loadUsersFromGestorByCycle = function(id_cycle) {
            $users['getUsersFromGestorByCycle'](id_cycle).then(function(response) {
                  $scope.usersFromGestor = response;
            });
      }
      $scope.revokeEvaluationAccess = function(user) {
            
            user.liberado = 0;
            $results['revokeEvaluationAccess'](user.id, user.id_revisao_ciclo).then(function(results) {
                  toastr.success("Avaliação Bloqueada");
            });
      }
      $scope.grantEvaluationAccess = function(user) {
            
            user.liberado = 1;
            $results['grantEvaluationAccess'](user.id, user.id_revisao_ciclo).then(function(results) {
                  toastr.success("Avaliação Liberada");
            });
      }
      //temporary solution
      var temp_user_path = window.location.href.replace(baseurl, '');
      var temp_arr_path = temp_user_path.split('/');
      if (temp_arr_path.length == 1) {
            var custom_ctx = document.getElementById("cicles_average_chart1").getContext("2d");
            var global_average_chart = new Chart(custom_ctx, {
                  // The type of chart we want to create
                  type: 'line',
                  // The data for our dataset
                  data: {
                        labels: ["January", "February", "March", "April", "May", "June", "July"],
                        datasets: [{
                              label: "My First dataset",
                              backgroundColor: 'rgb(255, 99, 132)',
                              borderColor: 'rgb(255, 99, 132)',
                              data: [0, 10, 5, 2, 20, 30, 45],
                        }]
                  },
                  // Configuration options go here
                  options: {}
            });
      }
      $scope.loadPerformanceServices = function(user_id, cycle_id = null) {
            var loadScores = function(user, cycle) {
                  if (!cycle) return;
                  $cycleConfiguration['getReguaByCycleId'](cycle).then(function(results) {
                        $scope.selected_cycle_ruler = results;
                  });
                  $results['getUserAveragesScores'](user).then(function(results) {
                        $scope.performanceAverageScores = results;
                        global_average_chart.destroy();
                        $scope.setupAverageChart();
                  });
                  $results['getResultsFromUserByCycle'](user, cycle).then(function(results) {
                        $scope.scoresFromCycle = results;
                        $scope.setupScoresFromCycleChart();
                  });
                  $results['getValoresFromUsuarioByCycle'](user, cycle).then(function(results) {
                        $scope.valoresFromUsuarioByCycle = results;
                        $scope.score_1_visibility = false;
                        $scope.score_2_visibility = false;
                        $scope.score_3_visibility = false;
                        $scope.score_4_visibility = false;
                        angular.forEach($scope.valoresFromUsuarioByCycle, function(item, key) {
                              $scope.score_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.score_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.score_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.score_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $results['getPotencialFromUsuarioByCycle'](user, cycle).then(function(results) {
                        $scope.potencialFromUsuarioByCycle = results;
                        $scope.potencial_1_visibility = false;
                        $scope.potencial_2_visibility = false;
                        $scope.potencial_3_visibility = false;
                        $scope.potencial_4_visibility = false;
                        angular.forEach($scope.potencialFromUsuarioByCycle, function(item, key) {
                              $scope.potencial_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.potencial_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.potencial_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.potencial_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $results['getResultadoFromUsuarioByCycle'](user, cycle).then(function(results) {
                        $scope.resultadoFromUsuarioByCycle = results;
                        $scope.resultado_1_visibility = false;
                        $scope.resultado_2_visibility = false;
                        $scope.resultado_3_visibility = false;
                        $scope.resultado_4_visibility = false;
                        angular.forEach($scope.resultadoFromUsuarioByCycle, function(item, key) {
                              $scope.resultado_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.resultado_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.resultado_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.resultado_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $results['getCompetenciaFromUserByCycle'](user, cycle).then(function(results) {
                        $scope.competenciaFromUsuarioByCycle = results;
                        console.log(results);
                        if (results.length > 20) {
                              document.getElementById("competencia_chart").style.minHeight = "360px";
                              document.getElementById("competencia_chart").style.minWidth = "720px";
                              document.getElementById("chartjs-radar").style.width = "100%";
                        }
                        $scope.competencia_1_visibility = false;
                        $scope.competencia_2_visibility = false;
                        $scope.competencia_3_visibility = false;
                        $scope.competencia_4_visibility = false;
                        myCompetenciaRadar.data.labels = [];
                        myCompetenciaRadar.data.datasets = [];
                        if ($scope.competenciaFromUsuarioByCycle.length > 0) {
                              angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                                    myCompetenciaRadar.data.labels.push(item['nome_competencia']);
                                    $competencias['search']('', '', '', '', '', '', '', item['nome_competencia']).then(function(response) {
                                          $scope.competenciaFromUsuarioByCycle[key].description = response[0].descricao;
                                          console.log($scope.competenciaFromUsuarioByCycle[key].description);
                                    });
                              });
                              myCompetenciaRadar.data.datasets.push({
                                    "label": 'Gestor',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(159, 224, 167, 0.4)",
                                    "borderColor": 'rgb(159, 224, 167)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Auto',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(228, 228, 166, 0.4)",
                                    "borderColor": 'rgb(228, 228, 166)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Pares',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(198, 173, 243, 0.4)",
                                    "borderColor": 'rgb(198, 173, 243)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Equipes',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(200, 132, 218, 0.4)",
                                    "borderColor": 'rgb(200, 132, 218)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, );
                              myCompetenciaRadar.update();
                        }
                        angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                              $scope.competencia_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.competencia_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.competencia_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.competencia_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                              myCompetenciaRadar.data.datasets[0].data.push(item['score_2']);
                              myCompetenciaRadar.data.datasets[1].data.push(item['score_1']);
                              myCompetenciaRadar.data.datasets[2].data.push(item['score_3']);
                              myCompetenciaRadar.data.datasets[3].data.push(item['score_4']);
                        });
                        myCompetenciaRadar.update();
                  });
                  $results['getOutraEtapaFromUserByCycle'](user, cycle).then(function(results) {
                        $scope.outraetapaFromUsuarioByCycle = results;
                        $scope.outraetapa_1_visibility = false;
                        $scope.outraetapa_2_visibility = false;
                        $scope.outraetapa_3_visibility = false;
                        $scope.outraetapa_4_visibility = false;
                        angular.forEach($scope.outraetapaFromUsuarioByCycle, function(item, key) {
                              $scope.outraetapa_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.outraetapa_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.outraetapa_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.outraetapa_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $(function() {
                        setTimeout(function() {
                              $('[data-toggle="tooltip"]').tooltip();
                        }, 1000);
                  });
            };
            if (!cycle_id) {
                  $cycles['getAll'](user_id).then(function(results) {
                        $scope.allCycles = results;
                        if ($scope.allCycles && $scope.allCycles.length > 0) {
                              $scope.selectedPerformanceCycle = $scope.allCycles[0].id_revisao_ciclo;
                              $("#performance-cycle-select").val($scope.selectedPerformanceCycle);
                              $("#performance-cycle-select").trigger("change");
                              $("#performance-cycle-select-time").trigger("change");
                              loadScores(user_id, $scope.selectedPerformanceCycle);
                        }
                  });
            } else loadScores(user_id, cycle_id);
      }
      $scope.getCycleById = function(id) {
            var cycle;
            angular.forEach($scope.allCycles, function(item, key) {
                  if (item['id_revisao_ciclo'] == id) cycle = item;
            });
            return cycle;
      }
      $scope.openOutraEtapaComents = function(id_valores, id_tipo_avaliacao) {
            console.log("clicked");
            $("#outraetapa-table").addClass("half-sized-table");
            $results['getCommentsByOutraEtapa']($scope.selectedPerformanceUser, id_valores, id_tipo_avaliacao).then(function(results) {
                  $scope.outraetapaComments = results;
                  setTimeout(function() {
                        $('#outraetapaComments').addClass("visible-comments");
                        console.log("addclass");
                  }, 1000);
            });
      }
      $scope.openResultadoComents = function(id_valores, id_tipo_avaliacao, index_id, event) {
            console.log(angular.element(event.target).position());
            $("#resultado-table").addClass("half-sized-table");
            document.getElementById("resultadoComments").style.marginTop = angular.element(event.target).position().top - 62 + 'px';
            $results['getCommentsByResultado']($scope.selectedPerformanceUser, id_valores, id_tipo_avaliacao).then(function(results) {
                  $scope.resultadoComments = results;
                  setTimeout(function() {
                        $('#resultadoComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.openValuesComents = function(id_valores, id_tipo_avaliacao) {
            $("#valores-table").addClass("half-sized-table");
            $results['getCommentsByValue']($scope.selectedPerformanceUser, id_valores, id_tipo_avaliacao).then(function(results) {
                  $scope.valueComments = results;
                  setTimeout(function() {
                        $('#valuesComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.openPotencialComents = function(id_pergunta, id_tipo_avaliacao) {
            $("#potencial-table").addClass("half-sized-table");
            $results['getCommentsByPotencial']($scope.selectedPerformanceUser, id_pergunta, id_tipo_avaliacao).then(function(results) {
                  $scope.potencialComments = results;
                  setTimeout(function() {
                        $('#potencialComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.openCompetenciaComents = function(id_competencia, id_tipo_avaliacao, index_id) {
            $("#competencia-table").addClass("half-sized-table");
            document.getElementById("competenciaComments").style.marginTop = 36.8 * (index_id + 1) + 'px';
            $results['getCommentsByCompetencia']($scope.selectedPerformanceUser, id_competencia, id_tipo_avaliacao).then(function(results) {
                  $scope.competenciaComments = results;
                  setTimeout(function() {
                        $('#competenciaComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.openSubCareerBlock = function(section) {
            switch (section) {
                  case "performance":
                        console.log("performance tab");
                        $scope.refreshCareerBlock();
                        break;
            }
      }
      $scope.$watchGroup(['performanceAverageScores', 'scoresFromCycle'], function(newValue, oldValue) {
            setTimeout(function() {
                  window.dispatchEvent(new Event('resize'));
            }, 300);
      });
      $scope.getGradeFromScore = function(score) {
            var c = 'sem conceito';
            if (score != null){
            angular.forEach($scope.selected_cycle_ruler, function(item, key) {
                  // console.log("comparação :: ", score, item['limite_inicial'], item['limite_final']);
                  if (score >= Number(item['limite_inicial']) && score <= Number(item['limite_final'])) {
                        // console.log("achou :",  item['label']);
                        c = item['label'];
                  }
            });
      }
            return c;
      }

      var scoresHorizontalChart;
      $scope.setupScoresFromCycleChart = function() {
            console.log("regua", $scope.selected_cycle_ruler);
            if (scoresHorizontalChart) scoresHorizontalChart.destroy();
            var scores = [];
            var labels = [];
            var grades = [];
            var tickObj = {};
            var tooltipObj = {};
            var hasConceito = false;
            angular.forEach($scope.scoresFromCycle.results_by_cycle, function(item, key) {
                  if (item) {
                        scores.push(item);
                        grades.push($scope.getGradeFromScore(item));
                        labels.push(key);
                  }
            });
            if ($scope.selected_cycle_ruler && $scope.selected_cycle_ruler.length > 0 && $scope.selected_cycle_ruler[0].conceito == 1) {
                  tickObj = {
                        callback: function(value, index, values) {
                              // apagar eixo y
                              return '';
                        }
                  };
                  tooltipObj = {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                              label: function(tooltipItem, data) {
                                    var label = grades[tooltipItem.index];
                                    return label;
                              }
                        }
                  }


            }

            var color = Chart.helpers.color;
            var horizontalBarChartData = {
                  labels: labels,
                  datasets: [{
                        label: 'Notas',
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                        borderColor: 'rgb(54, 162, 235)',
                        borderWidth: 1,
                        data: scores
                  }]
            };
            scoresHorizontalChart = new Chart(document.getElementById('overal_view_chart').getContext('2d'), {
                  type: 'horizontalBar',
                  data: horizontalBarChartData,
                  options: {
                        // Elements options apply to all of the options unless overridden in a dataset
                        // In this case, we are setting the border of each horizontal bar to be 2px wide
                        elements: {
                              rectangle: {
                                    borderWidth: 2,
                              }
                        },
                        tooltips: tooltipObj,
                        responsive: true,
                        legend: {
                              position: 'right',
                        },
                        title: {
                              display: false,
                              text: 'Chart.js Horizontal Bar Chart'
                        },
                        scales: {
                              xAxes: [{
                                    ticks: tickObj
                              }]
                        }
                  }
            });
      }
      $scope.setupAverageChart = function() {
            var medias = [];
            var categories = [];
            var labels = [];
            var hasConceito = false;
            var tickObj = {};
            var tooltipObj = {};
            angular.forEach($scope.performanceAverageScores, function(elem) {
                  categories.push(elem['nome_revisao_ciclo']);
            });
            angular.forEach($scope.performanceAverageScores, function(elem) {
                  if (elem['conceito'] == 1) {
                        labels.push(elem['label_media_final']);
                        hasConceito = true;
                  }
                  medias.push(elem['media_final']);
            });
            if (hasConceito) {
                  tickObj = {
                        callback: function(value, index, values) {
                              // apagar eixo y
                              return '';
                        }
                  };
                  tooltipObj = {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                              label: function(tooltipItem, data) {
                                    var label = labels[tooltipItem.index];
                                    return label;
                              }
                        }
                  };
            }
            if (categories.length == 1) {
                  categories.unshift('');
                  categories.push('');
                  medias.unshift(null);
                  medias.push(null);
                  labels.unshift(null);
                  labels.push(null);
            }
            var config = {
                  type: 'line',
                  data: {
                        labels: categories,
                        datasets: [{
                              label: 'Médias por Cíclo',
                              fill: true,
                              backgroundColor: 'rgba(54, 162, 235, 0.4)',
                              borderColor: 'rgb(54, 162, 235)',
                              data: medias,
                        }]
                  },
                  options: {
                        title: {
                              display: false,
                              text: 'Chart.js Line Chart'
                        },
                        tooltips: tooltipObj,
                        hover: {
                              mode: 'nearest',
                              intersect: true
                        },
                        maintainAspectRatio: false,
                        scales: {
                              xAxes: [{
                                    display: true,
                                    scaleLabel: {
                                          display: true,
                                          labelString: 'Ciclo'
                                    }
                              }],
                              yAxes: [{
                                    display: true,
                                    scaleLabel: {
                                          display: true,
                                          labelString: 'Média Final'
                                    },
                                    ticks: tickObj
                              }]
                        }
                  }
            };
            $('#cicles_average_chart1').css('max-height', '320px');
            global_average_chart = new Chart(document.getElementById('cicles_average_chart1').getContext('2d'), config);
            global_average_chart.clear();
            global_average_chart.update();
      }
      $scope.viewInFullSize = true;
      $("#performance-cycle-select").change(function() {
            if ($(this).val() == "") return;
            if ($scope.selectedPerformanceCycle == $(this).val()) return;
            $scope.selectedPerformanceCycle = $(this).val();
            $scope.loadPerformanceServices($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
      });
      $("#performance-cycle-select-time").change(function() {
            if ($(this).val() == "") return;
            if ($scope.selectedPerformanceCycleTime == $(this).val()) return;
            $scope.selectedPerformanceCycleTime = $(this).val();
            $scope.loadUsersFromGestorByCycle($scope.selectedPerformanceCycleTime);
      });
      $('#career_users').change(function() {
            $scope.selectedPerformanceUser = $(this).val();
            $carreers['getCareerForUser']($scope.selectedPerformanceUser).then(function(response) {
                  $scope.career_details = response;
            });
            $carreers['getAll']($scope.selectedPerformanceUser).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived']($scope.selectedPerformanceUser).then(function(response) {
                  $scope.received_carreers = response;
            });
            $users['activities_career']($scope.selectedPerformanceUser).then(function(activities) {
                  $scope.activities_career = activities;
            });
            $scope.loadPerformanceServices($scope.selectedPerformanceUser);
            delete $scope.dp_session_added_activities;
            $scope.dp_session_added_activities = [];
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
            $scope.addMode = false;
            $scope.editMode = false;
            $scope.viewInFullSize = true;
      });
      $scope.showHideMeta = function(id_objetivo) {
            var icon_id = "#icon_dp_" + id_objetivo;
            if ($(icon_id).val() == 'arrow_drop_up') {
                  
                  $(icon_id).val() == 'arrow_drop_down';
            } else {
                 
                  $(icon_id).val() == 'arrow_drop_up';
            }
            var section_objectivo = ".section_meta_" + id_objetivo;
            $(section_objectivo).toggleClass('hide');
      }
      $scope.showHideActivities = function(meta_id) {
            $scope.refreshCareerBlock();
            var icon_id = "#icon_dp_activity_" + meta_id;
            if ($(icon_id).val() == 'arrow_drop_up') {
                  
                  $(icon_id).val() == 'arrow_drop_down';
            } else {
                 
                  $(icon_id).val() == 'arrow_drop_up';
            }
            var section_objectivo = "#section_meta_activities_" + meta_id;
            if ($(section_objectivo).attr('class') == 'hide') {
                  $(section_objectivo).removeClass('hide');
                  $(section_objectivo).addClass('show');
            } else {
                  $(section_objectivo).removeClass('show');
                  $(section_objectivo).addClass('hide');
            }
            $timeout(function() {
                  $('.career_sidebar_details').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
            }, 400);
      }
      $scope.get_goal_details_by_id = function(goal_id) {
            $scope.refreshCareerBlock();
            delete $scope.dp_added_activities;
            $carreers['getDpGoalDetailById'](goal_id).then(function(res) {
                  $('#id_dp_objetivo_glob').val(res.id_dp_objetivo);
                  $scope.goal_details = res;
                  $scope.id_dp_objetivo_glob = res.id_dp_objetivo;
                  $scope.nome_obj_glob = res.nome_dp_objetivo;
                  $scope.date_limit_glob = res.date_limit;
                  delete $scope.CargoNotAddedSelected;
                  $scope.CargoNotAddedSelected = [];
                  $('#objecive_dp_update_form #cargo_objevio_rht').select2('destroy');
                  $('#objecive_dp_update_form #active_status_rht').select2('destroy');
                  $timeout(function() {
                        $('#objecive_dp_update_form #active_status_rht').val(res.situacao);
                        $scope.datafunction();
                        $('#objecive_dp_update_form #cargo_objevio_rht').select2();
                        $('#objecive_dp_update_form #active_status_rht').select2();
                        $scope.CargoNotAddedSelected = res.cargos;
                        $('#objecive_dp_update_form #cargo_objevio_rht').change(function(e) {
                              $.each($scope.CargosNotAdded, function(i) {
                                    if ($scope.CargosNotAdded[i].id === $(e.currentTarget).val()) {
                                          var spliced = $scope.CargosNotAdded.splice(i, 1)[0];
                                          $scope.CargoNotAddedSelected.push(spliced);
                                          return false;
                                    }
                              });
                        });
                  }, 100);
            });
            $scope.viewInFullSize = false;
            $scope.editMode = true;
            $scope.addMode = false;
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
      }
      $scope.add_novo_dp_goal = function() {
            $scope.refreshCareerBlock();
            $scope.viewInFullSize = false;
            $scope.addMode = true;
            $scope.editMode = false;
            delete $scope.dp_session_added_activities;
            $scope.dp_session_added_activities = [];
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
            delete $scope.updateDpObjModel;
            delete $scope.id_dp_objetivo;
            delete $scope.nome_obj;
            delete $scope.date_limit;
            delete $scope.CargoNotAddedSelected;
            $scope.CargoNotAddedSelected = [];
            $('#cargo_objevio').select2('destroy');
            $('#active_status').select2('destroy');
            $timeout(function() {
                  $scope.datafunction();
                  $scope.showViewModel = false;
                  $('#cargo_objevio').select2();
                  $('#active_status').select2();
                  $('#objecive_dp_form #cargo_objevio').change(function(e) {
                        $scope.refreshCareerBlock();
                        $.each($scope.CargosNotAdded, function(i) {
                              if ($scope.CargosNotAdded[i].id === $(e.currentTarget).val()) {
                                    var spliced = $scope.CargosNotAdded.splice(i, 1)[0];
                                    $scope.CargoNotAddedSelected.push(spliced);
                                    return false;
                              }
                        });
                  });
            }, 300);
      }
      $scope.cancelToObjectivos = function() {
            $timeout(function() {
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
            }, 100);
      }
      $scope.returnToMainCareer = function() {
            delete $scope.dp_session_added_activities;
            $scope.dp_session_added_activities = [];
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
            $scope.addMode = false;
            $scope.editMode = false;
            $scope.viewInFullSize = true;
      }
      $scope.addDpObjectivo = function() {
            $('#objecive_dp_form').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        nome_obj: 'required',
                        date_limit: 'required',
                        active_status: {
                              valueNotEquals: "? undefined:undefined ?"
                        },
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#objecive_dp_form .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#objecive_dp_form .error-message').addClass('hide');
                        $('#objecive_dp_form .salvar').button('loading');
                        var data = {
                              name: $('#objecive_dp_form #nome_obj').val(),
                              date_limit: $('#objecive_dp_form #date_limit').val(),
                              active_status: $('#objecive_dp_form #active_status').val(),
                        }
                        data.cargoes = [];
                        $('#objecive_dp_form input[name^="cargos"]').each(function() {
                              data.cargoes.push($(this).val());
                        });
                        $carreers['save_user_dp_goals'](data).then(function(response) {
                              $timeout(function() {
                                    $scope.carreerTab();
                              }, 300);
                              toastr.success('Objetivo adicionado.');
                        });
                        delete $scope.updateDpObjModel;
                        $('#objecive_dp_form .salvar').button('reset');
                        $('#objecive_dp_form')[0].reset();
                  }
            });
      }

      $scope.addMetaMode = false;
      $scope.add_new_dp_meta = function() {
            $scope.addMetaMode = true;
            $scope.addMode = false;
            $scope.editMode = false;
            $scope.viewInFullSize = false;
            delete $scope.dp_added_activities;
            delete $scope.dp_minor_added_activities;
            $timeout(function() {
                  $scope.dp_minor_added_activities = [];
                  $carreers['getDpGoalDetailById']($scope.id_dp_objetivo_glob).then(function(res) {
                        $('#id_meta_obj_glob').val($scope.id_dp_objetivo_glob);
                        $scope.goal_details = res;
                        $scope.nome_obj_goal = res.nome_dp_objetivo;
                        $scope.date_limit_obj_meta = res.date_limit;
                        $timeout(function() {
                              $('#carrier_block_hgt').niceScroll({
                                    cursorcolor: "#3fb0ac",
                                    cursorborder: "none"
                              });
                              $('#fixed_hgt').niceScroll({
                                    cursorcolor: "#3fb0ac",
                                    cursorborder: "none"
                              });
                              $scope.datafunction();
                        }, 100);
                  });
            }, 200);
      }
      $scope.dp_minor_added_activities = new Array();
      var counter_acti = 0;
      $scope.addNewDpMinorActivity = function() {
            var data = {
                  index: counter_acti,
                  name: $('#addmeta_dp_form #activity_name_meta').val(),
                  activity_end: $('#addmeta_dp_form #activity_end_meta').val(),
            }
            if (data.name != '') {
                  $scope.dp_minor_added_activities.push(data);
                  counter_acti++;
            }
            $('#addmeta_dp_form #activity_name_meta').val('');
            $('#addmeta_dp_form #activity_end_meta').val('');
      }
      $scope.DeleteMinorDpActivity = function(index_id) {
            if ($scope.index_id == index_id) {
                  $('#addmeta_dp_form #activity_name_meta').val('');
                  $('#addmeta_dp_form #activity_end_meta').val();
            }
            $scope.dp_minor_added_activities.splice(index_id, 1);
      }
      $scope.addDpMeta = function() {
            $('#addmeta_dp_form').validate({
                  ignore: [],
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
                  rules: {
                        nome_meta_obj: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  submitHandler: function(form) {
                        var $post_dp_minor = new Array();
                        $.each($scope.dp_minor_added_activities, function(index, value) {
                              delete value.$$hashKey;
                              $post_dp_minor.push(value);
                        });
                        var data = {
                              parent_id: $('#addmeta_dp_form #id_meta_obj_glob').val() ? $('#addmeta_dp_form #id_meta_obj_glob').val() : 0,
                              name: $('#addmeta_dp_form #nome_meta_obj').val(),
                              goal_name: $('#addmeta_dp_form #nome_obj_goal').val(),
                              goal_prazo: $('#addmeta_dp_form #date_limit_obj_meta').val(),
                              activities: $post_dp_minor
                        }
                        $carreers['insert_minor_goals'](data).then(function(response) {
                              $('#addmeta_dp_form')[0].reset();
                              toastr.success('Meta adicionada.');
                              $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                                    $scope.career_details = response;
                              });
                        });
                        $timeout(function() {
                              $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                        }, 100);
                  }
            });
      }

      $scope.saveGlobalDpValues = function() {
            var data = $('#objecive_dp_update_form').serialize();
            $carreers['saveGlobalDpForm'](data).then(function(response) {
                  $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                        $scope.career_details = response;
                  });
            });
            toastr.success('Salvo com sucesso.');
            
            $timeout(function() {
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
            }, 300);
      }
      $scope.filterCareerBlock = function() {
            var user_id = $('#career_users').val();
            var status = $('#active_status_career').val();
            var objective_time = $('#objective_time').val();
            $('#filter_btn').removeClass('open');
            $('#filter_btn .dropdown-menu').css('display', 'none');
            if (!user_id) {
                  user_id = $scope.user.id;
            }
            $carreers['getCareerForUser'](user_id, status, objective_time).then(function(response) {
                  $scope.career_details = response;
            });
      }
      $scope.hideCarreerBlock = function() {
            $('#filter_btn').removeClass('open');
            $('#filter_btn .dropdown-menu').css('display', 'none');
      }
      $('#filter_by_startdate,#filter_by_enddate').change(function() {
            $('#filter_btn').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      });
      $scope.showFilterBox = function() {
            $('#filter_btn').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      }
      $scope.clearfilterCareerBlock = function() {
            $('#active_status_career').select2("val", "");
            $('#filter_by_startdate').val('');
            $('#filter_by_enddate').val('');
            $('#objective_time').val('');
            $('#objective_time').select2("val", "");
            var user_id = $('#career_users').val();
            $carreers['getCareerForUser'](user_id).then(function(response) {
                  $scope.career_details = response;
            });
      }
      $scope.filterCareerBlockCrossfeed = function() {
            var crossfeed_status = $('#crossfeed_status').val();
            var crossfeed_time = $('#crossfeed_time').val();
            var crossfeed_type = $('#crossfeed_type').val();
            var user_id = $('#career_users').val();
            $carreers['getAll'](user_id, crossfeed_status, crossfeed_time, crossfeed_type).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived'](user_id, crossfeed_status, crossfeed_time, crossfeed_type).then(function(response) {
                  $scope.received_carreers = response;
            });
            if (crossfeed_type == 'received') {
                  $timeout(function() {
                        $scope.carreers = [];
                  }, 500);
            }
            if (crossfeed_type == 'asked') {
                  $timeout(function() {
                        $scope.received_carreers = [];
                  }, 500);
            }
      }
      $scope.declineFeedback = function(id_feedback) {
            $('#dismiss-feedback-modal').modal();
            $('#completeDeclineFeedback').click(function() {
                  $carreers['declineFeedback'](id_feedback).then(function(response) {
                        $timeout(function() {
                              $scope.carreerTab()
                        }, 200);
                        $('#dismiss-feedback-modal').modal('hide');
                  });
            });
      }
      $scope.clearfilterCareerBlockCrossfeed = function() {
            $('#crossfeed_status').select2('val', '');
            $('#crossfeed_time').select2('val', '');
            $('#crossfeed_type').select2('val', '');
            var user_id = $('#career_users').val();
            $carreers['getAll'](user_id).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived'](user_id).then(function(response) {
                  $scope.received_carreers = response;
            });
      }

      $scope.filterCareerBlockAtivade = function() {
            var user_id = $('#career_users').val();
            var ativade_time = $('#ativade_time').val();
            var ativade_situacao = $('#ativade_situacao').val();
            if (!user_id) {
                  user_id = $scope.user.id;
            }
            $users['activities_career'](user_id, ativade_time, ativade_situacao).then(function(activities) {
                  $scope.activities_career = activities;
            });
      }

      $scope.clearfilterCareerBlockAtivade = function() {
            $('#ativade_time').select2('val', '');
            $users['activities_career']($scope.user.id).then(function(activities) {
                  $scope.activities_career = activities;
            });
      }

      var counter_acti = 0;
      $scope.addNewMinorActivity = function(meta_id) {
            var activity_name = '#objecive_dp_update_form #activity_name_meta_gb_' + meta_id;
            var activity_end_date = '#objecive_dp_update_form #activity_end_meta_gb_' + meta_id;
            var data = {
                  index: counter_acti,
                  meta_id: meta_id,
                  name: $(activity_name).val(),
                  activity_end: $(activity_end_date).val(),
            }
            if (data.name != '') {
                  $carreers['save_user_dp_activity'](data).then(function(response) {
                        $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                        $('#section_meta_activities_' + meta_id).removeClass('hide');
                        $('#icon_dp_activity_' + meta_id).removeClass('arrow_drop_down');
                        $timeout(function() {
                              $('#section_meta_activities_' + meta_id).addClass('show');
                              $('#icon_dp_activity_' + meta_id).addClass('arrow_drop_up');
                        }, 300);
                  });
                  counter_acti++;
            }
            $(activity_name).val('');
            $(activity_end_date).val('');
      }
      $scope.DeleteDpActivity = function(activity_id) {
            $carreers['delete_dpactivity'](activity_id).then(function(results) {
                  var meta_id = results.meta_id;
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                  $('#section_meta_activities_' + meta_id).removeClass('hide');
                  $('#icon_dp_activity_' + meta_id).removeClass('arrow_drop_down');
                  $timeout(function() {
                        $('#section_meta_activities_' + meta_id).addClass('show');
                        $('#icon_dp_activity_' + meta_id).addClass('arrow_drop_up');
                  }, 300);
            });
      }
      $scope.DeleteDpMeta = function(meta_id) {
            /*
            $carreers['delete_dpmeta'](meta_id).then(function(results) {
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
            });*/
      }
      $scope.updateactivityDp = function(activity_id, type) {
            $scope.refreshCareerBlock();
            $timeout(function() {
                  if (type == 'name') {
                        var field_id = '#activity_name_added_' + activity_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'date') {
                        var field_id = '#activity_date_added_' + activity_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'situacao') {
                        var field_id = '#activity_situacao_' + activity_id;
                        if ($(field_id).prop('checked') == true) {
                              var data = 1;
                        } else {
                              var data = 0;
                        }
                  }
            }, 200);
      }
      $scope.updatemetaDp = function(activity_id, type) {
            
            $scope.refreshCareerBlock();
            $timeout(function() {
                  if (type == 'name') {
                        var field_id = '#activity_name_added_' + activity_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'date') {
                        var field_id = '#activity_date_added_' + activity_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'situacao') {
                        var field_id = '#activity_situacao_' + activity_id;
                        if ($(field_id).prop('checked') == true) {
                              var data = 1;
                        } else {
                              var data = 0;
                        }
                  }
            }, 200);
      }
      $scope.refreshCareerBlock = function() {
            $timeout(function() {
                  $('#carrier_block_hgt').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  }).resize();
                  $('.career_sidebar_details').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  }).resize();
                  $('#crossfeed_status').select2({
                        maximumSelectionSize: 1
                  });
                  $('#crossfeed_time').select2({
                        maximumSelectionSize: 1
                  });
                  $('#crossfeed_type').select2({
                        maximumSelectionSize: 1
                  });
                  $('#ativade_situacao').select2();
                  // $('#ativade_situacao').select2('val','3');
                  $('#ativade_time').select2({
                        maximumSelectionSize: 1
                  });
            }, 400);
      }

      $scope.removeCargoAndRefresh = function(ur) {
            $('#cargo_objevio .select2').select2("val", "");
            $scope.removeAddedCargo(ur);
      };
      $scope.removeCargoAndRefreshFilter = function(ur) {
            $('#cargo_objevio_filter .select2').select2("val", "");
            $scope.removeAddedCargoFilter(ur);
      };
      $scope.Development_list = function() {
            $scope.showViewModel = false;
            $scope.carreerTab();
      }
      $scope.datafunction = function() {
            $timeout(function() {
                  if ($.isFunction($.fn.datepicker)) {
                        $(".data").each(function(i, el) {
                              var $this = $(this),
                                    opts = {
                                          format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                                          startDate: attrDefault($this, 'startDate', ''),
                                          endDate: attrDefault($this, 'endDate', ''),
                                          daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                                          startView: attrDefault($this, 'startView', 0),
                                          language: 'pt-BR',
                                          rtl: rtl()
                                    },
                                    $n = $this.next(),
                                    $p = $this.prev();
                              $this.datepicker(opts);
                              if ($n.is('.input-group-addon') && $n.has('a')) {
                                    $n.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                              if ($p.is('.input-group-addon') && $p.has('a')) {
                                    $p.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                        });
                  }
            }, 100);
      }
      $scope.NewDevelopment = function($id) {
            $scope.refreshCareerBlock();
            delete $scope.development_updates;
            delete $scope.feedbacktouser;
            delete $scope.feedback_description;
            delete $scope.feedback_deadline;
            delete $scope.feedback_deadline_date;
            $timeout(function() {
                  $("#form-new-development #feedbacktouser_cross").select2();
                  $scope.datafunction();
                  $scope.showViewModel = false;
            }, 100);
            $carreers['getUserDevQuestions']().then(function(response) {
                  $scope.devQuestions = response;
            });
            $scope.viewFullCrossfeed = false;
            $scope.addCrossfeedMode = true;
            $scope.editCrossfeedMode = false;
      }
      $scope.returnToMainCareerCrossfeed = function() {
            $scope.viewFullCrossfeed = true;
            $scope.addCrossfeedMode = false;
            $scope.editCrossfeedMode = false;
      }
      $scope.submitNewDevelopmentUpdate = function() {
            
            $('#form-new-development').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        feedbacktouser: 'required',
                        feedbacktouser: {
                              valueNotEquals: "? undefined:undefined ?"
                        },
                        feedback_description: 'required',
                        feedback_deadline: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#form-new-development .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#form-new-development .error-message').addClass('hide');
                        $('#form-new-development .salvar').button('loading');
                        var $data = $("#form-new-development").serialize();
                        $carreers['save_user_development_update_profile']($data).then(function(response) {
                              if (!response.error_message) {
                                    toastr.success('Adicionado com sucesso.');
                              } else {
                                    toastr.error(response.error_message);
                              }
                              $timeout(function() {
                                    $scope.carreerTab()
                              }, 500);
                        });
                        $('#form-new-development .salvar').button('reset');
                        $('#form-new-development')[0].reset();
                  }
            });
      }
      $scope.replyNewDevelopmentUpdate = function() {
            $('#form-reply-development').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        feedbacktouser: 'required',
                        feedbacktouser: {
                              valueNotEquals: "? undefined:undefined ?"
                        },
                        feedback_description: 'required',
                        feedback_deadline: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#form-new-development .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#form-reply-development .error-message').addClass('hide');
                        $('#form-reply-development .salvar').button('loading');
                        var $data = $("#form-reply-development").serialize();
                        $carreers['reply_user_development_update_profile']($data).then(function(response) {
                              if (!response.error_message) {
                                    toastr.success('Adicionado com sucesso.');
                              } else {
                                    toastr.error(response.error_message);
                              }
                              $timeout(function() {
                                    $scope.carreerTab()
                              }, 200);
                        });
                        $('#form-reply-development .salvar').button('reset');
                        $('#form-reply-development')[0].reset();
                  }
            });
      }
      $scope.showDevelopmentUpdate = function($id_feedback, feedback_type = '') {
            $scope.refreshCareerBlock();
            $scope.feedback_type = feedback_type;
            $timeout(function() {
                  $scope.showViewModel = true;
                  $('#form-reply-development #feedbacktouser_cross').prop('disabled', true);
                  $('#form-reply-development #feedback_description_cross').prop('disabled', true);
                  $('#form-reply-development #feedback_deadline_cross').prop('disabled', true);
                  $scope.datafunction();
            }, 300);
            $carreers['get_development_questionerios_profile']($id_feedback).then(function(response) {
                  $scope.viewDevUpdates = false;
                  $scope.dev_data = response;
                  $scope.destination_user = response[0].destination_user;
                  $scope.user_response = response[0].user_response;
                  $scope.devquestions = response[0].questions;
                  $scope.id_questionario_dev = response[1];
                  $scope.id_feedback_dev = response[0].id;
                  $scope.id_feedback_destino = response[0].id_usuario_solicitante;
                  $scope.feedbacktouser = response[0].id_usuario_destino;
                  $scope.feedback_description = response[0].response;
                  $scope.feedback_deadline = response[0].feedback_deadline;
                  $scope.feedback_deadline_date = response[0].feedback_deadline_date;
                  $scope.feedback_description = response[0].response;
                  $scope.posted_date = response[0].posted_date;
                  if (response[0].situacao == 1) {
                        $carreers['get_user_development_update_by_id']($id_feedback).then(function(response) {
                              $scope.viewDevUpdates = true;
                              $scope.view_questions = response.questions;
                              // console.log($scope.view_questions);
                        });
                  }
                  if ($scope.dev_data[0].id_usuario_destino == $scope.user.id) {
                        $scope.devAuthorised = true;
                  } else {
                        $scope.devAuthorised = false;
                  }
            })
            $scope.viewFullCrossfeed = false;
            $scope.addCrossfeedMode = false;
            $scope.editCrossfeedMode = true;
      }
      $scope.updateFeedbackDeadline = function(id_feedback) {
            var updated_date = $('#feedback_deadline_date').val();
            $carreers['update_feedback_deadline'](id_feedback, updated_date).then(function() {
                  $scope.showDevelopmentUpdate(id_feedback, $scope.feedback_type);
                  toastr.success("Updated successfully");
                  $timeout(function() {
                        $scope.carreerTab();
                  }, 300);
            });
      }
      $scope.updateFeedbackPrivacyStatus = function(id_feedback) {
            var feedback_status = $("input[name='crossfeeds_status']:checked").val();
            $carreers['update_feedback_privacy_status'](id_feedback, feedback_status).then(function() {
                  toastr.success("Atualizado com sucesso.");
                  $timeout(function() {
                        $scope.carreerTab();
                  }, 300);
            });
      }
      $scope.activity_details_career = function(activity_id) {
            $scope.refreshCareerBlock();
            $users['activity_detail_career'](activity_id).then(function(res) {
                  $scope.activity_detail = res;
            });
            $scope.viewFullActivity = false;
            $scope.activityViewDetail = true;
      }
      $scope.returnToMainCareerActivity = function() {
            $scope.viewFullActivity = true;
            $scope.activityViewDetail = false;
      }
      $scope.openTypeCommentsUnread = function() {
            $.each($scope.eloslist, function(index, value) {
                  if ($scope.eloslist[index].tipo == "comment" && $scope.eloslist[index].lido == 0) {
                        console.log("loadMore");
                        $scope.loadMoreComments($scope.eloslist[index]);
                        $scope.eloslist[index].showComments = true;
                        setTimeout(function() {
                              $('.form-elo-comment textarea').each(function(index, value) {
                                    $scope.setMentionFeature($(this));
                              });
                        }, 200);
                  }
            });
      }

});
elofy.controller('profileCtrl', function globalCtrl($scope, $results, $timeout, $years, $cycles, $cycleConfiguration, $users, $teams, $tags, $skills, $tatics, $globals, $empressa, $elos, timeAgo, nowTime, $dashboard, $carreers, $cargo, $surveys, $translate, $filter, $activities, $competencias, $mydashboard, $feedbacks) {
      $scope.unreadElosCount = 0;
      $scope.eloslist = new Array();
      $scope.activityEdit = new Array();
      $scope.activityCommentsFlag = new Array();
      $scope.listType = 0;
      $scope.detailResponsavel = new Array();
      $scope.elostats = null;
      $scope.selectedYear = new Date().getFullYear();
      $scope.pageLoadTime = (new Date()).toISOString();
      $scope.nowTime = nowTime;
      $scope.nowTimeAsDateObject = new Date();
      $scope.lastEloIdLoaded = 0;
      $scope.loadingElos = false;
      $scope.notifications = [];
      $scope.showingOnlyMyElos = false;
      $scope.showTopBlueBanner = true;
      $scope.showNewFlag = false;
      $scope.activityEditBottom = [false, false, false];
      $scope.activityCommentsBottom = [false, false, false];
      $scope.show_popup_form = false;
      $scope.show_feedback_form1 = false;
      $scope.show_feedback_form2 = false;
      $scope.class_feedback_form1 = 'active-feedback-tab';
      $scope.class_feedback_form2 = '';
      $scope.class_feedback_form3 = '';
      $scope.timeline_active = false;
      $scope.display_button_list = false;
      $scope.showButtonList = function() {
            $scope.display_button_list = !$scope.display_button_list;
      }

      $scope.change_timeline_mode = function(tab = null, tipo = null, id_elo = null) {

            if (!tab) $scope.timeline_active = !$scope.timeline_active;
            else if (tab =='feed')  $scope.timeline_active = true;
            else  $scope.timeline_active = false;
            if (tipo != null){
                  $scope.searchTipo = tipo;
                  setTimeout(function(){$('#search-tipo').trigger('change');}, 500);
            }
            if($scope.timeline_active){
                  $scope.lastEloIdLoaded = 0;
                  $scope.loadMoreElos(true);
            }
      }

      $scope.activities_bottom_list = {
            "1": {
                  "date_label": "success",
                  "data": "Falar com 50 fornecedores de software"
            },
            "2": {
                  "date_label": "danger",
                  "data": "Falar com 50 fornecedores de software"
            },
            "3": {
                  "date_label": "danger",
                  "data": "Falar com 50 fornecedores de software"
            }
      };
      $scope.showPopupMy = function() {
            $scope.show_popup_form = true;
            $scope.show_feedback_form1 = false;
            $scope.show_feedback_form2 = false;
            $scope.show_feedback_form3 = false;
            $scope.showTopBlueBanner = false;
      }
      $scope.showOnlyBanner = function() {
            $scope.show_popup_form = false;
            $scope.show_feedback_form1 = false;
            $scope.show_feedback_form2 = false;
            $scope.show_feedback_form3 = false;
            $scope.showTopBlueBanner = true;
      }
      $scope.showFeedbackForm1 = function() {
            $scope.class_feedback_form1 = 'active-feedback-tab';
            $scope.class_feedback_form2 = '';
            $scope.class_feedback_form3 = '';
            $scope.show_feedback_form1 = true;
            $scope.show_feedback_form2 = false;
            $scope.show_feedback_form3 = false;
            $scope.show_popup_form = false;
            $scope.showTopBlueBanner = false;
      }
      $scope.showFeedbackForm2 = function() {
            $scope.class_feedback_form2 = 'active-feedback-tab';
            $scope.class_feedback_form1 = '';
            $scope.class_feedback_form3 = '';
            $scope.show_feedback_form2 = true;
            $scope.show_feedback_form1 = false;
            $scope.show_feedback_form3 = false;
            $scope.show_popup_form = false;
            $scope.showTopBlueBanner = false;
      }
      $scope.showFeedbackForm3 = function() {
            $scope.class_feedback_form3 = 'active-feedback-tab';
            $scope.class_feedback_form1 = '';
            $scope.class_feedback_form2 = '';
            $scope.show_feedback_form3 = true;
            $scope.show_feedback_form1 = false;
            $scope.show_feedback_form2 = false;
            $scope.show_popup_form = false;
            $scope.showTopBlueBanner = false;
      }
      $scope.atividades_top_form_hide = function() {
            $scope.atividades_top_form = false;
      }
      $scope.getProgressbarClass = function(percentage) {
            if (parseInt(percentage) == 100) {
                  return 'blue-progress-blue';
            } else if (parseInt(percentage) >= 81) {
                  return 'blue-progress-green';
            } else if (parseInt(percentage) >= 50) {
                  return 'blue-progress-yellow';
            } else {
                  return 'blue-progress-red';
            }
      }
      $scope.activityEdit_show = function(j) {
            $scope.activityEdit[j] = true;
      }
      $scope.activityEdit_hide = function(i) {
            $scope.activityEdit[i] = false;
      }
      $scope.activityEditBottom_show = function(j) {
            $scope.activityEditBottom[j] = true;
      }
      $scope.activityEditBottom_hide = function(i) {
            $scope.activityEditBottom[i] = false;
      }
      $scope.$watch('activities_list', function(newValue, oldValue) {
            angular.forEach(newValue, function(res, index) {
                  $scope.activityEdit[index] = false;
                  $scope.activityCommentsFlag[index] = false;
            })
      });
      // setTimeout(function(){
      //         $(".notification-box").niceScroll({ 'cursorcolor': "#fff" });
      //     }, 1400);
      $years['get']().then(function(years) {
            $scope.$parent.years = years;
            $timeout(function() {
                  var $years = $('.select-year');
                  $years.addClass('visible');
                  $years.selectBoxIt();
            }, 10);
            $cycles['getByYear']($scope.selectedYear).then(function(cycles) {
                  $scope.cycles = cycles;
                  if ($scope.cycles.length) {
                        if ($scope.cycles[0].id) {
                              $scope.cycles.unshift({
                                    id: '',
                                    name: 'Todos'
                              });
                        }
                  }
                  $scope.selectedCycle = '';
                  $timeout(function() {
                        var $cycles = $('.select-cycle');
                        $cycles.addClass('visible');
                        $cycles.selectBoxIt();
                  }, 10);
            });
      });
      $('#completeSetProfilePic').click(function() {
            $users['setUserProfilePicture']().then(function() {
                  $('#profilepic-modal').modal('hide');
                  toastr.success("Imagem atualizada.");
                  $timeout(function() {
                        location.reload(true);
                  }, 500);
            });
      });
      $('#cancelToSaveImage').click(function() {
            $('#profilepic-modal').modal('hide');
            /* $users['cancelToSaveImage']().then(function(){
             $('#profilepic-modal').modal('hide');
             toastr.error("Picture successfully not updated");
             $timeout(function(){
             location.reload(true);  
             },500);
             }); */
      });
      $scope.removeSocialAccount = function(type) {
            $users['removeSocialAccount'](type, $scope.user.id).then(function() {
                  $('#modal-user').modal('hide');
                  toastr.success("Conta desvinculada.");
                  $timeout(function() {
                        location.reload(true);
                  }, 500);
            });
      }
      $scope.getStarValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getHeartValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getDevStarValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getDevHeartValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.isItTheSameNotification = function(notList1, notList2) {
            // usado para animar a entrada quando tem novidade
            if (notList1.length != notList2.length) return false;
            // se continuar, têm o mesmo tamanho
            for (let i = 0; i < notList1.length; i++) {
                  if (notList1.type != notList2.type) return false; // já descobri que um não tem o tipo igual, então já retorno
                  // se chegou aqui, os tipos são iguais
                  if (notList1.type == "elo" && notList1.id != notList2.id) return false; // se algum elo for diferente na lista, significa que não é o mesmo objeto
            }
            // se passou por tudo, é igual
            return true;
      }
      $scope.notificationsLength = function(skipElos){
            var count = 0;
            angular.forEach($scope.notifications, function(result, key){
                  if ((result['type'] != 'elo' && result['type'] != 'new_comment_mention' && result['type'] != 'new_likes' && result['type'] != 'new_comments')|| !skipElos) count ++;
            });
            if ($scope.surveys) count = count + $scope.surveys.length;
            return count;
      }

      $scope.hasEloNotifications = function(skipElos){
            var count = 0;
            angular.forEach($scope.notifications, function(result, key){
                  if (result['lido'] == 0 && ( result['tipo'] == '0' || result['tipo'] == '5' )/*|| result['tipo'] == '6'*/ ) count ++;
            });
            return count > 0.4;
      }



      $scope.birthdaysFromElos = function(){
            var arr = [];
            angular.forEach($scope.notifications, function(result, key){
                  if (result['tipo'] ==  5) arr.push(result);
            });
            return arr;
      }

      $scope.getCycleNotifications = function() {
            $dashboard['getCycleNotifications']().then(function(notifications) {
                  $scope.cycleNotifications = notifications;
            });
      };
      $scope.getCycleNotifications();

      $scope.getYouTimeNotification = function() {
            $results['getYouTimeNotification']().then(function(notifications) {
                  $scope.youTimeNotification = notifications;
            });
      }
      $scope.getYouTimeNotification();

      $scope.closeYouTime = function() {
            if (!$scope.id_protocolo) {
                  return;
            }
            $results['closeYouTimeByIdProtocol']($scope.id_protocolo).then(function(res) {
                  toastr.success('Encerrar!');
                  $('#youTimeModal').modal('hide');
                  $scope.getYouTimeNotification();
            });
      }

      $scope.confirmYouTime = function() {
            if (!$scope.id_protocolo) {
                  return;
            }
            $results['confirmYouTimeByIdProtocol']($scope.id_protocolo).then(function(res) {
                  toastr.success('Confirmar!');
                  $('#youTimeModal').modal('hide');
                  $scope.getYouTimeNotification();
            });
      }

      $scope.openYouTimeNotification = function(notification) {
            $scope.selectedYouTimeNotification = notification;
            $scope.questions_competencias_array = [];
            $scope.id_protocolo = null;
            $users['get_questionerios_profile']('n').then(function(response) {
                  $scope.questions = response;
                  $scope.textAnswers = [];
                  $scope.id_protocolo = notification.id_protocolo_questionario;
                  $results['getYouTimeByIdProtocol']($scope.id_protocolo).then(function(res) {
                        angular.forEach(res, function(item, key) {
                              if (item.tipo == 'q') {
                                    $scope.textAnswers[item.id_pergunta] = item.resposta_qualitativa;
                              }
                              if (item.tipo == 'c') {
                                    $scope.getHeartValue(item.id_pergunta, item.rating_score);
                              }
                              if (item.tipo == 'e') {
                                    $scope.getStarValue(item.id_pergunta, item.rating_score);
                              }
                              if (item.tipo == 't') {
                                    if (typeof $scope.questions_competencias_array[item.id_pergunta] == "undefined") {
                                          $scope.questions_competencias_array[item.id_pergunta] = [];
                                    }
                                    $scope.questions_competencias_array[item.id_pergunta].push({
                                          comp_name: item.nome_competencia,
                                          answer: item.descricao
                                    });
                              }
                        });
                  });
            })
            $('#youTimeModal').modal('show', {
                  backdrop: 'static'
            });
      }

      $scope.updateNotifications = function() {
            $dashboard['getNotifications']().then(function(notifications) {
                  let isTheSame = $scope.isItTheSameNotification($scope.notifications, notifications);
                  $scope.notifications = notifications;
                  // update nice scroller
                  $('.notification-box').trigger('change');
                  if (!isTheSame) {
                        $('.notification-box').hide().fadeIn(400);
                  }
                  setTimeout(function() {
                        $(".notification-box").niceScroll({
                              'cursorcolor': "#fff"
                        })
                  }, 100);
            });
      };
      // executa o início dos updates
      // depois é consultado novamente no mytab() só que sem o timer inicial;
      setTimeout($scope.updateNotifications, 100);
      $scope.notificationInterval = setInterval($scope.updateNotifications, 60000);
      $scope.getTeamUserDataProfile = function() {
            $scope.searchprofiletab = 1;
            delete $scope.searchuser_updates;
            delete $scope.myprofiletatics;
            delete $scope.mytatics;
            delete $scope.recieveds;
            delete $scope.givens;
            delete $scope.requesteds;
            delete $scope.activites;
            delete $scope.activities;
            delete $scope.search_data;
            var user_path = window.location.href.replace(baseurl, '');
            var arr_path = user_path.split('/');
            var search_user = arr_path[1];
            $users['details'](search_user).then(function(response) {
                  $scope.search_user = response;
            });
            var data = {
                  user_id: search_user,
                  year: $scope.selectedYear,
                  cycle: $scope.selectedCycle
            }
            $users['search_user_data'](data).then(function(response) {
                  $users['get_search_user_updates'](search_user).then(function(get_user_updates) {
                        $scope.searchuser_updates = get_user_updates;
                  });
                  $scope.myprofiletatics = response.myobjectivos;
                  $scope.mytatics = response.mytatics;
                  $scope.recieveds = response.feedback_recived;
                  $scope.givens = response.feedback_given;
                  $scope.requesteds = response.feedback_requested;
                  $scope.activites = response.activites;
                  $scope.activities = $scope.activites.activities;
                  $scope.search_data = response;
            });
      }
      $scope.showsearchupdate = function($id_protocolo) {
            var user_path = window.location.href.replace(baseurl, '');
            var arr_path = user_path.split('/');
            var search_user = arr_path[1];
            $('#search_update').modal('show', {
                  backdrop: 'static'
            });
            $users['get_search_user_update_by_id']($id_protocolo, search_user).then(function(teamquestions) {
                  $scope.teamquestions = teamquestions;
                  $users['get_search_user_privacy_and_review_status']($id_protocolo, search_user).then(function(status) {
                        $scope.review_privacy_status = status;
                        if (status.publico == 1) {
                              $('#visiblitypublic_prfil').prop('checked', true);
                        } else {
                              $('#visiblityprivate_prfil').prop('checked', true);
                        }
                        if (status.situation == 1) {
                              $('#reviewed_status').prop('checked', true);
                        } else {
                              $('#reviewed_status').prop('checked', false);
                        }
                  });
            });
      }
      $scope.filterbyWeek = function() {
            var this_week_start = moment().subtract('days', 0).format('YYYY-MM-DD');
            var this_week_end = moment().subtract('days', 7).format('YYYY-MM-DD');
            var last_week_start = moment().subtract('days', 7).format('YYYY-MM-DD');
            var last_week_end = moment().subtract('days', 14).format('YYYY-MM-DD');
            var two_week_start = moment().subtract('days', 14).format('YYYY-MM-DD');
            var two_week_end = moment().subtract('days', 21).format('YYYY-MM-DD');
            var three_week_start = moment().subtract('days', 21).format('YYYY-MM-DD');
            var three_week_end = moment().subtract('days', 28).format('YYYY-MM-DD');
            delete $scope.myteams;
            var type = $scope.searchWeek;
            if (type == 'current') {
                  $scope.from_date = this_week_start;
                  $scope.to_date = this_week_end;
            } else if (type == 'last') {
                  $scope.from_date = last_week_start;
                  $scope.to_date = last_week_end;
            } else if (type == '2') {
                  $scope.from_date = two_week_start;
                  $scope.to_date = two_week_end;
            } else if (type == '3') {
                  $scope.from_date = three_week_start;
                  $scope.to_date = three_week_end;
            } else if (type == 'all') {
                  $users['get_my_team_by_empresa']().then(function(response) {
                        $scope.myteams = response[0];
                        $scope.updatestatistics = response[1];
                        $scope.teamcarousel();
                  });
                  return true;
            }
            $users['get_my_team_by_empresa']($scope.from_date, $scope.to_date).then(function(response) {
                  $scope.myteams = response[0];
                  $scope.updatestatistics = response[1];
                  $scope.teamcarousel();
            });
      }
      $(".new_team_block").niceScroll({
            'cursorcolor': "#33a9f4"
      })
      // $scope.trustHtml = function(html) {
      //     return $sce.trustAsHtml(html);
      // };
      $scope.tagUserClick = function(e) {
            var tagText = e.target.innerText;
            alert('tagUserClick, tagText: ' + tagText);
      };
      $scope.tagTermClick = function(e) {
            var tagText = e.target.innerText;
            $scope.eloTab(false, tagText);
      };
      $scope.eloTab = function($onlyMineOnes = false, $hashtagFilter = null) {
            $scope.carreerTab();
            $scope.showingOnlyMyElos = $onlyMineOnes;
            $scope.hashtagFilter = $hashtagFilter;
            //limpeza de notificações para reanimar na volta da tela inicial
            $scope.notifications = [];
            // clearInterval($scope.notificationInterval);
            $scope.profiletab = 1;
            $scope.unreadElosCount = 0; // teoricamente se eu entrei na tela, eu li meus elos.
            // resetar a lista para recarregar
            $scope.eloslist = [];
            $scope.specEloslist = [];
            $scope.lastEloIdLoaded = 0;
            delete $scope.restElosCount;
            // $scope.loadMoreElos();
            // 240 horas para contagem dos top hashs de elos
            $elos['getStats'](240).then(function(response) {
                  $scope.elostats = response;
            });
            if ($scope.searchTipo == undefined) {
                  $scope.searchTipo = -1;
            }
      }
      if (window.location.href.includes('atividades')) {
            $scope.$watch('user', function(newValue, oldValue) {
                  if (typeof newValue.empresa != 'undefined') {
                        $scope.eloTab();
                        // $scope.activitiesTab(0);
                        if (!$scope.selectedYear) {
                              $scope.selectedYear = new Date().getFullYear();
                        }
                        $mydashboard['getAllCurrentCycles']($scope.selectedYear).then(function(res) {
                              $scope.fcycles = res;
                              var curDate = new Date();
                              var curCycle = '';
                              angular.forEach($scope.fcycles, function(result, key) {
                                    if (new Date(result.inicio_vigencia) < curDate && new Date(result.fim_vigencia) > curDate) {
                                          curCycle = result.id_ciclo;
                                    } 
                              });
                              $users['get']().then(function(response) {
                                    $scope.responibles = response;
                                    $scope.responsavelsNotAdded = JSON.parse(JSON.stringify(response));
                                    setTimeout(function() {
                                          $('#selectedCiclo').select2('val', curCycle);
                                          $.each($scope.responsavelsNotAdded, function(i) {
                                                if ($scope.responsavelsNotAdded[i].id == $scope.user.id) {
                                                      var spliced = $scope.responsavelsNotAdded.splice(i, 1)[0];
                                                      $scope.responsavelsNotAddedSelected.push(spliced);
                                                      $('#fresponsavel').select2("val", $scope.user.id);
                                                      return false;
                                                }
                                          });
                                          setTimeout(function() {
                                                $scope.applyFilterActivity();
                                          }, 100);
                                    }, 100);
                              });
                        });
                  }
            });
      } else if (window.location.href.includes('checkin')) {
            $scope.$watch('user', function(newValue, oldValue) {
                  if (typeof newValue.empresa != 'undefined') {
                        $scope.eloTab();
                        $scope.myTeamTab();
                  }
            });
      } else {
            $scope.$watch('user', function(newValue, oldValue) {
                  if (typeof newValue.empresa != 'undefined') {
                        $scope.eloTab();
                  }
            });
      }
      if (window.location.href.includes('carreira')) {
            $scope.$watch('user', function(newValue, oldValue) {
                  if (typeof newValue.empresa != 'undefined') {
                        $scope.eloTab();
                        $scope.carreerTab(0);
                  }
            });
      }
      $scope.moveEloGallery = function(elo, side = "right"){
            // if (!elo.galleryIndex) elo.galleryIndex = 0;
            if (side == "right") 
            {
                  if (elo.galleryIndex < (elo.imagens.length - 1)) elo.galleryIndex++;
                  else elo.galleryIndex = 0;
            }
            else 
            {
                   if (elo.galleryIndex > 0) elo.galleryIndex--;
                   else elo.galleryIndex = elo.imagens.length - 1;
            }
      }
      $scope.loadMoreElos = function(clear) {
            var reloadTime = 5;
            if (!$scope.timeline_active || ($scope.restElosCount == 0 && !clear) || $scope.loadingElos) {
                  clearInterval($scope.loadMoreElosInterval);
                  $scope.loadMoreElosInterval = setTimeout(function(){
                        $scope.lastEloIdLoaded = 0;
                        $scope.loadMoreElos(true);
                  }, reloadTime*60000);
                  return;
            }            $scope.loadingElos = true;
            var pm;
            if ($scope.showingOnlyMyElos) pm = $elos['toMe'](12, $scope.lastEloIdLoaded);
            else pm = $elos['getByCompany']($scope.user.empresa.id_empresa, 12, $scope.lastEloIdLoaded, $scope.hashtagFilter);
            pm.then(function(response) {
                  if (clear){
                        $scope.specEloslist = [];
                        $scope.eloslist = [];
                  }
                  var idArray = [];
                  if ($scope.specEloslist.length != 0) {
                        $.each($scope.specEloslist, function(index, value) {
                              $.each(value.specElos, function(index, value) {
                                    idArray.push(value.id);
                              });
                        });
                  }
                  var moreElos = response["elos"];
                  $scope.lastEloIdLoaded = response["lastLoadedId"];
                  $scope.restElosCount = response["restCount"]?response["restCount"]:0;
                  var marcarEstesComoLidos = [];
                  var specElos = [];
                  var date = "";
                  var tipo = [];
                  var total_data = [];
                  var data = {};
                  $.each(moreElos, function(index, value) {
                        if (!idArray.includes(value.id)) {
                              // ADICIONANDO PARA MARCAR LEITURA
                              if (moreElos[index].tipo == 5 || moreElos[index].tipo == 7 || moreElos[index].tipo == 8 || moreElos[index].lido == 0 || moreElos[index].novas_curtidas == 1 || moreElos[index].novos_comentarios == 1) marcarEstesComoLidos.push(moreElos[index].id);
                              moreElos[index].comments = new Array();
                              moreElos[index].showComments = false;
                              moreElos[index].hasMoreComments = false;
                              if (value['imagens'] && value['imagens'].length > 0) moreElos[index].galleryIndex = 0;
                              $.each(moreElos[index].comments, function(index, value) {
                                    if (value.id == $scope.user.empresa.id_empresa) {
                                          moreElos[index].colorFlag = true;
                                    }
                              });
                              var index_date = moreElos[index].eventDate;
                              if (date != index_date) {
                                    if (date != "") {
                                          data = {
                                                date: date,
                                                specElos: specElos,
                                                tipo: tipo
                                          };
                                          total_data.push(data);
                                    }
                                    date = index_date;
                                    specElos = [];
                                    tipo = [];
                                    tipo.push(moreElos[index].tipo);
                                    moreElos[index].nome_entidade_array = [];
                                    if (moreElos[index].tipo == 3) {
                                          moreElos[index].nome_entidade = moreElos[index].nome_entidade.split(':')[1];
                                          var len = (moreElos[index].nome_entidade.match(/;/g) || []).length + 1;
                                          for (i = 0; i < len; i++) {
                                                moreElos[index].nome_entidade_array.push(i);
                                          }
                                    }
                                    specElos.push(moreElos[index]);
                              } else {
                                    tipo.push(moreElos[index].tipo);
                                    moreElos[index].nome_entidade_array = [];
                                    if (moreElos[index].tipo == 3) {
                                          var len = (moreElos[index].nome_entidade.match(/;/g) || []).length + 1;
                                          for (var i = 0; i < len; i++) {
                                                moreElos[index].nome_entidade_array.push(i);
                                          }
                                    }
                                    specElos.push(moreElos[index]);
                              }
                              if (index == (moreElos.length - 1)) {
                                    data = {
                                          date: date,
                                          specElos: specElos,
                                          tipo: tipo
                                    };
                                    total_data.push(data);
                              }
                        }
                  });
                  // MARCANDO LEITURA
                  if (marcarEstesComoLidos.length > 0) {
                        $elos['markEloAsRead'](marcarEstesComoLidos).then(function(response) {
                              // Elos marcados.
                        });
                  }
                  $scope.specEloslist = $scope.specEloslist.concat(total_data);
                  $scope.eloslist = $scope.eloslist.concat(moreElos);
                  $scope.loadingElos = false;
                  if ($scope.showingOnlyMyElos) $scope.openTypeCommentsUnread();
                  clearInterval($scope.loadMoreElosInterval);
                  $scope.loadMoreElosInterval = setTimeout(function(){
                        $scope.lastEloIdLoaded = 0;
                        $scope.loadMoreElos(true);
                  }, reloadTime*60000);
            });
      }

      function addRadarData(data_array) {
            var myRadarChart = new Chart(document.getElementById('competencia_chart'), {
                  "type": "radar",
                  "data": {
                        "labels": ["Gestor", "Auto", "Média Pares", "Equipe"],
                        "datasets": data_array
                  },
                  "options": {
                        "elements": {
                              "line": {
                                    "tension": 0,
                                    "borderWidth": 3
                              }
                        }
                  }
            });
      }
      var myCompetenciaRadar;
      /* initiate user avatar */
      $scope.career_valid_image = false;
      $scope.$watch('career_details', function(newVal, oldVal) {
            if (newVal) {
                  $activities['isValidImage']($scope.career_details.image).then(function(response) {
                        if (response) $scope.career_valid_image = true;
                        else $scope.career_valid_image = false;
                  });
            }
      }); 
      // $scope.$watch('user', function(newVal, oldVal) {
      //       if (newVal) {
      //             $activities['isValidImage']($scope.user.md_image).then(function(response) {
      //                   if (!response) $scope.user.md_image = 'assets/img/elinho.png';
      //             });
      //       }
      // });
      $scope.$watch('specEloslist', function(newVal, oldVal) {
            if (newVal) {
                  angular.forEach($scope.specEloslist, function(result, key){
                        angular.forEach($scope.specEloslist[key].specElos, function(r, k){

                              $activities['isValidImage']($scope.specEloslist[key].specElos[k].usuario_responsavel.image).then(function(response) {
                                    if (!response) $scope.specEloslist[key].specElos[k].usuario_responsavel.image = 'assets/img/elinho.png';
                              });
                              $activities['isValidImage']($scope.specEloslist[key].specElos[k].usuario_responsavel.md_image).then(function(response) {
                                    if (!response) $scope.specEloslist[key].specElos[k].usuario_responsavel.md_image = 'assets/img/elinho.png';
                              });
                        });
                  });
                 
            }
      });
      /* initiate user avatar */
      $scope.carreerTab = function() {
            $scope.profiletab = 5;
            $scope.CargoNotAddedSelected = [];
            $scope.CargoNotAddedSelectedFilter = [];
            delete $scope.meta_id;
            delete $scope.goal_id;
            delete $scope.updateDpObjModel;
            delete $scope.situacaoStatus;
            $("#career_users").select2();
            $("#active_status_career").select2();
            $("#objective_time").select2();
            $scope.viewInFullSize = true;
            $scope.viewFullCrossfeed = true;
            $scope.viewFullActivity = true;
            $scope.addMode = false;
            $scope.editMode = false;
            $timeout(function() {
                  myCompetenciaRadar = new Chart(document.getElementById('competencia_chart'), {
                        "type": "radar",
                        "data": {
                              "labels": [],
                              "datasets": []
                        },
                        "options": {
                              "elements": {
                                    "line": {
                                          "tension": 0,
                                          "borderWidth": 3
                                    }
                              },
                              scale: {
                                    pointLabels: {
                                          fontSize: 16,
                                          fontStyle: '300'
                                    },
                                    ticks: {
                                          beginAtZero: true,
                                          min: 0,
                                    }
                              }
                        }
                  });
                  $(document).on('click', '#filter_btn .dropdown-menu', function(e) {
                        e.stopPropagation();
                  });
                  $scope.datafunction();
                  $("#Planejamento_status").val('1');
                  $("#Planejamento_status").select2();
                  $("#performance-cycle-select").select2();
                  $("#performance-cycle-select-time").select2();
                  $('#dev_sent_updates').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('#dev_received_updates').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('#carrier_block_hgt').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('.career_sidebar_details').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('#active_status_career').select2('val', 1);
                  $results['getCompetenciaFromUserByCycle']($scope.user.id, $scope.selectedPerformanceCycle).then(function(results) {
                        $scope.competenciaFromUsuarioByCycle = results;
                        $scope.competencia_1_visibility = false;
                        $scope.competencia_2_visibility = false;
                        $scope.competencia_3_visibility = false;
                        $scope.competencia_4_visibility = false;
                        myCompetenciaRadar.data.labels = [];
                        myCompetenciaRadar.data.datasets = [];
                        if ($scope.competenciaFromUsuarioByCycle.length > 0) {
                              angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                                    myCompetenciaRadar.data.labels.push(item['nome_comp']);
                              });
                              myCompetenciaRadar.data.datasets.push({
                                    "label": 'Gestor',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(159, 224, 167, 0.4)",
                                    "borderColor": 'rgb(159, 224, 167)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Auto',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(228, 228, 166, 0.4)",
                                    "borderColor": 'rgb(228, 228, 166)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Pares',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(198, 173, 243, 0.4)",
                                    "borderColor": 'rgb(198, 173, 243)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Equipes',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(200, 132, 218, 0.4)",
                                    "borderColor": 'rgb(200, 132, 218)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, );
                              myCompetenciaRadar.update();
                        }
                        angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                              $scope.competencia_1_visibility |= item['score_1'] || item['numComentarios_1'];
                              $scope.competencia_2_visibility |= item['score_2'] || item['numComentarios_2'];
                              $scope.competencia_3_visibility |= item['score_3'] || item['numComentarios_3'];
                              $scope.competencia_4_visibility |= item['score_4'] || item['numComentarios_4'];
                              myCompetenciaRadar.data.datasets[0].data.push(item['score_2']);
                              myCompetenciaRadar.data.datasets[1].data.push(item['score_1']);
                              myCompetenciaRadar.data.datasets[2].data.push(item['score_3']);
                              myCompetenciaRadar.data.datasets[3].data.push(item['score_4']);
                        });
                        myCompetenciaRadar.update();
                  });
            }, 1000);
            $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                  $scope.career_details = response;
            });
            $carreers['getAll']($scope.user.id).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived']($scope.user.id).then(function(response) {
                  $scope.received_carreers = response;
            });
            $users['getAllUsersCombo']().then(function(response) {
                  $scope.users_combo = response;
                  if (!$scope.users_combo.find(x => x.id === $scope.$parent.user.id)) $scope.users_combo.push({
                        id: $scope.$parent.user.id,
                        name: $scope.$parent.user.name
                  });
                  $scope.carrer_user_id = $scope.$parent.user.id;
                  setTimeout(function() {
                        $("#career_users").val($scope.$parent.user.id);
                        $("#career_users").trigger('change');
                  }, 300);
            });
            $users['activities_career']($scope.user.id).then(function(activities) {
                  $scope.activities_career = activities;
            });
            $scope.addDevelopmentTab = 1;
            $cargo['cargos']().then(function(response) {
                  $scope.cargos = response;
                  $scope.CargosNotAdded = response;
                  $scope.CargosNotAddedFilter = response;
            });
            $scope.selectedPerformanceUser = $scope.user.id;
            // tirei esta chamada pois ela já acontece no set do usuário default
            // $scope.loadPerformanceServices($scope.selectedPerformanceUser);      
      }
      $scope.loadUsersFromGestorByCycle = function(id_cycle) {
            $users['getUsersFromGestorByCycle'](id_cycle).then(function(response) {
                  $scope.usersFromGestor = response;
            });
      }
      $scope.revokeEvaluationAccess = function(user) {
            alert('2');
            user.liberado = 0;
            $results['revokeEvaluationAccess'](user.id, user.id_revisao_ciclo).then(function(results) {
                  toastr.success("Avaliação Bloqueada");
            });
      }
      $scope.grantEvaluationAccess = function(user) {
            alert('2');
            user.liberado = 1;
            $results['grantEvaluationAccess'](user.id, user.id_revisao_ciclo).then(function(results) {
                  toastr.success("Avaliação Liberada");
            });
      }
      //temporary solution
      var temp_user_path = window.location.href.replace(baseurl, '');
      var temp_arr_path = temp_user_path.split('/');
      if (temp_arr_path.length == 1) {
            var custom_ctx = document.getElementById("cicles_average_chart1").getContext("2d");
            var global_average_chart = new Chart(custom_ctx, {
                  // The type of chart we want to create
                  type: 'line',
                  // The data for our dataset
                  data: {
                        labels: ["January", "February", "March", "April", "May", "June", "July"],
                        datasets: [{
                              label: "My First dataset",
                              backgroundColor: 'rgb(255, 99, 132)',
                              borderColor: 'rgb(255, 99, 132)',
                              data: [0, 10, 5, 2, 20, 30, 45],
                        }]
                  },
                  // Configuration options go here
                  options: {}
            });
      }
      $scope.loadPerformanceServices = function(user_id, cycle_id = null) {
            var loadScores = function(user, cycle) {
                  if (!cycle) return;
                  $cycleConfiguration['getReguaByCycleId'](cycle).then(function(results) {
                        $scope.selected_cycle_ruler = results;
                  });
                  $results['getUserAveragesScores'](user).then(function(results) {
                        $scope.performanceAverageScores = results;
                        global_average_chart.destroy();
                        $scope.setupAverageChart();
                  });
                  $results['getResultsFromUserByCycle'](user, cycle).then(function(results) {
                        $scope.scoresFromCycle = results;
                        $scope.setupScoresFromCycleChart();
                  });
                  $results['getValoresFromUsuarioByCycle'](user, cycle).then(function(results) {
                        $scope.valoresFromUsuarioByCycle = results;
                        $scope.score_1_visibility = false;
                        $scope.score_2_visibility = false;
                        $scope.score_3_visibility = false;
                        $scope.score_4_visibility = false;
                        angular.forEach($scope.valoresFromUsuarioByCycle, function(item, key) {
                              $scope.score_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.score_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.score_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.score_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $results['getPotencialFromUsuarioByCycle'](user, cycle).then(function(results) {
                        $scope.potencialFromUsuarioByCycle = results;
                        $scope.potencial_1_visibility = false;
                        $scope.potencial_2_visibility = false;
                        $scope.potencial_3_visibility = false;
                        $scope.potencial_4_visibility = false;
                        angular.forEach($scope.potencialFromUsuarioByCycle, function(item, key) {
                              $scope.potencial_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.potencial_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.potencial_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.potencial_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $results['getResultadoFromUsuarioByCycle'](user, cycle).then(function(results) {
                        $scope.resultadoFromUsuarioByCycle = results;
                        $scope.resultado_1_visibility = false;
                        $scope.resultado_2_visibility = false;
                        $scope.resultado_3_visibility = false;
                        $scope.resultado_4_visibility = false;
                        angular.forEach($scope.resultadoFromUsuarioByCycle, function(item, key) {
                              $scope.resultado_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.resultado_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.resultado_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.resultado_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $results['getCompetenciaFromUserByCycle'](user, cycle).then(function(results) {
                        $scope.competenciaFromUsuarioByCycle = results;
                        if (results.length > 20) {
                              document.getElementById("competencia_chart").style.minHeight = "360px";
                              document.getElementById("competencia_chart").style.minWidth = "720px";
                              document.getElementById("chartjs-radar").style.width = "100%";
                        }
                        $scope.competencia_1_visibility = false;
                        $scope.competencia_2_visibility = false;
                        $scope.competencia_3_visibility = false;
                        $scope.competencia_4_visibility = false;
                        myCompetenciaRadar.data.labels = [];
                        myCompetenciaRadar.data.datasets = [];
                        if ($scope.competenciaFromUsuarioByCycle.length > 0) {
                              angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                                    myCompetenciaRadar.data.labels.push(item['nome_comp']);
                                    $competencias['search']('', '', '', '', '', '', '', item['nome_competencia']).then(function(response) {
                                          $scope.competenciaFromUsuarioByCycle[key].description = response[0].descricao;
                                    });
                              });
                              myCompetenciaRadar.data.datasets.push({
                                    "label": 'Gestor',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(159, 224, 167, 0.4)",
                                    "borderColor": 'rgb(159, 224, 167)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Auto',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(228, 228, 166, 0.4)",
                                    "borderColor": 'rgb(228, 228, 166)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Pares',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(198, 173, 243, 0.4)",
                                    "borderColor": 'rgb(198, 173, 243)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Equipes',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "rgba(200, 132, 218, 0.4)",
                                    "borderColor": 'rgb(200, 132, 218)',
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, );
                              myCompetenciaRadar.update();
                        }
                        angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                              $scope.competencia_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.competencia_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.competencia_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.competencia_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                              myCompetenciaRadar.data.datasets[0].data.push(item['score_2']);
                              myCompetenciaRadar.data.datasets[1].data.push(item['score_1']);
                              myCompetenciaRadar.data.datasets[2].data.push(item['score_3']);
                              myCompetenciaRadar.data.datasets[3].data.push(item['score_4']);
                        });
                        myCompetenciaRadar.update();
                  });
                  $results['getOutraEtapaFromUserByCycle'](user, cycle).then(function(results) {
                        $scope.outraetapaFromUsuarioByCycle = results;
                        $scope.outraetapa_1_visibility = false;
                        $scope.outraetapa_2_visibility = false;
                        $scope.outraetapa_3_visibility = false;
                        $scope.outraetapa_4_visibility = false;
                        angular.forEach($scope.outraetapaFromUsuarioByCycle, function(item, key) {
                              $scope.outraetapa_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.outraetapa_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.outraetapa_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.outraetapa_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $(function() {
                        setTimeout(function() {
                              $('[data-toggle="tooltip"]').tooltip();
                        }, 1000);
                  });
            };
            if (!cycle_id) {
                  $cycles['getAll'](user_id).then(function(results) {
                        $scope.allCycles = results;
                        if ($scope.allCycles && $scope.allCycles.length > 0) {
                              $scope.selectedPerformanceCycle = $scope.allCycles[0].id_revisao_ciclo;
                              $("#performance-cycle-select").val($scope.selectedPerformanceCycle);
                              $("#performance-cycle-select").trigger("change");
                              $("#performance-cycle-select-time").trigger("change");
                              loadScores(user_id, $scope.selectedPerformanceCycle);
                        }
                  });
            } else loadScores(user_id, cycle_id);
      }
      $scope.getCycleById = function(id) {
            var cycle;
            angular.forEach($scope.allCycles, function(item, key) {
                  if (item['id_revisao_ciclo'] == id) cycle = item;
            });
            return cycle;
      }
      $scope.openOutraEtapaComents = function(id_valores, id_tipo_avaliacao) {
            $("#outraetapa-table").removeClass("full-sized-table");
            $("#outraetapa-table").addClass("half-sized-table");
            $results['getCommentsByOutraEtapa']($scope.selectedPerformanceUser, id_valores, id_tipo_avaliacao).then(function(results) {
                  $scope.outraetapaComments = results;
                  setTimeout(function() {
                        $('#outraetapaComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.closeOutraetapaComments = function() {
            $("#outraetapa-table").removeClass("half-sized-table");
            $("#outraetapa-table").addClass("full-sized-table");
            $('#outraetapaComments').removeClass("visible-comments");
      }
      $scope.openResultadoComents = function(id_valores, id_tipo_avaliacao, index_id, event) {
            $("#resultado-table").removeClass("full-sized-table");
            $("#resultado-table").addClass("half-sized-table");
            document.getElementById("resultadoComments").style.marginTop = angular.element(event.target).position().top - 62 + 'px';
            $results['getCommentsByResultado']($scope.selectedPerformanceUser, id_valores, id_tipo_avaliacao).then(function(results) {
                  $scope.resultadoComments = results;
                  setTimeout(function() {
                        $('#resultadoComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.closeResultadoComments = function() {
            $("#resultado-table").removeClass("half-sized-table");
            $("#resultado-table").addClass("full-sized-table");
            $('#resultadoComments').removeClass("visible-comments");
      }
      $scope.openValuesComents = function(id_valores, id_tipo_avaliacao) {
            $("#valores-table").removeClass("full-sized-table");
            $("#valores-table").addClass("half-sized-table");
            $results['getCommentsByValue']($scope.selectedPerformanceUser, id_valores, id_tipo_avaliacao).then(function(results) {
                  $scope.valueComments = results;
                  setTimeout(function() {
                        $('#valuesComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.closeValuesComments = function() {
            $("#valores-table").removeClass("half-sized-table");
            $("#valores-table").addClass("full-sized-table");
            $('#valuesComments').removeClass("visible-comments");
      }
      $scope.openPotencialComents = function(id_pergunta, id_tipo_avaliacao) {
            $("#potencial-table").removeClass("full-sized-table");
            $("#potencial-table").addClass("half-sized-table");
            $results['getCommentsByPotencial']($scope.selectedPerformanceUser, id_pergunta, id_tipo_avaliacao).then(function(results) {
                  $scope.potencialComments = results;
                  setTimeout(function() {
                        $('#potencialComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.closePotencialComments = function() {
            $("#potencial-table").removeClass("half-sized-table");
            $("#potencial-table").addClass("full-sized-table");
            $('#potencialComments').removeClass("visible-comments");
      }
      $scope.openCompetenciaComents = function(id_competencia, id_tipo_avaliacao, index_id) {
            $("#competencia-table").removeClass("full-sized-table");
            $("#competencia-table").addClass("half-sized-table");
            document.getElementById("competenciaComments").style.marginTop = 36.8 * (index_id + 1) + 'px';
            $results['getCommentsByCompetencia']($scope.selectedPerformanceUser, id_competencia, id_tipo_avaliacao).then(function(results) {
                  $scope.competenciaComments = results;
                  setTimeout(function() {
                        $('#competenciaComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.closeCompetenciaComments = function() {
            $("#competencia-table").removeClass("half-sized-table");
            $("#competencia-table").addClass("full-sized-table");
            $('#competenciaComments').removeClass("visible-comments");
      }
      $scope.openSubCareerBlock = function(section) {
            switch (section) {
                  case "performance":
                        $scope.refreshCareerBlock();
                        break;
            }
      }
      $scope.$watchGroup(['performanceAverageScores', 'scoresFromCycle'], function(newValue, oldValue) {
            setTimeout(function() {
                  window.dispatchEvent(new Event('resize'));
            }, 300);
      });
      $scope.getGradeFromScore = function(score) {
            var c = 'sem conceito';
            if (score > 0){
            angular.forEach($scope.selected_cycle_ruler, function(item, key) {
                  if (parseFloat(score).toFixed(2) >= Number(item['limite_inicial']) && parseFloat(score).toFixed(2) <= Number(item['limite_final'])) {
                        c = item['label'];
                  }
            });
      }
            return c;
      }

      var scoresHorizontalChart;
      $scope.setupScoresFromCycleChart = function() {
            if (scoresHorizontalChart) scoresHorizontalChart.destroy();
            var scores = [];
            var labels = [];
            var grades = [];
            var tickObj = {};
            var tooltipObj = {};
            var hasConceito = false;
            angular.forEach($scope.scoresFromCycle.results_by_cycle, function(item, key) {
                  if (item && (item != 0)) {
                        scores.push(item);
                        grades.push($scope.getGradeFromScore(item));
                        labels.push(key);
                  }
            });
            if ($scope.selected_cycle_ruler && $scope.selected_cycle_ruler.length > 0 && $scope.selected_cycle_ruler[0].conceito == 1) {
                  tickObj = {
                        callback: function(value, index, values) {
                              // apagar eixo y
                              return '';
                        }
                  };
                  tooltipObj = {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                              label: function(tooltipItem, data) {
                                    var label = grades[tooltipItem.index];
                                    return label;
                              }
                        }
                  }


            }

            var color = Chart.helpers.color;
            var horizontalBarChartData = {
                  labels: labels,
                  datasets: [{
                        label: 'Notas',
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                        borderColor: 'rgb(54, 162, 235)',
                        borderWidth: 1,
                        data: scores
                  }]
            };
            tickObj.beginAtZero = true;
            scoresHorizontalChart = new Chart(document.getElementById('overal_view_chart').getContext('2d'), {
                  type: 'horizontalBar',
                  data: horizontalBarChartData,
                  options: {
                        // Elements options apply to all of the options unless overridden in a dataset
                        // In this case, we are setting the border of each horizontal bar to be 2px wide
                        elements: {
                              rectangle: {
                                    borderWidth: 2,
                              }
                        },
                        tooltips: tooltipObj,
                        responsive: true,
                        legend: {
                              position: 'right',
                        },
                        title: {
                              display: false,
                              text: 'Chart.js Horizontal Bar Chart'
                        },
                        scales: {
                              xAxes: [{
                                    ticks: tickObj
                              }]
                        }
                  }
            });
      }
      $scope.setupAverageChart = function() {
            var medias = [];
            var categories = [];
            var labels = [];
            var hasConceito = false;
            var tickObj = {};
            var tooltipObj = {};
            angular.forEach($scope.performanceAverageScores, function(elem) {
                  categories.push(elem['nome_revisao_ciclo']);
            });
            angular.forEach($scope.performanceAverageScores, function(elem) {
                  if (elem['conceito'] == 1) {
                        labels.push(elem['label_media_final']);
                        hasConceito = true;
                  }
                  // labels.push('label_media_final');
                  medias.push(elem['media_final']);
            });
            if (hasConceito) {
                  tickObj = {
                        callback: function(value, index, values) {
                              // apagar eixo y
                              return '';
                        }
                  };
                  tooltipObj = {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                              label: function(tooltipItem, data) {
                                    var label = labels[tooltipItem.index];
                                    return label;
                              }
                        }
                  };
            }
            if (categories.length == 1) {
                  categories.unshift('');
                  categories.push('');
                  medias.unshift(null);
                  medias.push(null);
                  labels.unshift(null);
                  labels.push(null);
            }
            // var yValues = [];
            // for (var i = 0; i <= 50; i++) {
            //       yValues.push((i*0.2).toFixed(2));
            // };
            var config = {
                  type: 'line',
                  data: {
                        labels: categories,
                        datasets: [{
                              label: 'Médias por Cíclo',
                              fill: true,
                              backgroundColor: 'rgba(54, 162, 235, 0.4)',
                              borderColor: 'rgb(54, 162, 235)',
                              data: medias,
                        }]
                  },
                  options: {
                        title: {
                              display: false,
                              text: 'Chart.js Line Chart'
                        },
                        tooltips: tooltipObj,
                        hover: {
                              mode: 'nearest',
                              intersect: true
                        },
                        maintainAspectRatio: false,
                        scales: {
                              xAxes: [{
                                    display: true,
                                    scaleLabel: {
                                          display: true,
                                          labelString: 'Ciclo'
                                    }
                              }],
                              yAxes: [{
                                    display: true,
                                    scaleLabel: {
                                          display: true,
                                          labelString: 'Média Final'
                                    },
                                    ticks: tickObj
                              }]
                        }
                  }
            };
            $('#cicles_average_chart1').css('max-height', '320px');
            global_average_chart = new Chart(document.getElementById('cicles_average_chart1').getContext('2d'), config);
            global_average_chart.clear();
            global_average_chart.update();
      }
      $scope.viewInFullSize = true;
      $("#performance-cycle-select").change(function() {
            if ($(this).val() == "") return;
            if ($scope.selectedPerformanceCycle == $(this).val()) return;
            $scope.selectedPerformanceCycle = $(this).val();
            $scope.loadPerformanceServices($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
      });
      $("#performance-cycle-select-time").change(function() {
            if ($(this).val() == "") return;
            if ($scope.selectedPerformanceCycleTime == $(this).val()) return;
            $scope.selectedPerformanceCycleTime = $(this).val();
            $scope.loadUsersFromGestorByCycle($scope.selectedPerformanceCycleTime);
      });
      $('#career_users').change(function() {
            $scope.selectedPerformanceUser = $(this).val();
            $carreers['getCareerForUser']($scope.selectedPerformanceUser).then(function(response) {
                  $scope.career_details = response;
            });
            $carreers['getAll']($scope.selectedPerformanceUser).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived']($scope.selectedPerformanceUser).then(function(response) {
                  $scope.received_carreers = response;
            });
            $users['activities_career']($scope.selectedPerformanceUser).then(function(activities) {
                  $scope.activities_career = activities;
            });
            $scope.loadPerformanceServices($scope.selectedPerformanceUser);
            delete $scope.dp_session_added_activities;
            $scope.dp_session_added_activities = [];
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
            $scope.addMode = false;
            $scope.editMode = false;
            $scope.viewInFullSize = true;
      });
      $scope.showHideMeta = function(id_objetivo) {
            var icon_id = "#icon_dp_" + id_objetivo;
            if ($(icon_id).val() == 'arrow_drop_up') {
                  
                  $(icon_id).val() == 'arrow_drop_down';
            } else {
                 
                  $(icon_id).val() == 'arrow_drop_up';
            }
            var section_objectivo = ".section_meta_" + id_objetivo;
            $(section_objectivo).toggleClass('hide');
      }
      $scope.showHideActivities = function(meta_id) {
            $scope.refreshCareerBlock();
            var icon_id = "#icon_dp_activity_" + meta_id;
            if ($(icon_id).val() == 'arrow_drop_up') {
                  
                  $(icon_id).val() == 'arrow_drop_down';
            } else {
                 
                  $(icon_id).val() == 'arrow_drop_up';
            }
            var section_objectivo = "#section_meta_activities_" + meta_id;
            if ($(section_objectivo).attr('class') == 'hide') {
                  $(section_objectivo).removeClass('hide');
                  $(section_objectivo).addClass('show');
            } else {
                  $(section_objectivo).removeClass('show');
                  $(section_objectivo).addClass('hide');
            }
            $timeout(function() {
                  $('.career_sidebar_details').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
            }, 400);
            //$(section_objectivo).toggleClass('hide');
      }
      $scope.get_goal_details_by_id = function(goal_id) {
            $scope.refreshCareerBlock();
            delete $scope.dp_added_activities;
            $carreers['getDpGoalDetailById'](goal_id).then(function(res) {
                  $('#id_dp_objetivo_glob').val(res.id_dp_objetivo);
                  $scope.goal_details = res;
                  $scope.id_dp_objetivo_glob = res.id_dp_objetivo;
                  $scope.nome_obj_glob = res.nome_dp_objetivo;
                  $scope.date_limit_glob = res.date_limit;
                  delete $scope.CargoNotAddedSelected;
                  $scope.CargoNotAddedSelected = [];
                  $('#objecive_dp_update_form #cargo_objevio_rht').select2('destroy');
                  $('#objecive_dp_update_form #active_status_rht').select2('destroy');
                  $timeout(function() {
                        $('#objecive_dp_update_form #active_status_rht').val(res.situacao);
                        $scope.datafunction();
                        $('#objecive_dp_update_form #cargo_objevio_rht').select2();
                        $('#objecive_dp_update_form #active_status_rht').select2();
                        $scope.CargoNotAddedSelected = res.cargos;
                        $('#objecive_dp_update_form #cargo_objevio_rht').change(function(e) {
                              $.each($scope.CargosNotAdded, function(i) {
                                    if ($scope.CargosNotAdded[i].id === $(e.currentTarget).val()) {
                                          var spliced = $scope.CargosNotAdded.splice(i, 1)[0];
                                          $scope.CargoNotAddedSelected.push(spliced);
                                          return false;
                                    }
                              });
                        });
                  }, 100);
            });
            $scope.viewInFullSize = false;
            $scope.editMode = true;
            $scope.addMode = false;
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
      }
      $scope.add_novo_dp_goal = function() {
            $scope.refreshCareerBlock();
            $scope.viewInFullSize = false;
            $scope.addMode = true;
            $scope.editMode = false;
            delete $scope.dp_session_added_activities;
            $scope.dp_session_added_activities = [];
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
            delete $scope.updateDpObjModel;
            delete $scope.id_dp_objetivo;
            delete $scope.nome_obj;
            delete $scope.date_limit;
            delete $scope.CargoNotAddedSelected;
            $scope.CargoNotAddedSelected = [];
            $('#cargo_objevio').select2('destroy');
            $('#active_status').select2('destroy');
            $timeout(function() {
                  $scope.datafunction();
                  $scope.showViewModel = false;
                  $('#cargo_objevio').select2();
                  $('#active_status').select2();
                  $('#objecive_dp_form #cargo_objevio').change(function(e) {
                        $scope.refreshCareerBlock();
                        $.each($scope.CargosNotAdded, function(i) {
                              if ($scope.CargosNotAdded[i].id === $(e.currentTarget).val()) {
                                    var spliced = $scope.CargosNotAdded.splice(i, 1)[0];
                                    $scope.CargoNotAddedSelected.push(spliced);
                                    return false;
                              }
                        });
                  });
            }, 300);
      }
      $scope.cancelToObjectivos = function() {
            $timeout(function() {
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
            }, 100);
      }
      $scope.returnToMainCareer = function() {
            delete $scope.dp_session_added_activities;
            $scope.dp_session_added_activities = [];
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
            $scope.addMode = false;
            $scope.editMode = false;
            $scope.viewInFullSize = true;
      }
      $scope.addDpObjectivo = function() {
            $('#objecive_dp_form').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        nome_obj: 'required',
                        date_limit: 'required',
                        active_status: {
                              valueNotEquals: "? undefined:undefined ?"
                        },
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#objecive_dp_form .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#objecive_dp_form .error-message').addClass('hide');
                        $('#objecive_dp_form .salvar').button('loading');
                        var data = {
                              name: $('#objecive_dp_form #nome_obj').val(),
                              date_limit: $('#objecive_dp_form #date_limit').val(),
                              active_status: $('#objecive_dp_form #active_status').val(),
                        }
                        data.cargoes = [];
                        $('#objecive_dp_form input[name^="cargos"]').each(function() {
                              data.cargoes.push($(this).val());
                        });
                        $carreers['save_user_dp_goals'](data).then(function(response) {
                              $timeout(function() {
                                    $scope.carreerTab();
                              }, 300);
                              toastr.success('Objetivo adicionado.');
                        });
                        delete $scope.updateDpObjModel;
                        $('#objecive_dp_form .salvar').button('reset');
                        $('#objecive_dp_form')[0].reset();
                  }
            });
      }
      $scope.DeleteMinorSessionDpActivity = function(index_id) {
            if ($scope.index_id == index_id) {
                  $('#editmeta_dp_form #activity_name_meta_gb').val('');
                  $('#editmeta_dp_form #activity_end_meta_gb').val('');
            }
            $scope.dp_session_added_activities.splice(index_id, 1);
      }
      var my_counter = 0;
      $scope.addNewDpSessionMinorActivity = function() {
            var data = {
                  index: my_counter,
                  name: $('#editmeta_dp_form #activity_name_meta_gb').val(),
                  activity_end: $('#editmeta_dp_form #activity_end_meta_gb').val(),
            }
            if (data.name != '') {
                  $scope.dp_session_added_activities.push(data);
                  my_counter++;
            }
            $('#editmeta_dp_form #activity_name_meta_gb').val('');
            $('#editmeta_dp_form #activity_end_meta_gb').val('');
      }
      $scope.addMetaMode = false;
      $scope.add_new_dp_meta = function() {
            $scope.addMetaMode = true;
            $scope.addMode = false;
            $scope.editMode = false;
            $scope.viewInFullSize = false;
            delete $scope.dp_added_activities;
            delete $scope.dp_minor_added_activities;
            $timeout(function() {
                  $scope.dp_minor_added_activities = [];
                  $carreers['getDpGoalDetailById']($scope.id_dp_objetivo_glob).then(function(res) {
                        $('#id_meta_obj_glob').val($scope.id_dp_objetivo_glob);
                        $scope.goal_details = res;
                        $scope.nome_obj_goal = res.nome_dp_objetivo;
                        $scope.date_limit_obj_meta = res.date_limit;
                        $timeout(function() {
                              $('#carrier_block_hgt').niceScroll({
                                    cursorcolor: "#3fb0ac",
                                    cursorborder: "none"
                              });
                              $('#fixed_hgt').niceScroll({
                                    cursorcolor: "#3fb0ac",
                                    cursorborder: "none"
                              });
                              $scope.datafunction();
                        }, 100);
                  });
            }, 200);
      }
      $scope.dp_minor_added_activities = new Array();
      var counter_acti = 0;
      $scope.addNewDpMinorActivity = function() {
            var data = {
                  index: counter_acti,
                  name: $('#addmeta_dp_form #activity_name_meta').val(),
                  activity_end: $('#addmeta_dp_form #activity_end_meta').val(),
            }
            if (data.name != '') {
                  $scope.dp_minor_added_activities.push(data);
                  counter_acti++;
            }
            $('#addmeta_dp_form #activity_name_meta').val('');
            $('#addmeta_dp_form #activity_end_meta').val('');
      }
      $scope.DeleteMinorDpActivity = function(index_id) {
            if ($scope.index_id == index_id) {
                  $('#addmeta_dp_form #activity_name_meta').val('');
                  $('#addmeta_dp_form #activity_end_meta').val();
            }
            $scope.dp_minor_added_activities.splice(index_id, 1);
      }
      $scope.addDpMeta = function() {
            $('#addmeta_dp_form').validate({
                  ignore: [],
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
                  rules: {
                        nome_meta_obj: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  submitHandler: function(form) {
                        var $post_dp_minor = new Array();
                        $.each($scope.dp_minor_added_activities, function(index, value) {
                              delete value.$$hashKey;
                              $post_dp_minor.push(value);
                        });
                        var data = {
                              parent_id: $('#addmeta_dp_form #id_meta_obj_glob').val() ? $('#addmeta_dp_form #id_meta_obj_glob').val() : 0,
                              name: $('#addmeta_dp_form #nome_meta_obj').val(),
                              goal_name: $('#addmeta_dp_form #nome_obj_goal').val(),
                              goal_prazo: $('#addmeta_dp_form #date_limit_obj_meta').val(),
                              activities: $post_dp_minor
                        }
                        $carreers['insert_minor_goals'](data).then(function(response) {
                              $('#addmeta_dp_form')[0].reset();
                              toastr.success('Meta adicionada.');
                              $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                                    $scope.career_details = response;
                              });
                        });
                        $timeout(function() {
                              $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                        }, 100);
                  }
            });
      }
      $scope.updateDpMeta = function() {
            $('#editmeta_dp_form').validate({
                  ignore: [],
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
                  rules: {
                        nome_meta_obj_gb: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  submitHandler: function(form) {
                        var $post_dp_minor = new Array();
                        $.each($scope.dp_session_added_activities, function(index, value) {
                              delete value.$$hashKey;
                              $post_dp_minor.push(value);
                        });
                        var data = {
                              parent_id: $('#editmeta_dp_form #id_meta_obj').val() ? $('#editmeta_dp_form #id_meta_obj').val() : 0,
                              meta_id: $('#editmeta_dp_form #id_obj_meta_gb').val() ? $('#editmeta_dp_form #id_obj_meta_gb').val() : 0,
                              name: $('#editmeta_dp_form #nome_meta_obj_gb').val(),
                              goal_name: $('#editmeta_dp_form #nome_obj_goal_gb').val(),
                              goal_prazo: $('#editmeta_dp_form #date_limit_obj_meta_gb').val(),
                              activities: $post_dp_minor
                        }
                        $carreers['update_minor_goals'](data).then(function(response) {
                              $('#editmeta_dp_form')[0].reset();
                              toastr.success('Meta Atualizada.');
                              $scope.get_goal_details_by_id(data.parent_id);
                              // $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                              //     $scope.career_details = response;
                              // });
                        });
                        delete $scope.dp_session_added_activities;
                        $scope.dp_session_added_activities = [];
                        $scope.viewInFullSize = false;
                        $scope.editMode = true;
                        $scope.addMode = false;
                        $scope.addMetaMode = false;
                        $scope.editMetaMode = false;
                  }
            });
      }
      $scope.saveGlobalDpValues = function() {
            var data = $('#objecive_dp_update_form').serialize();
            $carreers['saveGlobalDpForm'](data).then(function(response) {
                  $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                        $scope.career_details = response;
                  });
            });
            toastr.success('Salvo com sucesso.');

            $timeout(function() {
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
            }, 300);
      }
      $scope.filterCareerBlock = function() {
            var user_id = $('#career_users').val();
            var status = $('#active_status_career').val();
            var objective_time = $('#objective_time').val();
            $('#filter_btn').removeClass('open');
            $('#filter_btn .dropdown-menu').css('display', 'none');
            if (!user_id) {
                  user_id = $scope.user.id;
            }
            $carreers['getCareerForUser'](user_id, status, objective_time).then(function(response) {
                  $scope.career_details = response;
            });
      }
      $scope.hideCarreerBlock = function() {
            $('#filter_btn').removeClass('open');
            $('#filter_btn .dropdown-menu').css('display', 'none');
      }
      $('#filter_by_startdate,#filter_by_enddate').change(function() {
            $('#filter_btn').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      });
      $scope.showFilterBox = function() {
            $('#filter_btn').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      }
      $scope.clearfilterCareerBlock = function() {
            $('#active_status_career').select2("val", "");
            $('#filter_by_startdate').val('');
            $('#filter_by_enddate').val('');
            $('#objective_time').val('');
            $('#objective_time').select2("val", "");
            var user_id = $('#career_users').val();
            $carreers['getCareerForUser'](user_id).then(function(response) {
                  $scope.career_details = response;
            });
      }
      $scope.filterCareerBlockCrossfeed = function() {
            var crossfeed_status = $('#crossfeed_status').val();
            var crossfeed_time = $('#crossfeed_time').val();
            var crossfeed_type = $('#crossfeed_type').val();
            var user_id = $('#career_users').val();
            $carreers['getAll'](user_id, crossfeed_status, crossfeed_time, crossfeed_type).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived'](user_id, crossfeed_status, crossfeed_time, crossfeed_type).then(function(response) {
                  $scope.received_carreers = response;
            });
            if (crossfeed_type == 'received') {
                  $timeout(function() {
                        $scope.carreers = [];
                  }, 500);
            }
            if (crossfeed_type == 'asked') {
                  $timeout(function() {
                        $scope.received_carreers = [];
                  }, 500);
            }
      }
      $scope.declineFeedback = function(id_feedback) {
            $('#dismiss-feedback-modal').modal();
            $('#completeDeclineFeedback').click(function() {
                  $carreers['declineFeedback'](id_feedback).then(function(response) {
                        $timeout(function() {
                              $scope.carreerTab()
                        }, 200);
                        $('#dismiss-feedback-modal').modal('hide');
                  });
            });
      }
      $scope.clearfilterCareerBlockCrossfeed = function() {
            $('#crossfeed_status').select2('val', '');
            $('#crossfeed_time').select2('val', '');
            $('#crossfeed_type').select2('val', '');
            var user_id = $('#career_users').val();
            $carreers['getAll'](user_id).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived'](user_id).then(function(response) {
                  $scope.received_carreers = response;
            });
      }
      $scope.hideCarreerBlockCrossfeed = function() {
            $('#filter_btn_crossfeed').removeClass('open');
            $('#filter_btn_crossfeed .dropdown-menu').css('display', 'none');
      }
      $scope.showFilterBoxCrossfeed = function() {
            $('#filter_btn_crossfeed').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      }
      $('#filter_by_startdate_crossfeed,#filter_by_enddate_crossfeed').change(function() {
            $('#filter_btn_crossfeed').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      });
      $scope.filterCareerBlockAtivade = function() {
            var user_id = $('#career_users').val();
            var ativade_time = $('#ativade_time').val();
            var ativade_situacao = $('#ativade_situacao').val();
            if (!user_id) {
                  user_id = $scope.user.id;
            }
            $users['activities_career'](user_id, ativade_time, ativade_situacao).then(function(activities) {
                  $scope.activities_career = activities;
            });
      }
      $scope.hideCarreerBlockAtivade = function() {
            $('#filter_btn_ativade').removeClass('open');
            $('#filter_btn_ativade .dropdown-menu').css('display', 'none');
      }
      $scope.showFilterBoxAtivade = function() {
            $('#filter_btn_ativade').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      }
      $('#filter_by_startdate_ativade,#filter_by_enddate_ativade').change(function() {
            $('#filter_btn_ativade').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      });
      $scope.clearfilterCareerBlockAtivade = function() {
            // $('#ativade_situacao').select2('val','3');
            $('#ativade_time').select2('val', '');
            $users['activities_career']($scope.user.id).then(function(activities) {
                  $scope.activities_career = activities;
            });
      }
      $scope.view_objectiovo = false;
      $scope.view_crossfeeds = false;
      $scope.view_ativades = false;
      $scope.viewObjectivoSection = function() {
            $scope.view_objectiovo = true;
      }
      $scope.viewCrossfeedSection = function() {
            $scope.view_crossfeeds = true;
      }
      $scope.viewAtivadesSection = function() {
            $scope.view_ativades = true;
      }
      var counter_acti = 0;
      $scope.addNewMinorActivity = function(meta_id) {
            var activity_name = '#objecive_dp_update_form #activity_name_meta_gb_' + meta_id;
            var activity_end_date = '#objecive_dp_update_form #activity_end_meta_gb_' + meta_id;
            var data = {
                  index: counter_acti,
                  meta_id: meta_id,
                  name: $(activity_name).val(),
                  activity_end: $(activity_end_date).val(),
            }
            if (data.name != '') {
                  $carreers['save_user_dp_activity'](data).then(function(response) {
                        $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                        $('#section_meta_activities_' + meta_id).removeClass('hide');
                        $('#icon_dp_activity_' + meta_id).removeClass('arrow_drop_down');
                        $timeout(function() {
                              $('#section_meta_activities_' + meta_id).addClass('show');
                              $('#icon_dp_activity_' + meta_id).addClass('arrow_drop_up');
                        }, 300);
                  });
                  counter_acti++;
            }
            $(activity_name).val('');
            $(activity_end_date).val('');
      }
      $scope.DeleteDpActivity = function(activity_id) {
            $carreers['delete_dpactivity'](activity_id).then(function(results) {
                  var meta_id = results.meta_id;
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                  $('#section_meta_activities_' + meta_id).removeClass('hide');
                  $('#icon_dp_activity_' + meta_id).removeClass('arrow_drop_down');
                  $timeout(function() {
                        $('#section_meta_activities_' + meta_id).addClass('show');
                        $('#icon_dp_activity_' + meta_id).addClass('arrow_drop_up');
                  }, 300);
            });
      }
      $scope.DeleteDpMeta = function(meta_id) {
            $carreers['delete_dpmeta'](meta_id).then(function(results) {
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
            });
      }      
      $scope.updateactivityDp = function(activity_id, type) {
            $scope.refreshCareerBlock();
            $timeout(function() {
                  if (type == 'name') {
                        var field_id = '#activity_name_added_' + activity_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'date') {
                        var field_id = '#activity_date_added_' + activity_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'situacao') {
                        var field_id = '#activity_situacao_' + activity_id;
                        if ($(field_id).prop('checked') == true) {
                              var data = 1;
                        } else {
                              var data = 0;
                        }
                  }
                  $carreers['update_user_activity_dp'](activity_id, type, data).then(function(results) {
                        //$scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                        // $('#section_meta_activities_'+results).removeClass('hide');
                        //   $('#icon_dp_activity_'+results).removeClass('arrow_drop_down');
                        //   $timeout(function(){
                        //         $('#section_meta_activities_'+results).addClass('show');
                        //         $('#icon_dp_activity_'+results).addClass('arrow_drop_up');
                        //   },100);
                  });
            }, 200);
      }

      $scope.updateMetaDp = function(meta_id, type) {
            $scope.refreshCareerBlock();
            $timeout(function() {
                  if (type == 'name') {
                        var field_id = '#goal_meta_name_' + meta_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'situacao') {
                        var field_id = '#id01_' + meta_id;
                        if ($(field_id).prop('checked') == true) {
                              var data = 1;
                        } else {
                              var data = 0;
                        }
                  }
                  $carreers['update_user_meta_dp'](meta_id, type, data).then(function(results) {
                        
                  });
            }, 200);
      }

      $scope.refreshCareerBlock = function() {
            $timeout(function() {
                  $('#carrier_block_hgt').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  }).resize();
                  $('.career_sidebar_details').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  }).resize();
                  $('#crossfeed_status').select2({
                        maximumSelectionSize: 1
                  });
                  $('#crossfeed_time').select2({
                        maximumSelectionSize: 1
                  });
                  $('#crossfeed_type').select2({
                        maximumSelectionSize: 1
                  });
                  $('#ativade_situacao').select2();
                  // $('#ativade_situacao').select2('val','3');
                  $('#ativade_time').select2({
                        maximumSelectionSize: 1
                  });
            }, 400);
      }
      $('#show_less_received').hide();
      $('#show_less_asked').hide();
      $scope.showMoreReceived = function() {
            $carreers['getAllReceived'](false).then(function(response) {
                  $scope.received_carreers = response;
                  $('#show_more_received').hide();
                  $('#show_less_received').show();
            });
      }
      $scope.showLessReceived = function() {
            $carreers['getAllReceived'](true).then(function(response) {
                  $scope.received_carreers = response;
                  $('#show_more_received').show();
                  $('#show_less_received').hide();
            });
      }
      $scope.showMoreAsked = function() {
            $carreers['getAll'](false).then(function(response) {
                  $scope.carreers = response;
                  $('#show_more_asked').hide();
                  $('#show_less_asked').show();
            });
      }
      $scope.showLessAsked = function() {
            $carreers['getAll'](true).then(function(response) {
                  $scope.carreers = response;
                  $('#show_more_asked').show();
                  $('#show_less_asked').hide();
            });
      }
      $scope.showdpAtivades = function($event, $id) {
            $($event.currentTarget).toggleClass("collapse_activity");
            $('#meta_act_' + $id).toggleClass("hide");
      }
      $scope.refreshDevelopmentUpdate = function() {
            $timeout(function() {
                  $("#cargo_objevio").select2();
                  $("#active_status").select2();
                  $('#developmentFeedback').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
            }, 800);
      }
      $scope.removeAddedCargo = function(ur, justRemove = true) {
            $.each($scope.CargoNotAddedSelected, function(i) {
                  if ($scope.CargoNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.CargoNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.CargosNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeAddedCargoFilter = function(ur, justRemove = true) {
            $.each($scope.CargoNotAddedSelectedFilter, function(i) {
                  if ($scope.CargoNotAddedSelectedFilter[i].id === ur.id) {
                        var spliced = $scope.CargoNotAddedSelectedFilter.splice(i, 1)[0];
                        if (justRemove) $scope.CargosNotAddedFilter.push(spliced);
                        return false;
                  }
            });
      }
      $scope.reset_dp_objectivo = function() {
            $('#objecive_dp_form')[0].reset();
            $scope.carreerTab();
      }
      $scope.removeCargoAndRefresh = function(ur) {
            $('#cargo_objevio .select2').select2("val", "");
            $scope.removeAddedCargo(ur);
      };
      $scope.removeCargoAndRefreshFilter = function(ur) {
            $('#cargo_objevio_filter .select2').select2("val", "");
            $scope.removeAddedCargoFilter(ur);
      };
      $scope.FilterDpObjectivo = function() {
            $scope.q_filter = $('#nome_obj_filter').val();
            $scope.cargos_filter = [];
            $('#objecive_dp_filter_form input[name^="cargos_filter"]').each(function() {
                  $scope.cargos_filter.push($(this).val());
            });
            $scope.filterByStatusFilter = function(tatic) {
                  if ($scope.cargos_filter.length) {
                        return ($scope.cargos_filter.indexOf(tatic.id_cargo) !== -1);
                  } else {
                        return true;
                  }
            };
            if ($('#chekd6').prop('checked') == true) {
                  delete $scope.filterByStatusFilter;
                  //delete $scope.cargos_filter;
            }
            $scope.date_filter = $('#date_limit_filter').val();
            $scope.activeFilter = $('#active_status_filter').val();
            $scope.onlyMe = false;
      }
      $scope.resetFilterDpObjectivo = function() {
            $('#objecive_dp_filter_form')[0].reset();
            $("#cargo_objevio_filter").select2('destroy');
            $("#active_status_filter").select2('destroy');
            $("#cargo_objevio_filter").select2();
            $("#active_status_filter").select2();
            delete $scope.q_filter;
            $scope.cargos_filter = [];
            delete $scope.filterByStatusFilter;
            delete $scope.date_filter;
            delete $scope.activeFilter;
            delete $scope.CargoNotAddedSelectedFilter;
            $scope.CargoNotAddedSelectedFilter = [];
            $scope.onlyMe = true;
            $cargo['cargos']().then(function(response) {
                  $scope.CargosNotAddedFilter = response;
            });
      }
      $scope.editMinorActivity = function(id) {
            $scope.editeditMinorActivity = 1;
            var edit_data = $scope.dp_added_activities[id];
            $scope.index_id = edit_data.index;
            $scope.activity_name = edit_data.name;
            $scope.activity_description = edit_data.description;
            $scope.activity_start = edit_data.activity_start;
            $scope.activity_end = edit_data.activity_end;
            $('#form-minor-goal #activity_name').val($scope.activity_name);
            $('#form-minor-goal #activity_description_dp').val($scope.activity_description);
            $('#form-minor-goal #activity_start').val($scope.activity_start);
            $('#form-minor-goal #activity_end').val($scope.activity_end);
      }
      $scope.editSubmitMinorActivity = function(index_id) {
            $scope.dp_added_activities[index_id].name = $('#form-minor-goal #activity_name').val();
            $scope.dp_added_activities[index_id].description = $('#form-minor-goal #activity_description_dp').val();
            $scope.dp_added_activities[index_id].activity_start = $('#form-minor-goal #activity_start').val();
            $scope.dp_added_activities[index_id].activity_end = $('#form-minor-goal #activity_end').val();
            $('#form-minor-goal #activity_name').val('');
            $('#form-minor-goal #activity_description_dp').val('');
            $('#form-minor-goal #activity_start').val('');
            $('#form-minor-goal #activity_end').val('')
            delete $scope.editeditMinorActivity;
      }
      $scope.userQuickView = function() {
            $('#user-quick-view').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.editUserProfile = function() {
            // $('#user-quick-view').modal('hide');
            // $users['me']().then(function(response) {
            //     $scope.user = response;
            //     $('#user-name').val(response.name);
            //     $('#user-birthday').val(response.birthday);
            //     $scope.user.md_image = response.md_image;
            //     $scope.userDetailImage = response.md_image;
            //     $scope.userGestor = response.id_gestor;
            //     $timeout(function() {
            //         $('#modal-user').modal('show', {
            //             backdrop: 'static'
            //         });
            //     }, 500);
            // });
            $scope.modalUser();
      }
      $users['getGestors']().then(function(response) {
            $scope.gestors = response;
      });
      $scope.updateDpActivityStatus = function($id) {
            var activity_id = '#activity_situacao_' + $id;
            var data = {
                  activity_id: $id,
                  situacao: $(activity_id + ':checked').val() ? $(activity_id).val() : 0
            }
            $carreers['update_user_dp_activity'](data).then(function(response) {
                  toastr.success('Atuaizado.');
                  $carreers['getAllDpObjectivos']().then(function(dpobjectivos) {
                        $scope.dpobjectivos = dpobjectivos;
                  });
            });
      }
      $scope.updateDpObjectivoStatus = function($id) {
            var objective_id = '#obj_situacao_' + $id;
            var data = {
                  objective_id: $id,
                  situacao: $(objective_id + ':checked').val() ? $(objective_id).val() : 0
            }
            $carreers['update_user_dp_objetivo_status'](data).then(function(response) {
                  if (data.situacao == 1) {
                        toastr.success('Objetivo ativado.');
                  } else {
                        toastr.success('Objetivo desativado.');
                  }
                  $carreers['getAllDpObjectivos']().then(function(dpobjectivos) {
                        $scope.dpobjectivos = dpobjectivos;
                  });
            });
      }
      $scope.deleteDpGoal = function($objective_id) {
            $('#delete-objective-modal').modal('show', {
                  backdrop: 'static'
            });
            $('#performTaskObjective').click(function() {
                  $carreers['delete_dp_objective']($objective_id).then(function(results) {
                        $('#delete-objective-modal').modal('hide');
                        toastr.clear();
                        $timeout(function() {
                              toastr.success('Inativado com sucesso.');
                        }, 200);
                  });
                  $carreers['getAllDpObjectivos']().then(function(dpobjectivos) {
                        $scope.dpobjectivos = dpobjectivos;
                  });
            });
      }
      $scope.Development_list = function() {
            $scope.showViewModel = false;
            $scope.carreerTab();
      }
      $scope.datafunction = function() {
            $timeout(function() {
                  if ($.isFunction($.fn.datepicker)) {
                        $(".data").each(function(i, el) {
                              var $this = $(this),
                                    opts = {
                                          format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                                          startDate: attrDefault($this, 'startDate', ''),
                                          endDate: attrDefault($this, 'endDate', ''),
                                          daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                                          startView: attrDefault($this, 'startView', 0),
                                          language: 'pt-BR',
                                          rtl: rtl()
                                    },
                                    $n = $this.next(),
                                    $p = $this.prev();
                              $this.datepicker(opts);
                              if ($n.is('.input-group-addon') && $n.has('a')) {
                                    $n.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                              if ($p.is('.input-group-addon') && $p.has('a')) {
                                    $p.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                        });
                  }
            }, 100);
      }
      $scope.NewDevelopment = function($id) {
            $scope.refreshCareerBlock();
            delete $scope.development_updates;
            delete $scope.feedbacktouser;
            delete $scope.feedback_description;
            delete $scope.feedback_deadline;
            delete $scope.feedback_deadline_date;
            $timeout(function() {
                  $("#form-new-development #feedbacktouser_cross").select2();
                  $scope.datafunction();
                  $scope.showViewModel = false;
            }, 100);
            $carreers['getUserDevQuestions']().then(function(response) {
                  $scope.devQuestions = response;
            });
            $scope.viewFullCrossfeed = false;
            $scope.addCrossfeedMode = true;
            $scope.editCrossfeedMode = false;
      }
      $scope.returnToMainCareerCrossfeed = function() {
            $scope.viewFullCrossfeed = true;
            $scope.addCrossfeedMode = false;
            $scope.editCrossfeedMode = false;
      }
      $scope.submitNewDevelopmentUpdate = function() {
            
            $('#form-new-development').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        feedbacktouser: 'required',
                        feedbacktouser: {
                              valueNotEquals: "? undefined:undefined ?"
                        },
                        feedback_description: 'required',
                        feedback_deadline: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#form-new-development .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#form-new-development .error-message').addClass('hide');
                        $('#form-new-development .salvar').button('loading');
                        var $data = $("#form-new-development").serialize();
                        $carreers['save_user_development_update_profile']($data).then(function(response) {
                              if (!response.error_message) {
                                    toastr.success('Adicionado com sucesso.');
                              } else {
                                    toastr.error(response.error_message);
                              }
                              $timeout(function() {
                                    $scope.carreerTab()
                              }, 500);
                        });
                        $('#form-new-development .salvar').button('reset');
                        $('#form-new-development')[0].reset();
                  }
            });
      }
      $scope.replyNewDevelopmentUpdate = function() {
            $('#form-reply-development').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        feedbacktouser: 'required',
                        feedbacktouser: {
                              valueNotEquals: "? undefined:undefined ?"
                        },
                        feedback_description: 'required',
                        feedback_deadline: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#form-new-development .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#form-reply-development .error-message').addClass('hide');
                        $('#form-reply-development .salvar').button('loading');
                        var $data = $("#form-reply-development").serialize();
                        $carreers['reply_user_development_update_profile']($data).then(function(response) {
                              if (!response.error_message) {
                                    toastr.success('Adicionado com sucesso.');
                              } else {
                                    toastr.error(response.error_message);
                              }
                              $timeout(function() {
                                    $scope.carreerTab()
                              }, 200);
                        });
                        $('#form-reply-development .salvar').button('reset');
                        $('#form-reply-development')[0].reset();
                  }
            });
      }
      $scope.showDevelopmentUpdate = function($id_feedback, feedback_type = '') {
            $scope.refreshCareerBlock();
            $scope.feedback_type = feedback_type;
            $timeout(function() {
                  $scope.showViewModel = true;
                  $('#form-reply-development #feedbacktouser_cross').prop('disabled', true);
                  $('#form-reply-development #feedback_description_cross').prop('disabled', true);
                  $('#form-reply-development #feedback_deadline_cross').prop('disabled', true);
                  $scope.datafunction();
            }, 300);
            $carreers['get_development_questionerios_profile']($id_feedback).then(function(response) {
                  $scope.viewDevUpdates = false;
                  $scope.dev_data = response;
                  $scope.destination_user = response[0].destination_user;
                  $scope.user_response = response[0].user_response;
                  $scope.devquestions = response[0].questions;
                  $scope.id_questionario_dev = response[1];
                  $scope.id_feedback_dev = response[0].id;
                  $scope.id_feedback_destino = response[0].id_usuario_solicitante;
                  $scope.feedbacktouser = response[0].id_usuario_destino;
                  $scope.feedback_description = response[0].response;
                  $scope.feedback_deadline = response[0].feedback_deadline;
                  $scope.feedback_deadline_date = response[0].feedback_deadline_date;
                  $scope.feedback_description = response[0].response;
                  $scope.posted_date = response[0].posted_date;
                  if (response[0].situacao == 1) {
                        $carreers['get_user_development_update_by_id']($id_feedback).then(function(response) {
                              $scope.viewDevUpdates = true;
                              $scope.view_questions = response.questions;
                        });
                  }
                  if ($scope.dev_data[0].id_usuario_destino == $scope.user.id) {
                        $scope.devAuthorised = true;
                  } else {
                        // $('#showViewModel').hide();
                        $scope.devAuthorised = false;
                  }
            })
            $scope.viewFullCrossfeed = false;
            $scope.addCrossfeedMode = false;
            $scope.editCrossfeedMode = true;
      }
      $scope.updateFeedbackDeadline = function(id_feedback) {
            var updated_date = $('#feedback_deadline_date').val();
            $carreers['update_feedback_deadline'](id_feedback, updated_date).then(function() {
                  $scope.showDevelopmentUpdate(id_feedback, $scope.feedback_type);
                  toastr.success("Updated successfully");
                  $timeout(function() {
                        $scope.carreerTab();
                  }, 300);
            });
      }
      $scope.updateFeedbackPrivacyStatus = function(id_feedback) {
            var feedback_status = $("input[name='crossfeeds_status']:checked").val();
            $carreers['update_feedback_privacy_status'](id_feedback, feedback_status).then(function() {
                  toastr.success("Atualizado com sucesso.");
                  $timeout(function() {
                        $scope.carreerTab();
                  }, 300);
            });
      }
      $scope.activity_details_career = function(activity_id) {
            $scope.refreshCareerBlock();
            $users['activity_detail_career'](activity_id).then(function(res) {
                  $scope.activity_detail = res;
            });
            $scope.viewFullActivity = false;
            $scope.activityViewDetail = true;
      }
      $scope.returnToMainCareerActivity = function() {
            $scope.viewFullActivity = true;
            $scope.activityViewDetail = false;
      }
      $scope.openTypeCommentsUnread = function() {
            $.each($scope.eloslist, function(index, value) {
                  if ($scope.eloslist[index].tipo == "comment" && $scope.eloslist[index].lido == 0) {
                        $scope.loadMoreComments($scope.eloslist[index]);
                        $scope.eloslist[index].showComments = true;
                        setTimeout(function() {
                              $('.form-elo-comment textarea').each(function(index, value) {
                                    $scope.setMentionFeature($(this));
                              });
                        }, 200);
                  }
            });
      }
      $scope.toggleShowComments = function(e, elo) {
            elo.showComments = !elo.showComments;
            if (elo.showComments) {
                  var elem = angular.element(e.currentTarget);
                  setTimeout(function() {
                        elem.parent().parent().find("textarea").focus();
                        $scope.loadMoreComments(elo);
                        $scope.setMentionFeature(elem.parent().parent().find("textarea"));
                  }, 200);
            }
      }
      $scope.setMentionFeature = function(elem) {
            elem.mentionsInput({
                  onDataRequest: function(mode, query, callback) {
                        var data = [];
                        $.each($scope.adminusuarios, function(index, value) {
                              data.push({
                                    id: value.id,
                                    name: value.name,
                                    type: 'contact'
                              });
                        });
                        data = _.filter(data, function(item) {
                              return item.name.toLowerCase().indexOf(query.toLowerCase()) > -1
                        });
                        callback.call(this, data);
                  }
            });
      }
      $scope.showLikes = function(elo) {
            if (elo.likes || elo.total_likes == 0) return;
            $elos['getLikes'](elo).then(function(response) {
                  elo.likes = response.likes;
            });
      }
      $scope.loadMoreComments = function(elo) {
            if (!elo.lastLoadedCommentId) elo.lastLoadedCommentId = 0;
            if (elo.restCount == 0) return;
            $elos['getComments'](elo, elo.lastLoadedCommentId, 5).then(function(response) {
                  var newListItems = response.comments;
                  if (newListItems.length > 0) {
                        elo.lastLoadedCommentId = response.lastLoadedId;
                        elo.comments = elo.comments.concat(newListItems);
                        if (response.restCount > 0) elo.hasMoreComments = true;
                        else elo.hasMoreComments = false;
                  }
            });
      }
      $scope.filterElotypes = function (item) { 
          return item.tipo === '0' || item.tipo === '7' || item.tipo === '8'; 
      };
      $scope.likeElo = function(event, elo) {
            // var elem = angular.element(event.currentTarget);
            // elem.addClass("liked");
            if (elo.i_liked == 0) {
                  elo.total_likes++;
                  elo.likes = null; // para obrigar o recarregamento do hover com lista de likes
                  $elos['like'](elo).then(function(response) {
                        // por uma questão de responsividade, é preferível que a interface atualize ao clicar, mesmo que a função não tenha retornado do banco de dados
                        // então não executo nenhuma função.
                  });
            }
            elo.i_liked = 1;
      }
      $scope.commentElo = function(event, elo) {
            var elem = angular.element(event.currentTarget);
            var comment = elem.find("input").val();
            if (comment == "") {
                  toastr.error("Seu comentário está vazio, crie uma mensagem e envie novamente.");
                  elem.parent().find("form").addClass("error");
                  return;
            }
            elem.parent().find("form").removeClass("error");
            elem.find("input").mentionsInput('getMentions', function(data) {
                  var mencoes = data;
                  elem.find("input").find('button').prop("disabled", true);
                  $elos['comment'](elo, comment, mencoes).then(function(response) {
                        elo.comments.unshift({
                              username: $scope.$parent.user.usuarioviewTime.nome_usuario,
                              comment_text: response.comment_text
                        });
                        elem.find("input").val("");
                        elem.find("input").mentionsInput('reset');
                        toastr.success("Comentário enviado");
                        setTimeout(() => elem.find("input").find('button').prop("disabled", false), 1000);
                  });
                  elo.total_comment++;
            });
      }
      $scope.returnUserDataFromId = function(id) {
            var returnobj = {};
            if (id == $scope.user.id) {
                  returnobj.name = $scope.user.name;
                  returnobj.image = $scope.user.md_image;
            } else {
                  $.each($scope.myteammembers, function(index, value) {
                        if (value.id == id) {
                              returnobj.name = value.name;
                              returnobj.image = value.md_image;
                              return false; // break each
                        }
                  });
            }
            return returnobj;
      }
      $scope.initial_survey = 1;
      $surveys['getAll'](true).then(function(response) {
            $scope.surveys = response;
      });
      $surveys['getAllQuickSurvey']().then(function(response) {
            $scope.quick_survey = response;
            $scope.total_questions = response.total_from;
            $scope.total_questions_head = response.total_from - 1;
      });
      $scope.validateQuickSurveyFields = function(){
            var question = $scope.quick_survey.questions[$scope.current_step];
            if (question.mandatory == '0') return true;
            if (question.type == 'c') {
                  //heart
                  var count = 0;
                  for (var i = 1; i<11; i++) {
                        var radioButton = $("#hrsurvey_rad2" + i + "_" + question.id_pergunta + "_" + i);
                        if (radioButton.is(':checked')) count++;
                  }
                  if (count == 0) {
                        toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                        $('#toast-container .toast-error').css("background-color", "#ffac2f");
                        return false;
                  }
            }
            if (question.type == 'n') {
                  // nps
                  var npsField = $("input[name='answers[nps_answer][" + question.id_pergunta + "][value]']");
                  if (npsField.val() == '-1') {
                        toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                        $('#toast-container .toast-error').css("background-color", "#ffac2f");
                        return false;
                  }
            }
            if (question.type == 'o') {
                  //multiple answer
                  var count = 0;
                  angular.forEach(question.options, function(answer, key) {
                        var radioButton = $("#ch" + answer.id);
                        if (radioButton.is(':checked')) count++;
                  });
                  if (count == 0) {
                        toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                        $('#toast-container .toast-error').css("background-color", "#ffac2f");
                        return false;
                  }

            }
            if (question.type == 'e') {
                  //star
                  var count = 0;
                  for (var i = 1; i<11; i++) {
                        var radioButton = $("#srsurvey_rad_" + question.id_pergunta + "_" + i);
                        if (radioButton.is(':checked')) count++;
                  }
                  if (count == 0) {
                        toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                        $('#toast-container .toast-error').css("background-color", "#ffac2f");
                        return false;
                  }
            }
            if (question.type == 'i') {
                  //emoji
                  var emojiField = $("input[name='answers[emoji_answer][" + question.id_pergunta + "][value]']");
                  if (emojiField.val() == '-1') {
                        toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                        $('#toast-container .toast-error').css("background-color", "#ffac2f");
                        return false;
                  }
            }
            if (question.type == 'f') {
                  //favorite
                  var count = 0;
                  for (var i = 1; i<6; i++) {
                        var radioButton = $("#fs_rad_" + question.id_pergunta + "_" + i);
                        if (radioButton.is(':checked')) count++;
                  }
                  if (count == 0) {
                        toastr.error("Existem campos obrigatórios não preenchidos. Por favor, revise.");
                        $('#toast-container .toast-error').css("background-color", "#ffac2f");
                        return false;
                  }
            }
            return true;
      }

      $scope.current_step = 0;
      $scope.step_increment = function() {
            if (!$scope.validateQuickSurveyFields()) return;
            $scope.current_step++;
      }

      $scope.step_decrement = function() {
            $scope.current_step--;
      }

      $scope.giveQuickSurveyTop = function() {
             var data = $('#new_quick_servey_top').serialize();
            if (!$scope.validateQuickSurveyFields()) return;
            $surveys['saveQuickSurvey'](data).then(function(response) {
                  $scope.initial_survey = $scope.initial_survey + 1;
                  toastr.success('Salvo!');
                  $surveys['getAllQuickSurvey']().then(function(res) {
                        $scope.current_step = 0;
                        $scope.quick_survey = res;
                  });
            });
      }
      $scope.giveQuickSurvey = function() {
            var data = $('#new_quick_servey').serialize();
            $surveys['saveQuickSurvey'](data).then(function(response) {
                  $scope.initial_survey = $scope.initial_survey + 1;
                  toastr.success('Salvo!');
                  $surveys['getAllQuickSurvey']().then(function(res) {
                        $scope.quick_survey = res;
                  });
            });
      }
      $scope.viewSurveyQuestionsById = function(id_questionario, id_pesquisa) {
            $surveys['getSurveyQuestionsById'](id_questionario, id_pesquisa).then(function(res) {
                  $scope.survey_questions = res;
                  $('#newSurveyModal').modal('show', {
                        backdrop: 'static'
                  });
            });
      }
      $scope.submitNewSurvey = function() {
            var data = $('#new_survey_update').serialize();
            $surveys['saveNewSurvey'](data).then(function(response) {
                  toastr.success('Salvo!');
                  $('#newSurveyModal').modal('hide');
                  $surveys['getAll'](true).then(function(res) {
                        $scope.surveys = res;
                  });
            });
      }
      $scope.myTab = function() {
            $scope.profiletab = 1;
            //limpeza de notificações para reanimar na volta da tela inicial
            $scope.notifications = [];
            clearInterval($scope.notificationInterval);
            $scope.updateNotifications();
            $scope.notificationInterval = setInterval($scope.updateNotifications, 60000);
      };
      //----activity test----//
      $scope.responsavelsNotAddedSelected = [];
      $scope.responsavelsNotAdded = [];
      $scope.showFinalized = false;
      $scope.params = {
            responsavels: '',
            team: '',
            cycle: ''
      };
      //--add filters--//
      $timeout(function() {
            $('#select_time').addClass('visible');
            $('#select_time').selectBoxIt();
            $('#select_time').val('all');
            $scope.slectedTime = 'all';
            $('#select_time').trigger("change");
      }, 500);
      $teams['getAllTeams']().then(function(teams) {
            $scope.filter_teams = teams;
      });
      $('#selectedCiclo').change(function() {
            console.log("cycle change:", $('#selectedCiclo').val());
      });
      $('#selectedTime').change(function() {

      });
      $('#fresponsavel').change(function(e) {
            $.each($scope.responsavelsNotAdded, function(i) {
                  if ($scope.responsavelsNotAdded[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.responsavelsNotAdded.splice(i, 1)[0];
                        $scope.responsavelsNotAddedSelected.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedResponsavel = function(ur, justRemove = true) {
            $.each($scope.responsavelsNotAddedSelected, function(i) {
                  if ($scope.responsavelsNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.responsavelsNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.responsavelsNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeResponsavelAndRefresh = function(ur) {
            $('#form-teams-side .select2').select2("val", "");
            $scope.removeAddedResponsavel(ur);
      };
      $scope.changeShowFinalized = function() {
            $scope.showFinalized = !$scope.showFinalized;
      }
      $scope.applyFilterActivity = function() {
            $scope.params.cycle = $('#selectedCiclo').val();
            $scope.params.team = $('#selectedTime').val();
            $scope.params.responsavels = [];
            $('.responsaveldropdown input[name^="corresponsaveis"]').each(function() {
                  $scope.params.responsavels.push($(this).val());
            });
            $scope.params.filter_time = $('#select_time').val();
            $scope.activitiesTab(1);
      }
      $scope.clearFilterActivity = function() {
            $('#selectedCiclo').select2("val", "");
            $('#selectedTime').select2("val", "");
            $('#fresponsavel').select2("val", "");
            $timeout(function() {
                  $('#select_time').val('all');
                  $scope.slectedTime = 'all';
                  $('#select_time').trigger("change");
            }, 10);
            $scope.responsavelsNotAddedSelected = [];
            $scope.responsavelsNotAdded = JSON.parse(JSON.stringify($scope.responibles));
            $scope.showFinalized = false;
            $scope.params = {
                  responsavels: '',
                  team: '',
                  cycle: '',
                  filter_time: 'all'
            };
            $scope.activitiesTab(0);
      }
      //--add filters end--//
      $scope.activitiesTab = function($filter) {
            $scope.filter = $filter;
            $scope.profiletab = 6;
            $scope.refreshListContent();
      };
      $scope.setNewFimToArray = function(arrOriginal) {
            angular.forEach(arrOriginal, function(result, key) {
                  result.newfim = $scope.changeFimFormat(result.fim);
                  result.newinit = $scope.changeFimFormat(result.init);
                  result.isPassed = $scope.isPassed(result.fim);
                  result.isPassedInit = $scope.isPassed(result.init);
            });
      }
      $scope.removeNullActivity = function(arrOriginal) {
            for (var i = 0; i < arrOriginal.length - 1; i++) {
                  if (!arrOriginal[i].id) {
                        arrOriginal.splice(i, 1);
                        i--;
                  }
            }
      }
      $scope.setShowStatusToArray = function(arrOriginal) {
            angular.forEach(arrOriginal, function(result, key) {
                  result.showComFlag = false;
                  result.showDetFlag = false;
            });
      }
      $scope.setOrderNumList = function(arrAcitivity) {
            var orderNum = 0;
            for (var i = 0; i < arrAcitivity.length; i++) {
                  angular.forEach(arrAcitivity[i], function(item, key) {
                        item.order = orderNum;
                        $scope.detailResponsavel[orderNum] = 0;
                        orderNum++;
                  });
            }
      }
      $scope.divideListBySituation = function(activityList) {
            var listProgress = [];
            var listNotStarted = [];
            var listDelayed = [];
            var listFinished = [];
            angular.forEach(activityList, function(item, key) {
                  if (item.situacao == 2 && item.atraso != 1) listProgress.push(item);
                  if (item.situacao == 0) listNotStarted.push(item);
                  if (item.situacao == 2 && item.atraso == 1) listDelayed.push(item);
                  if (item.situacao == 1 || item.situacao == 3) listFinished.push(item);
            });
            var activity_list = [];
            activity_list.push(listProgress);
            activity_list.push(listNotStarted);
            activity_list.push(listDelayed);
            activity_list.push(listFinished);
            return activity_list;
      }
      $scope.createHierarchy = function(arrList) {
            var arrOriginal = JSON.parse(JSON.stringify(arrList));
            $scope.objectives = []; //objective select
            var arrHierarchy = [];
            var objId = 0;
            var objName = "";
            var objPercentage = 0;
            var objActNum = 0;
            var objKeys = [];
            var selectedObjKeys = []; //objective select
            if (arrOriginal.length) {
                  objId = arrOriginal[0].id_objetivo;
                  objName = arrOriginal[0].nome;
                  var keyresult_id = arrOriginal[0].id_key_result;
                  var key_name = arrOriginal[0].nomeRChave;
                  var keyPercentage = 0;
                  var keyActNum = 0;
                  var keyActs = [];
                  angular.forEach(arrOriginal, function(result, key) {
                        // if (!result.id_key_result) { return; }
                        if (result.id_key_result != keyresult_id) {
                              if (keyActNum) {
                                    keyPercentage = parseInt(keyPercentage / keyActNum);
                              }
                              var keyVal = {
                                    "id_key_result": keyresult_id,
                                    "key_name": key_name,
                                    "keyPercent": keyPercentage,
                                    "activities": keyActs,
                                    "keyActNum": keyActNum,
                                    "showKey": false
                              };
                              objKeys.push(keyVal);
                              //objective select
                              var keyValue = {
                                    "id": keyresult_id,
                                    "nome": key_name
                              };
                              selectedObjKeys.push(keyValue);
                              keyresult_id = result.id_key_result;
                              key_name = result.nomeRChave;
                              keyPercentage = 0;
                              keyActNum = 0;
                              keyActs = [];
                        }
                        keyPercentage += (result.percentage) ? parseInt(result.percentage) : 0;
                        if (result.id) {
                              keyActNum++;
                        }
                        keyActs.push(result);
                        if (result.id_objetivo != objId) {
                              objPercentage = parseInt(objPercentage / objActNum);
                              var value = {
                                    "objId": objId,
                                    "objName": objName,
                                    "objPercent": objPercentage,
                                    "objActNum": objActNum,
                                    "keys": objKeys,
                                    "objKeyNum": objKeys.length,
                                    "showObj": false
                              };
                              arrHierarchy.push(value);
                              //objective select
                              var objValue = {
                                    "id": objId,
                                    "nome": objName,
                                    "keys": selectedObjKeys
                              };
                              $scope.objectives.push(objValue);
                              selectedObjKeys = [];
                              objId = result.id_objetivo;
                              objName = result.nome;
                              objPercentage = 0;
                              objActNum = 0;
                              objKeys = [];
                        }
                        objPercentage += (result.percentage) ? parseInt(result.percentage) : 0;
                        objActNum++;
                  });
                  if (keyActNum) {
                        keyPercentage = parseInt(keyPercentage / keyActNum);
                  }
                  var keyVal = {
                        "id_key_result": keyresult_id,
                        "key_name": key_name,
                        "keyPercent": keyPercentage,
                        "activities": keyActs,
                        "keyActNum": keyActNum,
                        "showKey": false
                  };
                  objKeys.push(keyVal);
                  //objective select
                  var keyValue = {
                        "id": keyresult_id,
                        "nome": key_name
                  };
                  selectedObjKeys.push(keyValue);
                  objPercentage = parseInt(objPercentage / objActNum);
                  var value = {
                        "objId": objId,
                        "objName": objName,
                        "percent": objPercentage,
                        "objActNum": objActNum,
                        "keys": objKeys,
                        "objKeyNum": objKeys.length,
                        "showObj": false
                  };
                  arrHierarchy.push(value);
                  //objective select
                  var objValue = {
                        "id": objId,
                        "nome": objName,
                        "keys": selectedObjKeys
                  };
                  $scope.objectives.push(objValue);
            }
            var orderNum = 0;
            angular.forEach(arrHierarchy, function(result, key) {
                  angular.forEach(result.keys, function(result1, key1) {
                        result1.activities = $scope.divideListBySituation(result1.activities);
                        for (var i = 0; i < result1.activities.length; i++) {
                              angular.forEach(result1.activities[i], function(item, key2) {
                                    item.order = orderNum;
                                    $scope.detailResponsavel[orderNum] = 0;
                                    orderNum++;
                              });
                        }
                  });
            });
            return arrHierarchy;
      }
      // $scope.getHierarchy = function(arrList) {
      //         var arrOriginal = JSON.parse(JSON.stringify(arrList));
      //         var arrHierarchy = [];
      //         var objective = "";
      //         var objid = 0;
      //         var actKey = "";
      //         var averagePercentage = 0;
      //         var content = [];
      //         var ind = 0;
      //         if (arrOriginal.length) {
      //                 objective = arrOriginal[0].nome;
      //                 objid = arrOriginal[0].id_objetivo;
      //                 actKey = arrOriginal[0].nomeRChave;
      //                 var percentage = 0;
      //                 var contentIndex = 0;
      //                 angular.forEach(arrOriginal, function(result, key) {
      //                         if (result.nome != objective) {
      //                                 averagePercentage = parseInt(percentage / contentIndex);
      //                                 var value = {
      //                                         "obj": objective,
      //                                         "objid": objid,
      //                                         "key": actKey,
      //                                         "percent": averagePercentage,
      //                                         "content": content,
      //                                         "ind": ind,
      //                                         "count": contentIndex,
      //                                         "showObj": false,
      //                                         "showKeyResults": false
      //                                 };
      //                                 arrHierarchy.push(value);
      //                                 objective = result.nome;
      //                                 objid = result.id_objetivo;
      //                                 actKey = result.nomeRChave;
      //                                 percentage = 0;
      //                                 contentIndex = 0;
      //                                 content = [];
      //                                 ind ++;
      //                         }
      //                         percentage += parseInt(result.percentage);
      //                         content.push(result);
      //                         contentIndex++;
      //                 });
      //                 averagePercentage = parseInt(percentage / contentIndex);
      //                 var value = {
      //                         "obj": objective,
      //                         "objid": objid,
      //                         "key": actKey,
      //                         "percent": averagePercentage,
      //                         "content": content,
      //                         "ind": ind,
      //                         "count": contentIndex,
      //                         "showObj": false,
      //                         "showKeyResults": false
      //                 };
      //                 arrHierarchy.push(value);
      //         }
      //         var orderNum = 0;
      //         angular.forEach(arrHierarchy, function(result, key) {
      //                 result.content = $scope.divideListBySituation(result.content);
      //                 for (var i = 0; i < result.content.length; i++) {
      //                         angular.forEach(result.content[i], function(item, key1) {
      //                                 item.order = orderNum;
      //                                 $scope.detailResponsavel[orderNum] = 0;
      //                                 orderNum++;
      //                         });
      //                 }
      //         });
      //         return arrHierarchy;
      // }
      $scope.refreshListContent = function(activity_id) {
            var objid = 0;
            // $users['activities_career_hierarchy']($scope.user.id, $scope.filter, $scope.params, objid).then(function(activity_hierarchy) {
            //         $scope.validateImage(activity_hierarchy);
            //         $scope.setNewFimToArray(activity_hierarchy);
            //         $scope.setShowStatusToArray(activity_hierarchy);
            //         $scope.activities_hierarchy = $scope.getHierarchy(activity_hierarchy);
            //         var activity_list = $scope.divideListBySituation(activity_hierarchy);
            //         $scope.listFinished = activity_list[3];
            //         activity_list.splice(3,1);
            //         $scope.setOrderNumList(activity_list);
            //         $scope.activities_list = activity_list;
            //         console.log("here!!!!", $scope.activities_list, $scope.activities_hierarchy);
            //         $activities['getActivityObjectives']($scope.filter, $scope.params).then(function(response) {
            //                 $scope.objectives = response;
            //         });
            // });
            $users['get_activities_hierarchy']($scope.user.id, $scope.filter, $scope.params).then(function(activities) {
                  $scope.activity_list = [];
                  $scope.listFinished = [];
                  $scope.activities_hierarchy = [];
                  $scope.validateImage(activities);
                  $scope.setNewFimToArray(activities);
                  $scope.setShowStatusToArray(activities);
                  //hierarchy
                  $scope.activities_hierarchy = $scope.createHierarchy(activities);
                  if ($scope.listType == 2) {
                        angular.forEach($scope.activities_hierarchy, function(result, key) {
                              result.showObj = true;
                        });
                  }

                  //list
                  $scope.removeNullActivity(activities);
                  var activity_list = $scope.divideListBySituation(activities);
                  $scope.listFinished = activity_list[3];
                  activity_list.splice(3, 1);
                  $scope.setOrderNumList(activity_list);
                  $scope.activities_list = activity_list;
                  if (activity_id) {
                        $scope.openHierarchyStatus(activity_id);
                  }
                  if ($scope.listType == 0 && $('#selectedOrdem').val() != '') {
                        $scope.orderActivityList($('#selectedOrdem').val());
                  }
            });
      }
      $scope.openObjetivo = function(hierarchy) {
            hierarchy.showObj = !hierarchy.showObj;
      }
      $scope.openKeyResults = function(keyresult) {
            keyresult.showKey = !keyresult.showKey;
      }
      $scope.listActivities = function() {
            $scope.listType = 0;
            $scope.refreshListContent();
      }
      $scope.listHierarchy = function() {
            $scope.listType = 1;
            $scope.refreshListContent();
      }
      $scope.listKeyResults = function() {
            $scope.listType = 2;
            $scope.refreshListContent();
      }
      $('#selectedOrdem').change(function() {
            $scope.refreshListContent();
      });
      $scope.orderActivityList = function(ordem) {
            for (var i = 0; i < 3; i++) {
                  for (var j = 0; j < $scope.activities_list[i].length; j++) {
                        var tempDate = $scope.activities_list[i][j].init;
                        if (ordem == 2 || ordem == 3) {
                              tempDate = $scope.activities_list[i][j].fim;
                        }
                        var dateParts = tempDate.split("/");
                        var compareDate = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);
                        $scope.activities_list[i][j].compareDate = compareDate;
                  }
                  var ascending = true;
                  if (ordem == 1 || ordem == 3) {
                        ascending = false;
                  }
                  $scope.activities_list[i].sort(function(a,b){
                        return ascending ? a.compareDate - b.compareDate : b.compareDate - a.compareDate;
                  });
            }
      }
      $scope.showHideComments = function(sitind, activity) {
            if (!$scope.listType) {
                  for (var i = 0; i < $scope.activities_list.length; i++) {
                        angular.forEach($scope.activities_list[i], function(item, key) {
                              if (item.id != activity.id) {
                                    item.showComFlag = false;
                                    $scope.activityComments = [];
                              }
                        });
                  }
            } else {
                  angular.forEach($scope.activities_hierarchy, function(result, key) {
                        angular.forEach(result.keys, function(result1, key1) {
                              for (var i = 0; i < result1.activities.length; i++) {
                                    angular.forEach(result1.activities[i], function(item, key2) {
                                          if (item.id != activity.id) {
                                                item.showComFlag = false;
                                                $scope.activityComments = [];
                                          }
                                    });
                              }
                        });
                  });
            }
            if (activity.showComFlag) {
                  activity.showComFlag = false;
                  $scope.activityComments = [];
            } else {
                  $activities['getActivityComments'](activity.id).then(function(response) {
                        $scope.activityComments = response;
                  });
                  activity.showComFlag = true;
            }
      }
      $scope.addActivityComment = function(activity) {
            var commentText = $('.comments_' + activity.order + ' .input_comment').val();
            if (!commentText.length || commentText == '') {
                  return;
            }
            $activities['addActivityComment'](activity.id, commentText).then(function(response) {
                  $('.comments_' + activity.order + ' .input_comment').val('');
                  var actComment = {};
                  actComment.commentid = response;
                  actComment.activityid = activity.id;
                  actComment.comentario = commentText;
                  actComment.commentdate = '0 min(s)';
                  actComment.id_usuario = $scope.user.id;
                  actComment.nome_usuario = $scope.user.name;
                  actComment.url_image = $scope.userDetailImage ? $scope.userDetailImage : $scope.user.md_image;
                  $scope.activityComments.unshift(actComment);
                  activity.comments++;
            });
      }
      $scope.showHideDetails = function(sitind, activity) {
            // if (sitind == 3) {
            //       return;
            // }
            if (!$scope.listType) {
                  for (var i = 0; i < $scope.activities_list.length; i++) {
                        angular.forEach($scope.activities_list[i], function(item, key) {
                              if (item.id != activity.id) {
                                    $scope.hideDetails(item);
                              }
                        });
                  }
            } else {
                  angular.forEach($scope.activities_hierarchy, function(result, key) {
                        angular.forEach(result.keys, function(result1, key1) {
                              for (var i = 0; i < result1.activities.length; i++) {
                                    angular.forEach(result1.activities[i], function(item, key2) {
                                          if (item.id != activity.id) {
                                                $scope.hideDetails(item);
                                          }
                                    });
                              }
                        });
                  });
            }
            if (activity.showDetFlag) {
                  $scope.hideDetails(activity);
            } else {
                  $('.details_' + activity.order + ' #detail-responsavel').select2();
                  $('.details_' + activity.order + ' #detail-date-init').datepicker();
                  $('.details_' + activity.order + ' #detail-date-fim').datepicker();
                  $('.details_' + activity.order + ' .input_description').val(activity.description);
                  $('.details_' + activity.order + ' #detail-date-init').val(activity.init);
                  $('.details_' + activity.order + ' #detail-date-fim').val(activity.fim);
                  if (activity.situacao == 1) $('.details_' + activity.order + ' #check-finished').prop("checked", true);
                  if (activity.situacao == 3) $('.details_' + activity.order + ' #check-cancelled').prop("checked", true);
                  var activity_percentage = activity.percentage;
                  $('.details_' + activity.order + ' #detail-percentage').val(activity_percentage);
                  $timeout(function() {
                        $('.details_' + activity.order + ' .slider').slider({
                              range: "min",
                              min: 0,
                              max: 100,
                              value: activity_percentage,
                              create: function() {
                                    var $handles = $('.details_' + activity.order + ' .slider').find('.ui-slider-handle');
                                    $handles.html('<span class="ui-label">' + $(this).slider("value") + '</span>');
                              },
                              slide: function(event, ui) {
                                    $('.details_' + activity.order + ' #detail-percentage').val(ui.value);
                                    var $handles = $('.details_' + activity.order + ' .slider').find('.ui-slider-handle');
                                    $handles.html('<span class="ui-label">' + ui.value + '</span>');
                              }
                        });
                        $(".details_" + activity.order + " .slider .ui-slider-handle .ui-label").text(activity_percentage);
                  });
                  var startPos = $('.details_' + activity.order + ' #detail-percentage').val();
                  var endPos = '';
                  $('.details_' + activity.order + ' .slider').on("slidestop", function(event, ui) {
                        endPos = ui.value;
                        if (startPos != endPos) {
                              if (endPos == 100) {
                                    $('.details_' + activity.order + ' #check-finished').prop("checked", true);
                                    $('.details_' + activity.order + ' #check-cancelled').removeAttr("checked");
                              } else {
                                    $('.details_' + activity.order + ' #check-finished').removeAttr("checked");
                              }
                        }
                        startPos = endPos;
                  });
                  $scope.detailResponsavel[activity.order] = activity.responsavel;
                  $timeout(function() {
                        $('.details_' + activity.order + ' #detail-responsavel').trigger('change');
                  }, 100);
                  activity.showDetFlag = true;
            }
      }
      $scope.hideDetails = function(activity) {
            activity.showDetFlag = false;
            $('.details_' + activity.order + ' #detail-responsavel').select2("destroy");
            $('.details_' + activity.order + ' #detail-date-init').datepicker("destroy");
            $('.details_' + activity.order + ' #detail-date-fim').datepicker("destroy");
            $('.details_' + activity.order + ' #check-finished').removeAttr("checked");
            $('.details_' + activity.order + ' #check-cancelled').removeAttr("checked");
      }
      $scope.changeDetailSituation = function(activity, situation) {
            if (situation == '3') {
                  $('.details_' + activity.order + ' #check-finished').removeAttr("checked");
            }
            if (situation == '1') {
                  $('.details_' + activity.order + ' #check-cancelled').removeAttr("checked");
            }
      }
      $scope.saveActivity = function() {
            if ($('.new_activity #nome').val() == "") {
                  alert("Enter the name!");
                  return;
            }
            if ($('.new_activity #descricao').val() == "") {
                  alert("Enter the description!");
                  return;
            }
            if ($scope.newObjective == 0 || !$scope.newObjective) {
                  alert("Enter the Objective!");
                  return;
            }
            if ($scope.newChave == 0 || !$scope.newChave) {
                  alert("Enter the Resultado-chave!");
                  return;
            }
            if ($scope.newResponsavel == 0 || !$scope.newResponsavel) {
                  alert("Enter the Responsavel!");
                  return;
            }
            if ($('.new_activity #new-date-init').val() == "") {
                  alert("Enter the starting date!");
                  return;
            }
            if ($('.new_activity #new-date-fim').val() == "") {
                  alert("Enter the end date!");
                  return;
            }
            var data = {
                  nome: $('.new_activity #nome').val(),
                  descricao: $('.new_activity #descricao').val(),
                  goal_id: $scope.newObjective,
                  id_resultado_chave: $scope.newChave,
                  responsavel: $scope.newResponsavel,
                  data_ini: $('.new_activity #new-date-init').val(),
                  data_fim: $('.new_activity #new-date-fim').val()
            };
            $activities['addActivityDetails'](data).then(function(added_activity_id) {
                  toastr.success("Atividade Atualizada");
                  $scope.hideNewPanel();
                  $scope.refreshListContent(added_activity_id);
            });
      }
      $scope.openHierarchyStatus = function(activity_id) {
            if ($scope.listType == 0) {
                  return;
            }
            angular.forEach($scope.activities_hierarchy, function(hierarchy, key) {
                  angular.forEach(hierarchy.keys, function(keyresult, key1) {
                        for (var i = 0; i < keyresult.activities.length; i++) {
                              angular.forEach(keyresult.activities[i], function(item, key2) {
                                    if (item.id == activity_id) {
                                          keyresult.showKey = true;
                                          if ($scope.listType == 1) {
                                                hierarchy.showObj = true;
                                                return true;
                                          }
                                    }
                              });
                        }
                  });
            });
      }
      $scope.updateDetails = function(activity) {
            if ($scope.detailResponsavel[activity.order] == 0 || !$scope.detailResponsavel[activity.order]) {
                  alert("Enter the responsavel!");
                  return;
            }
            if ($('.details_' + activity.order + ' #detail-date-init').val() == "") {
                  alert("Enter the starting date!");
                  return;
            }
            if ($('.details_' + activity.order + ' #detail-date-fim').val() == "") {
                  alert("Enter the end date!");
                  return;
            }
            var sitFinished = $('.details_' + activity.order + ' #check-finished').is(":checked");
            var sitCancelled = $('.details_' + activity.order + ' #check-cancelled').is(":checked");
            var situation = activity.situacao;
            situation = sitFinished ? 1 : situation;
            situation = sitCancelled ? 3 : situation;
            var data = {
                  activity_id: activity.id,
                  description: $('.details_' + activity.order + ' .input_description').val(),
                  responsavel: $scope.detailResponsavel[activity.order],
                  date_init: $('.details_' + activity.order + ' #detail-date-init').val(),
                  date_fim: $('.details_' + activity.order + ' #detail-date-fim').val(),
                  situation: situation,
                  percentage: $('.details_' + activity.order + ' #detail-percentage').val()
            };
            $activities['updateActivityDetails'](data).then(function(response) {
                  toastr.success("Atividade Atualizada");
                  $scope.hideDetails(activity);
                  $scope.refreshListContent(activity.id);
            });
      }

      $scope.updateSitActivityId = 0;
      $scope.showUpdateSitautionConfirmModal = function(activity) {
            $scope.updateSitActivityId = activity.id;
            $('#update-situaction-confirm-modal').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.updateSituation = function() {
            $activities['updateSituationToFinished']($scope.updateSitActivityId).then(function(response) {
                  toastr.success("Atividade Finalizada");
                  $('#update-situaction-confirm-modal').modal('hide');
                  $scope.refreshListContent($scope.updateSitActivityId);
                  $scope.updateSitActivityId = 0;
                  $scope.showFinalized = true;
            });
      }
      $scope.showNewPanel = function() {
            if ($scope.showNewFlag) return;
            $scope.showNewFlag = true;
      }
      $scope.hideNewPanel = function() {
            $('.new_activity #nome').val("");
            $('.new_activity #descricao').val("");
            $('.new_activity #new_objective').select2("val", "");
            $scope.newObjective = 0;
            $('.new_activity #new_chave').select2("val", "");
            $scope.newChave = 0;
            $('.new_activity #new_responsavel').select2("val", "");
            $scope.newResponsavel = 0;
            $('.new_activity #new-date-init').val("");
            $('.new_activity #new-date-fim').val("");
            $scope.showNewFlag = false;
      }
      $scope.changeObj = function() {
            angular.forEach($scope.objectives, function(item, key) {
                  if (item.id == $scope.newObjective) {
                        $scope.resultados = item.keys;
                        return;
                  }
            });
            $('.new_activity #new_chave').select2("val", "");
            $scope.newChave = 0;
            // $activities['getActivityResultados']($scope.newObjective).then(function(response) {
            //         console.log("resultados:", $scope.newObjective, response);
            //         $scope.resultados = response;
            //         $('.new_activity #new_chave').select2("val", "");
            //         $scope.newChave = 0;
            // });
      }
      $scope.changeFimFormat = function(originDate) {
            const monthNames = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];
            var parts = originDate.split('/');
            return parts[0] + " " + monthNames[parts[1] - 1];
      }
      $scope.isPassed = function(originDate) {
            var parts = originDate.split("/");
            var origin = new Date(parts[2], parts[1] - 1, parts[0]);
            return (origin > new Date());
      }
      //----activity test end----//
      $scope.validateImage = function(list) {
            angular.forEach(list, function(result, key) {
                  $activities['isValidImage'](result.url_image).then(function(response) {
                        if (!response) result.url_image = 'assets/img/elinho.png';
                  });
            });
      }

      $scope.update_actiivity_id = 0;
      $scope.finishedSituation = 0;
      $scope.cancelledSituation = 0;
      $scope.clearActivityFilters = function() {
            $scope.userssNotAddedSearch = $scope.users;
            // $scope.params = {
            // filter_time: '',
            //         team: '',
            //         user: ''
            // };
            while ($scope.teamsNotAddedSelectedSearch.length) {
                  $scope.teamsNotAddedSearch.push($scope.teamsNotAddedSelectedSearch.splice(0, 1)[0]);
            }
            while ($scope.usersNotAddedSelectedSearch.length) {
                  $scope.usersNotAddedSearch.push($scope.usersNotAddedSelectedSearch.splice(0, 1)[0]);
            }
            if ($('.filter_time').hasClass('visible')) {
                  var selectBox = $(".filter_time").data("selectBox-selectBoxIt");
                  $('.filter_time').removeClass('visible');
                  selectBox.destroy();
            }
            $scope.selectedftime = "";
            $timeout(function() {
                  $('.filter_time').addClass('visible');
                  $('.filter_time').selectBoxIt();
            }, 10);
            $timeout(function() {
                  $('.filter_team #search-team').select2('val', '');
                  $('.filter_user #search-user').select2('val', '');
            }, 1000);
      }
      $scope.changeSituation = function(situation) {
            if (situation == '3' && $scope.cancelledSituation) {
                  $("#check-finished").removeAttr("checked");
                  $scope.finishedSituation = 0;
            }
            if (situation == '1' && $scope.finishedSituation) {
                  $("#check-cancelled").removeAttr("checked");
                  $scope.cancelledSituation = 0;
            }
      }
      $scope.showProgressModal = function(hContent, event) {
            $scope.activityComments = [];
            event.stopPropagation();
            var activity_id = hContent.id;
            var activity_percentage = hContent.percentage;
            $scope.update_hContent = hContent;
            $scope.update_actiivity_id = activity_id;
            $activities['getActivityComments']($scope.update_actiivity_id).then(function(response) {
                  $scope.activityComments = response;
            });
            $('.update-content').removeClass("disabled-content");
            if (hContent.situacao == 1 || hContent.situacao == 3 || hContent.responsavel != $scope.user.id) $('.update-content').addClass("disabled-content");
            $("#update-percentage").val(activity_percentage);
            $("#check-finished").removeAttr("checked");
            $("#check-cancelled").removeAttr("checked");
            $('#update-progress-modal').modal('show', {
                  backdrop: 'static'
            });
            $timeout(function() {
                  $(".slider").slider({
                        range: "min",
                        min: 0,
                        max: 100,
                        value: activity_percentage,
                        create: function() {
                              var $handles = $(".slider").find('.ui-slider-handle');
                              $handles.html('<span class="ui-label">' + $(this).slider("value") + '</span>');
                        },
                        slide: function(event, ui) {
                              $("#update-percentage").val(ui.value);
                              var $handles = $(".slider").find('.ui-slider-handle');
                              $handles.html('<span class="ui-label">' + ui.value + '</span>');
                        }
                  });
                  $(".slider .ui-slider-handle .ui-label").text(activity_percentage);
            });
            var startPos = $("#slider").slider("value");
            var endPos = '';
            $(".slider").on("slidestop", function(event, ui) {
                  endPos = ui.value;
                  if (startPos != endPos) {
                        if (endPos == 100) {
                              $("#check-finished").prop("checked", true);
                              $("#check-cancelled").removeAttr("checked");
                        } else {
                              $("#check-finished").removeAttr("checked");
                        }
                  }
                  startPos = endPos;
            });
      }
      $scope.showActivityChart2 = function() {
            var barchat_array_label = [];
            var barchat_array_counts = [];
            var barchat_not_started = [];
            var barchat_finished = [];
            var barchat_on_process = [];
            var barchat_cancelled = [];
            if ($scope.activityChartData2.length) {
                  var flag0;
                  var flag1;
                  var flag2;
                  var flag3;
                  angular.forEach($scope.activityChartData2, function(item, key) {
                        if (!barchat_array_label.includes(item.nomeRChave)) {
                              barchat_array_label.push(item.nomeRChave);
                              if (flag0 == false) {
                                    barchat_not_started.push(0);
                              }
                              if (flag1 == false) {
                                    barchat_finished.push(0);
                              }
                              if (flag2 == false) {
                                    barchat_on_process.push(0);
                              }
                              if (flag3 == false) {
                                    barchat_cancelled.push(0);
                              }
                              flag0 = false;
                              flag1 = false;
                              flag2 = false;
                              flag3 = false;
                        }
                        if (item.situacao == 0) {
                              barchat_not_started.push(item.counts);
                              flag0 = true;
                        } else if (item.situacao == 1) {
                              barchat_finished.push(item.counts);
                              flag1 = true;
                        } else if (item.situacao == 2) {
                              barchat_on_process.push(item.counts);
                              flag2 = true;
                        } else if (item.situacao == 3) {
                              barchat_cancelled.push(item.counts);
                              flag3 = true;
                        }
                  });
            }
            var barChartData = {
                  labels: barchat_array_label,
                  datasets: [{
                              label: "Não Iniciada(s)",
                              backgroundColor: "rgba(54, 162, 235, 0.5)",
                              borderColor: "rgba(54, 162, 235, 1)",
                              data: barchat_not_started
                        },
                        {
                              label: "Finalizada(s)",
                              backgroundColor: "rgba(162, 54, 235, 0.5)",
                              borderColor: "rgba(162, 54, 235, 1)",
                              data: barchat_finished
                        },
                        {
                              label: "Em Andamento",
                              backgroundColor: "rgba(162, 235, 54, 0.5)",
                              borderColor: "rgba(162, 235, 54, 1)",
                              data: barchat_on_process
                        }
                  ],
                  borderWidth: 1
            };
            var ctx = document.getElementById('activityChart2').getContext('2d');
            var myActivityChart2 = new Chart(ctx, {
                  type: "horizontalBar",
                  data: barChartData,
                  options: {
                        responsive: true,
                        title: {
                              display: true,
                              text: "Atividades por Resultado Chave"
                        },
                        legend: {
                              position: "bottom"
                        },
                        scales: {
                              yAxes: [{
                                    stacked: true,
                                    ticks: {
                                          maxRotation: 90,
                                          minRotation: 0
                                    },
                                    position: "left"
                              }],
                              xAxes: [{
                                    stacked: true,
                                    ticks: {
                                          beginAtZero: true,
                                          stepSize: 1
                                    },
                                    gridLines: {
                                          display: false
                                    }
                              }]
                        },
                        maintainAspectRatio: false
                  }
            });
      }
      $teams['getAllTeams']().then(function(teams) {
            $scope.teamsNotAddedSearch = teams;
      });
      $users['get']().then(function(users) {
            $scope.usersNotAddedSearch = users;
      });
      $('#search-team').change(function(e) {
            $.each($scope.teamsNotAddedSearch, function(i) {
                  if ($scope.teamsNotAddedSearch[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.teamsNotAddedSearch.splice(i, 1)[0];
                        $scope.teamsNotAddedSelectedSearch.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedTeamSearch = function(ur, justRemove = true) {
            $.each($scope.teamsNotAddedSelectedSearch, function(i) {
                  if ($scope.teamsNotAddedSelectedSearch[i].id === ur.id) {
                        var spliced = $scope.teamsNotAddedSelectedSearch.splice(i, 1)[0];
                        if (justRemove) $scope.teamsNotAddedSearch.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshTeamSearch = function(ur) {
            $('#search-team .select2').select2("val", "");
            $scope.removeAddedTeamSearch(ur);
      };
      $('#search-user').change(function(e) {
            $.each($scope.usersNotAddedSearch, function(i) {
                  if ($scope.usersNotAddedSearch[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.usersNotAddedSearch.splice(i, 1)[0];
                        $scope.usersNotAddedSelectedSearch.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedUserSearch = function(ur, justRemove = true) {
            $.each($scope.usersNotAddedSelectedSearch, function(i) {
                  if ($scope.usersNotAddedSelectedSearch[i].id === ur.id) {
                        var spliced = $scope.usersNotAddedSelectedSearch.splice(i, 1)[0];
                        if (justRemove) $scope.usersNotAddedSearch.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshUserSearch = function(ur) {
            $('#search-user .select2').select2("val", "");
            $scope.removeAddedUserSearch(ur);
      };
      $scope.teamsNotAddedSearch = [];
      $scope.selectedTeamNotAddedSearch = [];
      $scope.teamsNotAddedSelectedSearch = [];
      $scope.selectedTeam = '';
      $scope.usersNotAddedSearch = [];
      $scope.selectedUserNotAddedSearch = [];
      $scope.usersNotAddedSelectedSearch = [];
      $scope.selectedUser = '';
      $scope.ftimes = ["Ultimo mês", "Ultima semana", "Trimestre atual", "Todo"];
      // $scope.params = {
      // filter_time: '',
      //         team: '',
      //         user: ''
      // }
      $scope.filter = 0;
      $scope.isHierarchy = 0;
      $scope.isFinished = 0;
      $scope.filterActivity = function() {
            var team_id = [];
            var teamsselected = $scope.teamsNotAddedSelectedSearch;
            if (teamsselected && teamsselected.length > 0) {
                  $.each(teamsselected, function(key, value) {
                        team_id.push(value.id);
                  });
            }
            if (team_id && team_id.length > 0) {
                  team_id = team_id.join(',');
            }
            var user_id = [];
            var usersselected = $scope.usersNotAddedSelectedSearch;
            if (usersselected && usersselected.length > 0) {
                  $.each(usersselected, function(key, value) {
                        user_id.push(value.id);
                  });
            }
            if (user_id && user_id.length > 0) {
                  user_id = user_id.join(',');
            }
            $scope.params.user = user_id && user_id.length > 0 ? user_id : '';
            $scope.params.team = team_id && team_id.length > 0 ? team_id : '';
            switch ($scope.selectedftime) {
                  case 'Ultimo mês':
                        $scope.params.filter_time = "last_month";
                        break;
                  case 'Ultima semana':
                        $scope.params.filter_time = "last_week";
                        break;
                  case 'Trimestre atual':
                        $scope.params.filter_time = "current_quarter";
                        break;
                  case 'Todo':
                        $scope.params.filter_time = "all";
                        break;
                  default:
                        $scope.params.filter_time = "";
            }
            $scope.activitiesTab(1);
      }
      $scope.hierarchyChecked = function() {
            if ($scope.isHierarchy) $scope.isHierarchy = 0;
            else $scope.isHierarchy = 1;
      }
      $scope.finishedChecked = function() {
            if ($scope.isFinished) $scope.isFinished = 0;
            else $scope.isFinished = 1;
      }
      $scope.teamcarousel = function() {
            // $.each($scope.myteams, function (index, value){
            //    $.each(value.elos, function (index1, value1){
            // var obj = {
            //    "id": $scope.myteams[index].elos[index1].usuario_responsavel,
            //    "name": $scope.returnUserDataFromId($scope.myteams[index].elos[index1].usuario_responsavel).name,
            //    "image": $scope.returnUserDataFromId($scope.myteams[index].elos[index1].usuario_responsavel).image
            // };
            // $scope.myteams[index].elos[index1].usuario_responsavel = obj;
            // var arrMencionados = $scope.myteams[index].elos[index1].usuarios_mencionados.split(',');
            // $scope.myteams[index].elos[index1].usuarios_mencionados = new Array();
            // $.each(arrMencionados, function(j, val){
            //    $scope.myteams[index].elos[index1].usuarios_mencionados.push({"id":val, "name": $scope.returnUserDataFromId(val).name});
            // });
            //    });
            // });
            if ($scope.myteams.length > 0) {
                  $scope.member_id = $scope.myteams[0].member_id;
            }
            $('#team_link_goals').niceScroll({
                  cursorcolor: "#3fb0ac",
                  cursorborder: "none"
            });
      }
      $scope.owlOptionsteamMembers = {
            loop: false,
            margin: 30,
            nav: true,
            dots: false,
            touchDrag: false,
            mouseDrag: false,
            responsiveClass: true,
            navText: ["<i class='fa fa-angle-left' aria-hidden='true'></i>", "<i class='fa fa-angle-right' aria-hidden='true'></i>"],
            responsive: {
                  0: {
                        items: 1,
                  },
                  600: {
                        items: 3,
                  },
                  1000: {
                        items: 4,
                  },
                  1200: {
                        items: 5,
                  },
                  1800: {
                        items: 6,
                  }
            }
      }
      $scope.showallupdates = function() {
            if ($("#showallupdates").prop('checked')) {
                  $scope.searchWeek = "all";
            } else {
                  $scope.searchWeek = "current";
            }
            $scope.filterbyWeek();
      }
      $scope.myTeamTab = function() {
            $scope.carreerTab();
            //limpeza de notificações para reanimar na volta da tela inicial
            $scope.notifications = [];
            clearInterval($scope.notificationInterval);
            $("#showallupdates").prop('checked', false);
            $scope.searchWeek = "current";
            $scope.profiletab = 2;
            $scope.myteams = [];
            $("#search-user").select2('destroy');
            $("#search-user").val('');
            $("#search-user").select2();
            var this_week_start = moment().subtract('days', 0).format('YYYY-MM-DD');
            var this_week_end = moment().subtract('days', 7).format('YYYY-MM-DD');
            $scope.from_date = this_week_start;
            $scope.to_date = this_week_end;
            $scope.searchWeek = "current";
            // $users['get_current_user_team_member']().then(function(users) {
            // $scope.teamusers = users;
            $timeout(function() {
                  $users['get_my_team_by_empresa']($scope.from_date, $scope.to_date).then(function(response) {
                        $scope.myteams = response[0];
                        $scope.updatestatistics = response[1];
                        $scope.teamcarousel();
                  });
            }, 300);
            // });
      }
      $scope.getcyclereviewuserforprofile = function() {
            $cycleConfiguration['getCycleConfigUsersByTypeValidation']().then(function(response) {
                  $scope.users_teams = response;
            });
      }
      $scope.addGestorsAndParesForCycle = function() {
            var $Gestors = [];
            var $Pares = [];
            if ($scope.SelectedGestors) {
                  $.each($scope.SelectedGestors, function(index, value) {
                        delete value.$$hashKey;
                        $Gestors.push(value);
                  });
            }
            if ($scope.SelectedPares) {
                  $.each($scope.SelectedPares, function(index, value) {
                        delete value.$$hashKey;
                        $Pares.push(value);
                  });
            }
            $cycleConfiguration['addUpdateCycleUsers']($scope.cycle_detail.id_revisao_ciclo, $scope.selectedUserId, $Gestors, $Pares).then(function(response) {
                  if (response == 1) {
                        $scope.closeSidebar();
                        $scope.avalicao_cycles = $scope.cycle_detail.id_revisao_ciclo;
                        toastr.success('Salvo!');
                        $scope.filterAvailicaoUsersByCycleSelection();
                  }
            });
      }
      $scope.filterAvailicaoUsersByCycleSelection = function() {
            $cycleConfiguration['getCycleConfigUsersByCycleId']($scope.avalicao_cycles).then(function(response) {
                  $scope.cycleUsers = response.records;
                  $scope.complete_reviews_per = response.complete_reviews_per;
                  $scope.completed_reviews = response.completed_reviews;
                  $scope.no_answer_reviews_per = response.no_answer_reviews_per;
                  $scope.no_answer_reviews = response.no_answer_reviews;
                  $scope.not_started_reviews_per = response.not_started_reviews_per;
                  $scope.not_started_reviews = response.not_started_reviews;
                  $cycleConfiguration['getCycleByCycleId']($scope.avalicao_cycles).then(function(response) {
                        $scope.cycle_detail = response;
                  });
            });
      }
      $scope.filterAvailicaoUsers = function() {
            $cycleConfiguration['getCycleConfigUsersByFilter']($scope.avalicao_cycles, $scope.search_by_name, $scope.search_by_status, $scope.select_team_filter).then(function(response) {
                  $scope.cycleUsers = response;
            });
      }
      $scope.openSidebar = function(cycleId, UserId, totalReviews, inCompleteReviews) {
            $scope.managerSectionEdit = false;
            $scope.reviwersSectionEdit = false;
            $scope.equipeSectionEdit = false;
            $scope.selfReviewSectionEdit = false;
            $scope.totalReviews = totalReviews;
            $scope.inCompleteReviews = inCompleteReviews;
            $scope.currentCycle = cycleId;
            $scope.selectedUserId = UserId;
            $scope.openSideBarMenu = true;
            $users['getGestors']().then(function(response) {
                  $scope.gestors = response;
                  $timeout(function() {
                        $('#cycle_config_gestor').select2();
                  }, 500);
            });
            $users['all']().then(function(response) {
                  $scope.all_users = response;
                  $timeout(function() {
                        $('#all_users').select2();
                  }, 500);
            });
            $users['details'](UserId).then(function(response) {
                  $scope.userData = response;
            });
            $cycleConfiguration['getById'](cycleId).then(function(response) {
                  $scope.cycle_details = response.ravisao_ciclo;
            });
            $cycleConfiguration['getCycleUserByType'](cycleId, UserId, 2).then(function(response) {
                  var select_gestor = [];
                  $scope.SelectedGestors = response;
                  if ($scope.SelectedGestors) {
                        $.each($scope.SelectedGestors, function(index, value) {
                              select_gestor.push(value.id_usuario_avaliador);
                        });
                        $scope.select_gestor = select_gestor;
                  }
                  $timeout(function() {
                        $('#cycle_config_gestor').select2();
                  }, 400);
            });
            $cycleConfiguration['getCycleUserByType'](cycleId, UserId, 3).then(function(response) {
                  $scope.SelectedPares = response;
                  var select_pares = [];
                  if ($scope.SelectedPares) {
                        $.each($scope.SelectedPares, function(index, value) {
                              select_pares.push(value.id_usuario_avaliador);
                        });
                        $scope.select_pares = select_pares;
                  }
            });
            $timeout(function() {
                  $(document).on('change', "#all_users", function() {
                        $scope.selectPares();
                  });
            }, 1000);
      }
      $scope.selectGestors = function() {
            $users['detailsByIds']($scope.select_gestor).then(function(response) {
                  $scope.SelectedGestors = response;
            });
      }
      $scope.selectPares = function() {
            $scope.select_pares = $("#all_users").val();
            $users['detailsByIds']($scope.select_pares).then(function(response) {
                  $scope.SelectedPares = response;
            });
      }
      $scope.closeSidebar = function() {
            $scope.openSideBarMenu = false;
      }
      $scope.editManagers = function() {
            $scope.managerSectionEdit = true;
      }
      $scope.closeEditManagers = function() {
            $scope.managerSectionEdit = false;
      }
      $scope.editReviewers = function() {
            $scope.reviwersSectionEdit = true;
      }
      $scope.closeEditReviewers = function() {
            $scope.reviwersSectionEdit = false;
      }
      $scope.editSelfReview = function() {
            $scope.selfReviewSectionEdit = true;
      }
      $scope.closeSelfReview = function() {
            $scope.selfReviewSectionEdit = false;
      }
      $scope.removePares = function(index, id) {
            delete $scope.SelectedPares.splice(index, 1);
            delete $scope.select_pares.splice(index, 1);
            $("#all_users").select2('destroy');
            $timeout(function() {
                  $('#all_users').select2();
            }, 10);
      }
      $scope.removeGestor = function(index, id) {
            delete $scope.SelectedGestors.splice(index, 1);
            delete $scope.select_gestor.splice(index, 1);
            $("#cycle_config_gestor").select2('destroy');
            $timeout(function() {
                  $('#cycle_config_gestor').select2();
            }, 10);
      }
      $scope.checkall = false;
      $scope.selectAll = function() {
            if (!$scope.checkall) {
                  $scope.checkall = true;
            } else {
                  $scope.checkall = false;
            }
      }
      $scope.reverceTab1 = function() {
            $scope.reviewtab = 1;
      }
      $scope.reviewTab2JsControls = function(user_id, avalicao_id) {
            $('#slideControl1').slideControl({
                  speed: 600,
                  lowerBound: 0,
                  upperBound: 5,
            });
            $('#GoalsNew').niceScroll({
                  cursorcolor: "#03a9f4",
                  cursorborder: "none"
            });
            $('#FeedbackNew').niceScroll({
                  cursorcolor: "#03a9f4",
                  cursorborder: "none"
            });
            $('#eqlTab2').niceScroll({
                  cursorcolor: "#03a9f4",
                  cursorborder: "none"
            });
            $timeout(function() {
                  $('#slideControl1').trigger('change');
            }, 200);
      }
      $scope.reviewTab2 = function(user_id, avalicao_id, cycle_id) {
            delete $scope.goal_details;
            $scope.detailstab = 0;
            $scope.reviewtab = 2;
            $scope.resultotab = 2;
            $scope.searchuser_id = user_id;
            $scope.avalicao_id = avalicao_id;
            $cycleConfiguration['get_fases_details_for_user'](user_id, avalicao_id).then(function(response) {
                  $scope.$step = -1;
                  $scope.avaliacoescycledetails = response.avaliacoescycledetails;
                  $scope.cycledetails = response.cycledetails;
                  $scope.fasesData = response.fasesData;
                  $scope.reviewTab2JsControls();
                  $users['details'](user_id).then(function(response) {
                        $scope.searchuser = response;
                  });
            });
            // initialize first phase index 0
            $scope.nextTab(-1);
      }
      $scope.reverceTab2 = function(user_id, cycle, avalicao_id) {
            $scope.resultotab = 2;
            $timeout(function() {
                  $users['get_avalicao_detail_ciclo'](user_id, cycle, avalicao_id).then(function(avalicao) {
                        $scope.avalicao = avalicao;
                        $('#slideControl1').slideControl({
                              speed: 600,
                              lowerBound: 0,
                              upperBound: 5,
                        });
                        $('#GoalsNew').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                        $('#FeedbackNew').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                        $('#eqlTab2').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                        $('#slideControl1').val($scope.avalicao.desempenho);
                        $timeout(function() {
                              $('#slideControl1').trigger('change');
                        }, 200);
                  });
            }, 10);
      }
      $scope.profileGoalDetail = function(goal_id, user_id, cycle, year) {
            $scope.resultotab = 2;
            $scope.detailstab = 1;
            $users['get_profile_goal_detail'](goal_id, user_id, cycle).then(function(response) {
                  $scope.goal_details = response;
            });
            $users['avalicao_details_by_id'](user_id, year, cycle).then(function(response) {
                  $scope.usergoals = response;
            });
      }
      $scope.reviewTab3 = function(user_id, year, cycle, cycle_name) {
            $scope.resultotab = 3;
            var desempenho_value = $('#slideControl1').val();
            if (desempenho_value) {
                  $users['update_desmpenho_by_id'](user_id, cycle, desempenho_value).then(function(response) {
                        $scope.desempenho_value = desempenho_value;
                  });
            }
            $users['userskillsforreview'](user_id).then(function(skills) {
                  $scope.skills = skills;
                  $('#competenciasTb3').niceScroll({
                        cursorcolor: "#03a9f4",
                        cursorborder: "none"
                  });
                  $timeout(function() {
                        $('.slideControl').slideControl({
                              speed: 600,
                              lowerBound: 0,
                              upperBound: 5,
                        });
                        $(".slideControl").trigger('change');
                  }, 100);
            });
            $users['uservaloresforreview'](user_id).then(function(response) {
                  $scope.uservalores = response;
                  $timeout(function() {
                        $('.slideControl').slideControl({
                              speed: 600,
                              lowerBound: 0,
                              upperBound: 5,
                        });
                        $(".slideControl").trigger('change');
                  }, 100);
            });
      }
      $scope.nextTab = function(index) {
            $scope.activecomponent ="";
            $scope.savefasedata();
            if ($scope.$step < $scope.fasesData.length - 1) {
                  var newIndex = parseInt(index) + 1;
                  $scope.$step = newIndex;
                  $scope.getcomponentdata($scope.fasesData[newIndex]);
            } else {
                  $timeout(function() {
                        var $save_data = {};
                        $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
                        $cycleConfiguration['save_apprisial_finish']($save_data).then(function() {
                              //toastr.success('Salvo');
                              $scope.myCycleReview();
                              $scope.getcyclereviewuserforprofile();
                        });
                  }, 500);
            }
      }
      $scope.funsaveorksandfeedback = function(savefase) {
            var $form_data = $("#resaltados_form").serialize();
            var $save_data = {};
            $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
            $save_data.form_data = $form_data;
            $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
            $save_data.field_type = 'resultados';
            $cycleConfiguration['save_apprisial_fase_data']($save_data).then(function() {
                  toastr.success('Salvo');
            });
      }
      $scope.funsavedepares = function(savefase) {
            var $save_data = {};
            $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
            $save_data.paresAdded = [];
            $.each($scope.paresAdded, function(index, user) {
                  $save_data.paresAdded.push(user.id);
            });
            $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
            $save_data.field_type = 'pares';
            $cycleConfiguration['save_apprisial_fase_pares_data']($save_data).then(function() {
                  toastr.success('Salvo');
            });
      }
      $scope.funsavecompetencias = function(savefase) {
            var $form_data = $("#competencias_skills").serialize();
            var $save_data = {};
            $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
            $save_data.form_data = $form_data;
            $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
            $save_data.field_type = 'competencias';
            $cycleConfiguration['save_apprisial_fase_competencias_data']($save_data).then(function() {
                  toastr.success('Salvo');
            });
      }
      $scope.funsavepotencials = function(savefase) {
            var $form_data = $("#potencial_form").serialize();
            var $save_data = {};
            $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
            $save_data.form_data = $form_data;
            $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
            $save_data.field_type = 'potencial';
            $cycleConfiguration['save_apprisial_fase_data']($save_data).then(function() {
                  toastr.success('Salvo');
            });
      }
      $scope.funsavesurvey = function(savefase) {
            var $form_data = $("#apprisialsurvey_form").serialize();
            var $save_data = {};
            $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
            $save_data.form_data = $form_data;
            $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
            $save_data.field_type = 'survey';
            $cycleConfiguration['save_apprisial_fase_data']($save_data).then(function() {
                  toastr.success('Salvo');
            });
      }
      $scope.funsavevalores = function(savefase) {
            var $form_data = $("#values_skills").serialize();
            var $save_data = {};
            $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
            $save_data.form_data = $form_data;
            $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
            $save_data.field_type = 'valores';
            $cycleConfiguration['save_apprisial_fase_valores_data']($save_data).then(function() {
                  toastr.success('Salvo');
            });
      }
      $scope.savefasedata = function() {
            var previousstep = $scope.$step;
            if (previousstep > -1) {
                  var save_fase = $scope.fasesData[previousstep];
                  var type = save_fase['componente'];
                  switch (type) {
                        case 'O':
                              $scope.funsaveorksandfeedback(save_fase);
                              break;
                        case 'P':
                              $scope.funsavedepares(save_fase);
                              break;
                        case 'C':
                              $scope.funsavecompetencias(save_fase);
                              break;
                        case 'T':
                              $scope.funsavepotencials(save_fase);
                              break;
                        case 'S':
                              $scope.funsavesurvey(save_fase);
                              break;
                        case 'V':
                              $scope.funsavevalores(save_fase);
                              break;
                  }
            }
      }
      $scope.getcomponentdata = function(currentfase) {
            if (currentfase != null) {
                  var type = currentfase['componente'];
                  $scope.activecomponent = currentfase.componente;
                  $scope.currentfase = currentfase;
                  switch (type) {
                        case 'O':
                              $scope.funorksandfeedback(currentfase);
                              break;
                        case 'P':
                              $scope.fundepares(currentfase);
                              break;
                        case 'C':
                              $scope.funcompetencias(currentfase);
                              break;
                        case 'T':
                              $scope.funpotencials(currentfase);
                              break;
                        case 'S':
                              $scope.funsurvey(currentfase);
                              break;
                        case 'V':
                              $scope.funvalores(currentfase);
                              break;
                  }
            }
      }
      $scope.paresAdded = [];
      $scope.excludedUserPairs = [];
      $scope.checkIfNotMeOrGestor = function(possiblePair) {
            return !$scope.excludedUserPairs.includes(possiblePair.id);
      }
      $scope.changepares = function(ur) {
            $('.pares_block').removeClass("error");
            $.each($scope.$parent.users, function(i) {
                  if ($scope.$parent.users[i].id === $('#pares-select').val()) {
                        var obj = $filter('filter')($scope.paresAdded, {
                              id: $scope.$parent.users[i].id
                        }, true)[0];
                        if (!obj) $scope.paresAdded.push($scope.$parent.users[i]);
                        return false;
                  }
            });
            $('#pares-select').select2("val", "");
      }
      $scope.removeAddedUser = function(ur) {
            $.each($scope.paresAdded, function(i) {
                  if ($scope.paresAdded[i].id === ur.id) {
                        var spliced = $scope.paresAdded.splice(i, 1)[0];
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefresh = function(ur) {
            $('#pares-select').select2("val", "");
            $scope.removeAddedUser(ur);
      };
      $scope.funorksandfeedback = function(currentfase) {
            $users['get_question_data_profile'](currentfase.questionario, $scope.searchuser_id, currentfase.id_revisao_ciclo_fases).then(function(questions) {
                  $scope.apprisialquestion = questions;
            });
      }
      $scope.fundepares = function(currentfase) {
            $scope.$parent.$watch('users', function(newValue) {
                  $scope.possiblePair = newValue;
                  if ($scope.possiblePair) {
                        $scope.possiblePair = $scope.possiblePair.filter($scope.checkIfNotMeOrGestor);
                  }
                  setTimeout(function() {
                        $('#pares-select').select2();
                  }, 200);
            });
      }
      $scope.funcompetencias = function(currentfase) {
            $users['get_competencias_data_profile'](currentfase.id_revisao_ciclo_fases, $scope.searchUserId).then(function(competencias) {
                  angular.forEach(competencias, function(item, key) {
                        angular.forEach(item.categorywisedata, function(item1, key1) {
                              angular.forEach(item1.competencias, function(item2, key2) {
                                    item2.detailOpened = false;
                              });
                        });
                  });
                  $scope.apprisialcompetencias = competencias;
                  $scope.questionerio = {};
                  $scope.questionerio.id_pergunta = 1;
                  $scope.questionerio.id_questionario = 1;
            });
      }
      $scope.funpotencials = function(currentfase) {
            $users['get_question_data_profile'](currentfase.questionario, $scope.searchuser_id, currentfase.id_revisao_ciclo_fases).then(function(questions) {
                  $scope.apprisialpotencialsquestion = questions;
            });
      }
      $scope.funsurvey = function(currentfase) {
            $users['get_question_data_profile'](currentfase.questionario, $scope.searchuser_id, currentfase.id_revisao_ciclo_fases).then(function(questions) {
                  $scope.apprisialsurveysquestion = questions;
            });
      }
      $scope.funvalores = function(currentfase) {
            $users['getallapprisialvalores'](currentfase.id_revisao_ciclo_fases).then(function(response) {
                  $scope.apprisialvalores = response;
                  $scope.questionerio = {};
                  $scope.questionerio.id_pergunta = 1;
                  $scope.questionerio.id_questionario = 1;
            });
      }
      $scope.prevTab = function(index) {
            $scope.activecomponent ="";
            var newIndex = parseInt(index) - 1;
            $scope.$step = newIndex;
            if (newIndex < 0) {
                  $scope.getcyclereviewuserforprofile();
                  $scope.myCycleReview();
            } else {
                  $scope.getcomponentdata($scope.fasesData[newIndex]);
            }
      }
      $scope.reverceTab3 = function(user_id, cycle, avalicao_id) {
            $scope.resultotab = 3;
      }
      $scope.calculatePerformance = function() {
            performance_value = 0;
            if ($scope.empresadetails.desempenho != 1) {
                  var valore_value = $('#valorefinal').val();
                  var desempnho_value = 0;
                  var performance_value = parseFloat(valore_value);
            } else {
                  var valore_value = $('#valorefinal').val();
                  var desempnho_value = $('#desempenhofinal').val();
                  var performance_value = (parseFloat(valore_value) + parseFloat(desempnho_value)) / 2;
            }
            $("#final_performance .final-figure").html(performance_value.toFixed(2));
      }
      $scope.reviewTab4 = function(user_id, year, cycle, cycle_name) {
            if ($scope.empresadetails.potencial != 1) {
                  $scope.resultotab = 5;
                  var $form_data = $("#values_skills").serialize();
                  $users['update_valores_skills_by_id']($form_data).then(function(response) {
                        $scope.res = response;
                  });
                  $timeout(function() {
                        $('.slideControl').slideControl({
                              speed: 600,
                              lowerBound: 0,
                              upperBound: 5,
                        }, function() {
                              $scope.calculatePerformance();
                        });
                        $(".slideControl").trigger('change');
                  }, 100);
                  /* $users['get_avalicao_detail_ciclo'](user_id, cycle).then(function(avalicao) {
                   
                   $scope.avalicao = avalicao;
                   $scope.valore_value = avalicao.valores;
                   $('#valorefinal').val($scope.avalicao.valores);
                   $('#valorefinal').trigger('change');
                   var valores = $scope.avalicao.valores;
                   
                   if ($scope.empresadetails.desempenho == 1) {
                   $('#desempenhofinal').val($scope.avalicao.desempenho);
                   $('#desempenhofinal').trigger('change');
                   var desempenho = $scope.avalicao.desempenho;
                   $scope.performance = (parseFloat(valores) + parseFloat(desempenho)) / 2;
                   } else {
                   $('#slideControlDesempenho').css('display', 'none');
                   var desempenho = 0;
                   $scope.performance = parseFloat(valores);
                   }
                   }); */
            } else {
                  $scope.resultotab = 4;
                  var $form_data = $("#values_skills").serialize();
                  $users['update_valores_skills_by_id']($form_data).then(function(response) {
                        $scope.res = response;
                  });
                  $users['userpotentialreviewforprofile']($scope.avalicao.id_protocolo_avaliacao, user_id).then(function(response) {
                        $scope.userpotentialquestions = response;
                        $('#potencial_form').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                  });
            }
      }
      $scope.reverceTab4 = function(user_id, cycle, avalicao_id) {
            $scope.resultotab = 4;
      }
      $scope.reviewTab5 = function(user_id, year, cycle, cycle_name) {
            $scope.resultotab = 5;
            $timeout(function() {
                  $('.slideControl').slideControl({
                        speed: 600,
                        lowerBound: 0,
                        upperBound: 5,
                  }, function() {
                        $scope.calculatePerformance();
                  });
                  $(".slideControl").trigger('change');
            }, 100);
            var $answers = jQuery('#potencial_form').serialize();
            $("label.btn.btn-success.btn-success-act.ratting").click(function() {
                  $(this).parents(".avaliacao-panel").find("label.btn.btn-success.btn-success-act.ratting").removeClass('active');
                  $(this).toggleClass('active');
            });
            $users['get_avalicao_detail_ciclo'](user_id, cycle).then(function(avalicao) {
                  $scope.avalicao = avalicao;
                  $scope.valore_value = avalicao.valores;
                  $('#valorefinal').val($scope.avalicao.valores);
                  $('#valorefinal').trigger('change');
                  var valores = $scope.avalicao.valores;
                  if ($scope.empresadetails.desempenho != 1) {
                        $('#slideControlDesempenho').css('display', 'none');
                        var desempenho = 0;
                        $scope.performance = parseFloat(valores);
                        $scope.desempenho_value = 0;
                  } else {
                        $('#desempenhofinal').val($scope.avalicao.desempenho);
                        $('#desempenhofinal').trigger('change');
                        var desempenho = $scope.avalicao.desempenho;
                        $scope.desempenho_value = $scope.avalicao.desempenho;
                        $scope.performance = (parseFloat(valores) + parseFloat(desempenho)) / 2;
                  }
                  if ($scope.empresadetails.performance != 1) {
                        $('#final_performance').css('display', 'none');
                        $scope.performance = 0;
                  }
            });
            $users['savepotentialanswersprofile']($answers).then(function(response) {});
      }
      $scope.reviewTab6 = function(user_id, year, cycle, cycle_name) {
            $scope.calculatePerformance();
            var valore_value = $('#valorefinal').val();
            var desempnho_value = $('#desempenhofinal').val();
            var geral = jQuery("#pdi_form input[name='geral']:checked").val();
            var avaliacao_quali = jQuery("#avaliacao_quali").val();
            $("#final_performance .final-figure").text();
            var performance_value = $("#final_performance .final-figure").text();
            $users['save_final_values_reviews']($scope.avalicao.id_protocolo_avaliacao, valore_value, desempnho_value, performance_value, avaliacao_quali, geral).then(function(response) {
                  toastr.success('Salvo!');
                  $scope.myCycleReview();
            });
      }
      $scope.displayapributton = function(evalution) {
            var total_columns = 6;
            var total_eve = 0;
            if ($scope.empresadetails.performance == 0) {
                  evalution.performance = 1;
                  total_columns--;
            }
            if ($scope.empresadetails.desempenho == 0) {
                  evalution.desempenho = 1;
                  total_columns--;
            }
            if ($scope.empresadetails.potencial == 0) {
                  evalution.potencial = 1;
                  total_columns--;
            }
            if ($scope.empresadetails.competencias == 0) {
                  evalution.competencias = 1;
                  total_columns--;
            }
            if (evalution.valores == 0) {
                  evalution.valores = null;
            }
            if (evalution.performance && $scope.empresadetails.performance == 1) {
                  total_eve++;
            }
            if (evalution.valores) {
                  total_eve++;
            }
            if (evalution.competencias && $scope.empresadetails.competencias == 1) {
                  total_eve++;
            }
            if (evalution.potencial && $scope.empresadetails.potencial == 1) {
                  total_eve++;
            }
            if (evalution.geral) {
                  total_eve++;
            }
            if (evalution.desempenho && $scope.empresadetails.desempenho == 1) {
                  total_eve++;
            }
            if (total_eve >= total_columns) {
                  return 1;
            } else if (total_eve >= 1) {
                  return 2;
            } else if (total_eve == 0) {
                  return 0;
            }
      }
      $scope.changeYear = function() {
            $cycles['getByYear']($scope.selectedYear).then(function(cycles) {
                  $scope.cycles = cycles;
                  if ($('.select-cycle').hasClass('visible')) {
                        var selectBox = $(".select-cycle").data("selectBox-selectBoxIt");
                        $('.select-cycle').removeClass('visible');
                        selectBox.destroy();
                  }
                  if ($scope.cycles.length) {
                        if ($scope.cycles[0].id) {
                              $scope.cycles.unshift({
                                    id: '',
                                    name: 'Todos'
                              });
                        }
                  }
                  $scope.selectedCycle = '';
                  $timeout(function() {
                        var $cycles = $('.select-cycle');
                        $cycles.addClass('visible').selectBoxIt();
                  }, 10);
            });
      }
      $('#results a').click(function(e) {
            e.preventDefault();
            $(this).tab('show');
      });
      $(document).on('click', '.veiew', function() {
            $(this).parents('.userupdatesectoin').find(".shorts_bottoms").toggleClass("expand_dv");
            if ($(this).find('i').hasClass('fa-chevron-down')) {
                  $(this).find('i').removeClass('fa-chevron-down');
                  $(this).find('i').addClass('fa-chevron-up');
            } else {
                  $(this).find('i').removeClass('fa-chevron-up');
                  $(this).find('i').addClass('fa-chevron-down');
            }
            $('.feedback-panel .owl-carousel').each(function() {
                  $(this).owlCarousel({
                        margin: 10,
                        nav: true,
                        dots: true,
                        loop: false,
                        touchDrag: false,
                        mouseDrag: false,
                        responsiveClass: true,
                        navText: ["<i class='fa fa-angle-left' aria-hidden='true'></i>", "<i class='fa fa-angle-right' aria-hidden='true'></i>"],
                        items: 1
                  });
            });
      });
      $(document).on('keypress', "[id^='team_comment_']", function(e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 13) {
                  var answer_id = $(this).attr('id').replace('team_comment_', '');
                  $scope.submitComment(answer_id);
            }
      });
      $(document).on('click', ".see_remain_comments", function(e) {
            $(this).find('a').toggleClass('hidemore');
            if ($(this).find('a').hasClass('hidemore')) {
                  $(this).parent().find(".comment_data").removeClass('hide');
                  var hide_text = $(this).find('a').data('hide-text');
                  $(this).find('a').text(hide_text);
                  $(this).find('a').addClass('show_less');
            } else {
                  $(this).find('a').removeClass('show_less');
                  var show_text = $(this).find('a').data('show-text');
                  $(this).parent().find(".comment_data").addClass('hide');
                  $(this).parent().find(".comment_data:lt(2)").removeClass('hide');
                  $(this).find('a').text(show_text);
            }
      });
      //show update data
      $scope.showupdateforuser = function($memberid) {
            $scope.member_id = $memberid;
            $("[id^=teammember_]").parent().removeClass('current');
            $("#teammember_" + $scope.member_id).parent().addClass('current');
      }
      // change update status
      $scope.updatestatus = function($event, $id_protocolo) {
            var $status = $($event.currentTarget).find('input').is(":checked");
            $timeout(function() {
                  $users['checkin_status_update_by_id']($id_protocolo, $status).then(function(questions) {
                        $users['get_user_updates']().then(function(get_user_updates) {
                              $scope.user_updates = get_user_updates;
                        });
                  });
            }, 100);
      }
      // comment on an answer
      $scope.submitComment = function(answer_id) {
            var $comment = $("#team_comment_" + answer_id).val();
            if ($comment == "") {
                  toastr.error('Campo em branco.');
                  return false;
            }
            $users['save_user_comment'](answer_id, $comment).then(function(response) {
                  $("#team_comment_" + answer_id).val('');
                  toastr.success('Salvo');
                  if ($scope.myteams.length > 0) {
                        $.each($scope.myteams, function(index1, team) {
                              if (team.updates.length > 0) {
                                    $.each(team.updates, function(index2, update) {
                                          if (update.questions.length > 0) {
                                                $.each(update.questions, function(index3, question) {
                                                      if (question.answers.length > 0) {
                                                            $.each(question.answers, function(index4, answer) {
                                                                  if (answer.id == answer_id) {
                                                                        $scope.myteams[index1]['updates'][index2]['questions'][index3]['answers'][index4]['comments'] = response;
                                                                  }
                                                            });
                                                      }
                                                });
                                          }
                                    });
                              }
                        });
                  }
            });
      }
      // delete a comment on an answer
      $scope.deletecomment = function(comment_id) {
            $users['delete_comment'](comment_id).then(function(response) {
                  toastr.success('Inativado com sucesso.');
            });
      }
      $scope.showupdate = function($id_protocolo) {
            $users['get_user_update_by_id']($id_protocolo).then(function(questions) {
                  $scope.questions = questions;
                  $users['get_user_updates']().then(function(get_user_updates) {
                        $scope.user_updates = get_user_updates;
                  });
            });
            $users['get_privacy_and_review_status']($id_protocolo).then(function(response) {
                  $scope.review_privacy_status = response;
                  if (response.publico == 1) {
                        $('#visiblitypublic_prfil').prop('checked', true);
                  } else {
                        $('#visiblityprivate_prfil').prop('checked', true);
                  }
                  if (response.situation == 1) {
                        $('#reviewed_status').prop('checked', true);
                  } else {
                        $('#reviewed_status').prop('checked', false);
                  }
            });
            $('#viewupdate').modal('show', {
                  backdrop: 'static'
            });
      }
      $empressa['getallvalores']().then(function(response) {
            $scope.valores = response;
      });
      $users['get_user_updates']().then(function(get_user_updates) {
            $scope.user_updates = get_user_updates;
      });
      var data = {
            year: $scope.selectedYear,
            cycle: $scope.selectedCycle
      }
      $users['profile'](data).then(function(response) {
            $scope.results = response;
            $users['profileacivities']().then(function(profileacivities) {
                  $scope.results.activities = profileacivities.activities;
                  $scope.myactivities = profileacivities.activities;
                  $scope.results.keys = profileacivities.keys;
                  // ----select user----
                  $('.filter_user #search-user').select2({
                        allowClear: true
                  }).addClass('visible');
                  // -----Select-team-------
                  $('.filter_team #search-team').select2({
                        allowClear: true
                  }).addClass('visible');
                  // -----select time-----
                  $('.filter_time').addClass('visible');
                  $('.filter_time').selectBoxIt();
            });
            $users['myCompencias']().then(function(myCompencias) {
                  $scope.comencias = myCompencias;
            });
            $users['my_skill_profile']().then(function(my_skill_profile) {
                  $scope.skillset = my_skill_profile;
                  var chartLine = c3.generate({
                        bindto: '#curve_chart',
                        data: {
                              x: 'x',
                              columns: my_skill_profile,
                              type: 'line',
                        },
                        transition: {
                              duration: 1000
                        },
                        legend: {
                              show: false
                        }
                  });
            });
            // list all team members
            $timeout(function() {
                  $users['getmyteammembers']().then(function(myteammembers) {
                        angular.forEach(myteammembers, function(result, key) {
                              $activities['isValidImage'](result.xs_image).then(function(response) {
                                    if (!response) result.xs_image = 'assets/img/elinho.png';
                              });
                        });
                        $scope.myteammembers = myteammembers;
                  });
                  $users['adminusuariosTime']().then(function(adminusuariosTime) {
                        $scope.adminusuarios = adminusuariosTime;
                        setTimeout(function(){$('#form-elo textarea').css('opacity', 1).focus();}, 1000);
                        $('.elo textarea').mentionsInput({
                              onDataRequest: function(mode, query, callback) {
                                    var data = [];
                                    $.each($scope.adminusuarios, function(index, value) {
                                          data.push({
                                                id: value.id,
                                                name: value.name,
                                                type: 'contact'
                                          });
                                    });
                                    data = _.filter(data, function(item) {
                                          return item.name.toLowerCase().indexOf(query.toLowerCase()) > -1
                                    });
                                    callback.call(this, data);
                              }
                        });
                        $('#descricao_elogio').mentionsInput({
                              onDataRequest: function(mode, query, callback) {
                                    var data = [];
                                    $.each($scope.adminusuarios, function(index, value) {
                                          data.push({
                                                id: value.id,
                                                name: value.name,
                                                type: 'contact'
                                          });
                                    });
                                    data = _.filter(data, function(item) {
                                          return item.name.toLowerCase().indexOf(query.toLowerCase()) > -1
                                    });
                                    callback.call(this, data);
                              }
                        });
                  });
            });
            $elos['unread']().then(function(response) {
                  $scope.unreadElosCount = response.total_unread;
            });
            $scope.testElo = function() {
                  //TODO: Ver uma forma de identificar que o enter foi para marcar uma pessoa e nÃ£o submeter, mas em caso de enter fora no texto normal, entÃ£o enviar.
            }
            $scope.addElo = function(formid) {
                  if ($('#' + formid + ' textarea').val() == "") {
                        $('#' + formid + ' textarea').addClass("error");
                        var postLabel = "elo";
                        if ($scope.eloIsNormalPost) postLabel = "post";
                        toastr.error("Seu " + postLabel + " está vazio, crie uma mensagem");
                        return;
                  }
                  //if ($scope.user.elos_limit == 0 || $scope.user.elos_sent_today < $scope.user.elos_limit) {
                        if (true) {  
                        $('#' + formid + ' textarea').mentionsInput('getMentions', function(data) {

                              var elogio = new FormData();
                              elogio.append('descricao_elogio', $('#' + formid + ' textarea').val());
                              elogio.append('mencoes', JSON.stringify(data));
                              elogio.append('tipo', ($scope.eloIsNormalPost?(6):(0)));

                              angular.forEach($scope.post_images, function(item, key) {
                                    if (item.input && item.input != "") {
                                          var img = $('#postimage-' + key)[0].files;
                                          if (img) img = img[0];
                                          else img = '';
                                          elogio.append('img-' + key, img);
                                    }
                              });

                              // if (data.length == 0) {
                              //       $('#' + formid + ' textarea').addClass("error");
                              //       toastr.error("Seu elo precisa ter ao menos uma pessoa marcada");
                              //       return;
                              // }
                              $('#' + formid + ' button').prop("disabled", true);
                              $elos['insert'](elogio).then(function() {
                                    $('#' + formid + ' textarea').val('');
                                    $('#' + formid + ' textarea').mentionsInput('reset');
                                    $scope.post_images = [];
                                    //toastr.success('Elogio enviado');
                                     $('#' + formid + ' .sent-notification').removeClass("normal-post");
                                    if ($scope.eloIsNormalPost) 
                                    {
                                          $('#' + formid + ' .sent-notification').addClass("normal-post");
                                          setTimeout(function(){
                                                $scope.toggleEloToPublish('elo');
                                                $('#form-elo textarea').focus();
                                          }, 4700);
                                    }
                                    $('#' + formid + ' .sent-notification').fadeIn(200).delay(4000).fadeOut(400);
                                    $scope.user.elos_sent_today++;
                                    $('#' + formid + ' textarea').removeClass("error");
                                    if ($scope.profiletab == 4) $scope.eloTab();
                                    setTimeout(() => $('#' + formid + ' button').prop("disabled", false), 1000);
                                    if($scope.timeline_active){
                                          $scope.lastEloIdLoaded = 0;
                                          $scope.loadMoreElos(true);
                                    }
                              });
                        });
                  } else {
                        toastr.error('Você atingiu seu limite de Elos por hoje');
                  }
            }
            $scope.retrieveFeedbackInfo = function() {
                  $users['my_received_feedback_profile']().then(function(my_received_feedback_profile) {
                        $scope.feedback_recived = my_received_feedback_profile;
                        angular.forEach($scope.feedback_recived, function(item, key) {
                              item.showFeedbackComments = 0;
                        });
                  });
                  $users['get_feedback_notification']().then(function(feedback_notification) {
                        $scope.feedback_notification = feedback_notification;
                  });
                  $users['get_feedback_reply_notification']().then(function(feedback_reply_notification) {
                        $scope.feedback_reply_notification = feedback_reply_notification;
                  });
                  $users['my_given_feedback_profile']().then(function(my_given_feedback_profile) {
                        $scope.feedback_given = my_given_feedback_profile;
                        angular.forEach($scope.feedback_given, function(item, key) {
                              item.showFeedbackCommentReply = 0;
                        });
                  });
                  $users['my_private_notes_profile']().then(function(my_private_notes_profile) {
                        $scope.private_notes = my_private_notes_profile;
                  });
                  $users['my_requested_feedback_by_me']().then(function(my_requested_feedback_by_me) {
                        $scope.feedback_requested_by_me = my_requested_feedback_by_me;
                  });
                  $users['my_requested_feedback_profile']().then(function(my_requested_feedback_profile) {
                        $scope.feedback_requested = my_requested_feedback_profile;
                        $timeout(function() {
                              $('#Section1').niceScroll({
                                    cursorcolor: "#03a9f4",
                                    cursorborder: "none"
                              });
                              $('#Section2').niceScroll({
                                    cursorcolor: "#03a9f4",
                                    cursorborder: "none"
                              });
                              $('#Section3').niceScroll({
                                    cursorcolor: "#03a9f4",
                                    cursorborder: "none"
                              });
                              $('#Section4').niceScroll({
                                    cursorcolor: "#03a9f4",
                                    cursorborder: "none"
                              });
                              $('#Section6').niceScroll({
                                    cursorcolor: "#03a9f4",
                                    cursorborder: "none"
                              });
                              $('#Section5').niceScroll({
                                    cursorcolor: "#03a9f4",
                                    cursorborder: "none"
                              });
                        }, 500);
                  });
            }
            var user_path = window.location.href.replace(baseurl, '');
            var arr_path = user_path.split('/');
            var search_user = arr_path[1];
            if (!search_user) $scope.retrieveFeedbackInfo();
            $users['my_performance_potencial_profile']().then(function(my_performance_potencial_profile) {
                  $scope.performance_potencial = my_performance_potencial_profile;
            });
            $scope.showMyPdi = function() {
                  $scope.activetab = 3;
            }
            $scope.showMyAtivadades = function() {
                  $scope.activetab = 2;
            }
            // default
            $scope.activetab = 1;
            $scope.showMyProfile = function() {
                  $scope.activetab = 1;
            }
            $("#feedbacktouser").select2({
                  maximumSelectionSize: 1,
                  minimumInputLength: 1
            });
            $("#requestuser").select2({
                  maximumSelectionSize: 1,
                  minimumInputLength: 1
            });
            $("#privateto").select2({
                  language: 'pt-BR',
                  maximumSelectionSize: 1,
                  minimumInputLength: 1
            });
            $tatics['getAllForProfile']().then(function(profiletatics) {
                  $scope.updateprofiletatics = profiletatics;
            });


            $scope.toggleEloToPublish = function(type) {
                  if (type == 'publish') $scope.eloIsNormalPost = true;
                  else $scope.eloIsNormalPost = false;
                  setTimeout(function(){$('#form-elo textarea').scrollTop($('#form-elo textarea')[0].scrollHeight - 28);}, 500);
            }

            $scope.plusEloPicture = function(index = 0) {
                  if (index < 0) index = 0;
                  if (!$scope.post_images) $scope.post_images = [{
                        type: "image"
                  }];
                  if (index > 2) return;
                  setTimeout(function() {
                        $("#postimage-" + index).trigger("click");
                        $("#postimage-" + index).change(function(event) {
                              if(event.target.files[0].size > 3000000){
                                    toastr.error("Tamanho da imagem não pode exceder 3mb!");
                                    return;
                              }

                              $scope.post_images[index].input = URL.createObjectURL(event.target.files[0]);
                              var obj = {
                                    type: "image"
                              };
                              $scope.post_images.push(obj);
                        });
                  }, 300);

            }

            $scope.questions_goals_array = [];
            $scope.newUpdate = function() {
                  $scope.questions_goals_array = [];
                  $users['get_questionerios_profile']('c').then(function(response) {
                        $scope.questions = response;
                        $timeout(function() {
                              $('.objectives_updates').select2();
                              $(".objectives_updates").change(function() {
                                    var tatic_id = $(this).val();
                                    if (tatic_id != "") {
                                          var question_id = $(this).data('question-id');
                                          var title = $(this).find("option:selected").text();
                                          if (typeof $scope.questions_goals_array[question_id] == "undefined") {
                                                $scope.questions_goals_array[question_id] = [];
                                          }
                                          var has_tatic = false;
                                          $.each($scope.questions_goals_array[question_id], function(key, goal_data) {
                                                if (goal_data.tatic_id == tatic_id) {
                                                      has_tatic = true;
                                                }
                                          });
                                          if (!has_tatic) {
                                                $scope.questions_goals_array[question_id].push({
                                                      tatic_id: tatic_id,
                                                      question_id: question_id,
                                                      title: title
                                                });
                                          }
                                    }
                              });
                        }, 100);
                  })
                  $('#newUpdateModal').modal('show', {
                        backdrop: 'static'
                  });
            }
            $scope.newUpdateManual = function() {
                  $scope.questions_goals_array = [];
                  $users['get_questionerios_profile']('c').then(function(response) {
                        $scope.questions = response;
                        $timeout(function() {
                              $('.objectives_updates').select2();
                              $(".objectives_updates").change(function() {
                                    var tatic_id = $(this).val();
                                    if (tatic_id != "") {
                                          var question_id = $(this).data('question-id');
                                          var title = $(this).find("option:selected").text();
                                          if (typeof $scope.questions_goals_array[question_id] == "undefined") {
                                                $scope.questions_goals_array[question_id] = [];
                                          }
                                          var has_tatic = false;
                                          $.each($scope.questions_goals_array[question_id], function(key, goal_data) {
                                                if (goal_data.tatic_id == tatic_id) {
                                                      has_tatic = true;
                                                }
                                          });
                                          if (!has_tatic) {
                                                $scope.questions_goals_array[question_id].push({
                                                      tatic_id: tatic_id,
                                                      question_id: question_id,
                                                      title: title
                                                });
                                          }
                                    }
                              });
                        }, 100);
                  })
            }
            $scope.newUpdateManual();
            $(document).on('click', '.veiew_child', function() {
                  // $('.userupdatesectoin').find(".shorts_bottoms").removeClass("expand_dv");
                  //$(this).parents('.userupdatesectoin').find(".shorts_bottoms").toggleClass("expand_dv");
                  if ($(this).find('i').hasClass('fa-angle-down')) {
                        $(this).find('i').removeClass('fa-angle-down');
                        $(this).find('i').addClass('fa-angle-up');
                  } else {
                        $(this).find('i').removeClass('fa-angle-up');
                        $(this).find('i').addClass('fa-angle-down');
                  }
            });
            $(document).on('click', ".heading1 .fa-angle-down", function(e) {
                  $(this).parents().find(".goal_data").removeClass('hide');
            });
            $(document).on('click', ".heading1 .fa-angle-up", function(e) {
                  $(this).parents().find(".goal_data").addClass('hide');
                  $(this).parents().find(".goal_data:lt(2)").removeClass('hide');
            });
            $scope.deletequestiongoal = function(tatic_id, question_id) {
                  if (typeof $scope.questions_goals_array[question_id] != "undefined") {
                        $.each($scope.questions_goals_array[question_id], function(key, goal_data) {
                              if (goal_data.tatic_id == tatic_id) {
                                    delete $scope.questions_goals_array[question_id].splice(key, 1);
                              }
                        });
                  }
            }
            $scope.submitNewUpdate = function() {
                  $('#new_update .salvar').button('loading');
                  var $data = $("#new_update").serialize();
                  $users['save_user_update_profile']($data).then(function(response) {
                        $('#new_update')[0].reset();
                        $('#new_update .salvar').button('reset');
                        $('#newUpdateModal').modal('hide');
                        toastr.success('Adicionado com sucesso.');
                        $users['get_user_updates']().then(function(get_user_updates) {
                              $scope.user_updates = get_user_updates;
                        });
                  });
                  $scope.showOnlyBanner();
            }
            $scope.counters_value = 1;
            $scope.show_all_comments = function($length, $show_id) {
                  $('#' + $show_id).show();
                  $scope.counters_value = $length;
            }
            $scope.hide_all_comments = function($length, $hide_id) {
                  $('#' + $hide_id).hide();
                  $scope.counters_value = 1;
            }
            $scope.add_skill = function() {
                  $skills['getbycompany']().then(function(response) {
                        $scope.$parent.skills = response;
                        $scope.skilloptions = [{
                              id: 'option1'
                        }];
                        $timeout(function() {
                              var skillNames = new Bloodhound({
                                    datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                                    local: response
                              });
                              skillNames.initialize();
                              $('.input-skills').tagsinput({
                                    typeaheadjs: {
                                          name: 'tagnames',
                                          displayKey: 'name',
                                          valueKey: 'name',
                                          source: skillNames.ttAdapter()
                                    },
                                    maxTags: 1
                              });
                              $(".tt-input").on('keyup keypress', function(e) {
                                    var keyCode = e.keyCode || e.which;
                                    if (keyCode === 13) {
                                          $(this).val();
                                    }
                              });
                              $('#form-add-skills').on('keyup keypress', function(e) {
                                    var keyCode = e.keyCode || e.which;
                                    if (keyCode === 13) {
                                          e.preventDefault();
                                          return false;
                                    }
                              });
                              $('.input-skills').on('itemAdded', function(event) {
                                    var skill = event.item;
                              });
                              $(document).on('click', "label.btn.btn-success.btn-success-act.skills", function() {
                                    $(this).parents(".avaliacao-panel").find("label.btn.btn-success.btn-success-act.skills").removeClass('active');
                                    $(this).toggleClass('active');
                              });
                        }, 10);
                  });
                  $('#modal-add-skills').modal('show', {
                        backdrop: 'static'
                  });
            }
            $scope.add_new_skill_option = function() {
                  var newItemNo = $scope.skilloptions.length + 1;
                  $scope.skilloptions.push({
                        'id': 'option' + newItemNo
                  });
                  $timeout(function() {
                        var skillNames = new Bloodhound({
                              datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                              queryTokenizer: Bloodhound.tokenizers.whitespace,
                              local: $scope.$parent.skills
                        });
                        skillNames.initialize();
                        $('.input-skills').tagsinput({
                              typeaheadjs: {
                                    name: 'tagnames',
                                    displayKey: 'name',
                                    valueKey: 'name',
                                    source: skillNames.ttAdapter()
                              },
                              maxTags: 1
                        });
                        $('#form-add-skills').on('keyup keypress', function(e) {
                              var keyCode = e.keyCode || e.which;
                              if (keyCode === 13) {
                                    e.preventDefault();
                                    return false;
                              }
                        });
                        $('.input-skills').on('itemAdded', function(event) {
                              var skill = event.item;
                        });
                  }, 100);
            }
            $scope.removeSkill = function() {
                  var lastItem = $scope.skilloptions.length - 1;
                  $scope.skilloptions.splice(lastItem);
            }
            $scope.viewValuesempresa = function() {
                  $('#SolicitarModal').modal('hide');
                  $timeout(function() {
                        $('#modal-valores').modal('show', {
                              backdrop: 'static'
                        });
                  }, 500);
            }
            $scope.showSolicitor = function() {
                  $('#modal-valores').modal('hide');
                  $timeout(function() {
                        $('#SolicitarModal').modal('show', {
                              backdrop: 'static'
                        });
                  }, 500);
            }
            $('#form-add-skills').validate({
                  // ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        // simple rule, converted to {required:true}
                        'new_skill[]': {
                              required: true,
                              minlength: 1
                        },
                        'geral[]': {
                              required: true,
                              minlength: 1
                        }
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  submitHandler: function(form) {
                        var $form_data = $('#form-add-skills').serialize();
                        $skills['addnewskills']($form_data).then(function(newskills) {
                              $users['myCompencias']().then(function(myCompencias) {
                                    $scope.comencias = myCompencias;
                              });
                              $('.input-skills').tagsinput('removeAll');
                              $('.input-skills').tagsinput('destroy');
                              $('#form-add-skills')[0].reset();
                              $('#form-add-skills .salvar').button('reset');
                              $('#modal-add-skills').modal('hide');
                        });
                  }
            });
            $scope.toDoYellow = function(activity_id) {
                  $scope.toDo = 0;
                  $scope.atraso = 0;
                  $users['update_todo_profile'](activity_id, $scope.toDo, $scope.atraso).then(function(updatetodo) {
                        $users['profileacivities']().then(function(profileacivities) {
                              $scope.results.activities = profileacivities.activities;
                              $scope.myactivities = profileacivities.activities;
                              $scope.results.keys = profileacivities.keys;
                        });
                  });
            };
            $scope.toDoBlue = function(activity_id) {
                  $scope.toDo = 50;
                  $scope.atraso = 0;
                  $users['update_todo_profile'](activity_id, $scope.toDo, $scope.atraso).then(function(updatetodo) {
                        $users['profileacivities']().then(function(profileacivities) {
                              $scope.results.activities = profileacivities.activities;
                              $scope.myactivities = profileacivities.activities;
                              $scope.results.keys = profileacivities.keys;
                        });
                  });
            };
            $scope.toDoGreen = function(activity_id) {
                  $('#complete-activity-modal').modal("show");
                  $("#completeActivity").click(function() {
                        $scope.toDo = 100;
                        $scope.atraso = 0;
                        $users['update_todo_profile'](activity_id, $scope.toDo, $scope.atraso).then(function(updatetodo) {
                              toastr.success('Salvo com sucesso!');
                              $timeout(function() {
                                    $users['profileacivities']().then(function(profileacivities) {
                                          $scope.results.activities = profileacivities.activities;
                                          $scope.myactivities = profileacivities.activities;
                                          $scope.results.keys = profileacivities.keys;
                                    });
                                    $('#complete-activity-modal').modal("hide");
                              }, 100);
                        });
                  });
            };
            $scope.toDoRed = function(activity_id) {
                  $scope.toDo = 50;
                  $scope.atraso = 1;
                  $users['update_todo_profile'](activity_id, $scope.toDo, $scope.atraso).then(function(updatetodo) {
                        $users['profileacivities']().then(function(profileacivities) {
                              $scope.results.activities = profileacivities.activities;
                              $scope.myactivities = profileacivities.activities;
                              $scope.results.keys = profileacivities.keys;
                        });
                  });
            };
            $scope.dismiss_activity = function(activity_id) {
                  $('#dismiss-activity-modal').modal("show");
                  $("#dismissActivity").click(function() {
                        $users['dismissActivity'](activity_id).then(function(response) {
                              toastr.success('Atividade removida com sucesso!');
                              $timeout(function() {
                                    $users['profileacivities']().then(function(profileacivities) {
                                          $scope.results.activities = profileacivities.activities;
                                          $scope.myactivities = profileacivities.activities;
                                    });
                                    $('#dismiss-activity-modal').modal("hide");
                              }, 100);
                        });
                  });
            };
            $('#give_feedback').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
                  rules: {
                        feedbacktouser: 'required',
                        feedback_given: 'required'
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  submitHandler: function() {}
            });
            /* $('#results a').click(function(e) {
             e.preventDefault();
             $(this).tab('show');
             });
             $(document).on('click', '.veiew', function() {
             // $('.userupdatesectoin').find(".shorts_bottoms").removeClass("expand_dv");
             $(this).parents('.userupdatesectoin').find(".shorts_bottoms").toggleClass("expand_dv");
             if ($(this).find('i').hasClass('fa-chevron-down')) {
             $(this).find('i').removeClass('fa-chevron-down');
             $(this).find('i').addClass('fa-chevron-up');
             } else {
             $(this).find('i').removeClass('fa-chevron-up');
             $(this).find('i').addClass('fa-chevron-down');
             }
             });
             
             $(document).on('keypress', "[id^='team_comment_']", function(e) {
             var keyCode = e.keyCode || e.which;
             if (keyCode === 13) {
             var answer_id = $(this).attr('id').replace('team_comment_', '');
             $scope.submitComment(answer_id);
             }
             });
             $(document).on('click', ".see_more_comments", function(e) {
             $(this).parent().find(".comment_data").toggleClass('hide');
             $(this).find('a').toggleClass('hidemore');
             if ($(this).find('a').hasClass('hidemore')) {
             $(this).find('a').text('Hide more comments');
             } else {
             $(this).find('a').text('See more comments');
             }
             }); */
            //show update data
            $scope.showupdate = function($id_protocolo) {
                  $users['get_user_update_by_id']($id_protocolo).then(function(questions) {
                        $scope.questions = questions;
                  });
                  $('#viewupdate').modal('show', {
                        backdrop: 'static'
                  });
            }
            // change update status
            $scope.updatestatus = function($event, $id_protocolo) {
                  var $status = $($event.currentTarget).find('input').is(":checked");
                  $timeout(function() {
                        $users['checkin_status_update_by_id']($id_protocolo, $status).then(function(questions) {});
                  }, 100);
            }
            // comment on an answer
            $scope.submitComment = function(answer_id) {
                  var $comment = $("#team_comment_" + answer_id).val();
                  if ($comment == "") {
                        toastr.error('Escreva um comentário.');
                        return false;
                  }
                  $users['save_user_comment'](answer_id, $comment).then(function(response) {
                        $("#team_comment_" + answer_id).val('');
                        toastr.success('Adicionado com sucesso');
                        if ($scope.myteams.length > 0) {
                              $.each($scope.myteams, function(index1, team) {
                                    if (team.updates.length > 0) {
                                          $.each(team.updates, function(index2, update) {
                                                if (update.questions.length > 0) {
                                                      $.each(update.questions, function(index3, question) {
                                                            if (question.answers.length > 0) {
                                                                  $.each(question.answers, function(index4, answer) {
                                                                        if (answer.id == answer_id) {
                                                                              $scope.myteams[index1]['updates'][index2]['questions'][index3]['answers'][index4]['comments'] = response;
                                                                        }
                                                                  });
                                                            }
                                                      });
                                                }
                                          });
                                    }
                              });
                        }
                  });
            }
            // delete a comment on an answer
            $scope.deletecomment = function(comment_id) {
                  $users['delete_comment'](comment_id).then(function(response) {
                        toastr.success('Inativada com sucesso.');
                  });
            }
            $scope.showupdate = function($id_protocolo) {
                  $users['get_user_update_by_id']($id_protocolo).then(function(questions) {
                        $scope.questions = questions;
                  });
                  $users['get_privacy_and_review_status']($id_protocolo).then(function(response) {
                        $scope.review_privacy_status = response;
                        if (response.publico == 1) {
                              $('#visiblitypublic_prfil').prop('checked', true);
                        } else {
                              $('#visiblityprivate_prfil').prop('checked', true);
                        }
                        if (response.situation == 1) {
                              $('#reviewed_status').prop('checked', true);
                        } else {
                              $('#reviewed_status').prop('checked', false);
                        }
                  });
                  $('#viewupdate').modal('show', {
                        backdrop: 'static'
                  });
            }
            $empressa['getallvalores']().then(function(response) {
                  $scope.valores = response;
            });
            $users['get_user_updates']().then(function(get_user_updates) {
                  $scope.user_updates = get_user_updates;
            });
            var data = {
                  year: $scope.selectedYear,
                  cycle: $scope.selectedCycle
            }
            $users['profile'](data).then(function(response) {
                  $scope.results = response;
                  // 2-11-2017 end //
                  $timeout(function() {
                        $("span.pie").peity("pie");
                  });
            });
            //$scope.DeactivePdi = function(objectivo_id,active){
            //$tatics['deactive_objectivo'](objectivo_id,active).then(function(results){
            //var data = {
            //year: $scope.selectedYear,
            //cycle: $scope.selectedCycle
            //}
            //$users['profile'](data).then(function(response){
            //$scope.results = response;
            //$users['myCompencias']().then(function(myCompencias){
            //$scope.comencias  = myCompencias;
            //});
            //});
            //});
            //toastr.success('Pdi successfully deleted');
            //}
            $scope.filter = function() {
                  data = {
                        year: $scope.selectedYear,
                        cycle: $scope.selectedCycle
                  };
                  $('.btnFilter').button('loading');
                  $users['profile'](data).then(function(response) {
                        $scope.results = response;
                        $('.btnFilter').button('reset');
                        $timeout(function() {
                              $("span.pie").peity("pie");
                        }, 10);
                  });
            }
            if ($.isFunction($.fn.datepicker)) {
                  $(".data").each(function(i, el) {
                        var $this = $(this),
                              opts = {
                                    format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                                    startDate: attrDefault($this, 'startDate', ''),
                                    endDate: attrDefault($this, 'endDate', ''),
                                    daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                                    startView: attrDefault($this, 'startView', 0),
                                    language: 'pt-BR',
                                    rtl: rtl()
                              },
                              $n = $this.next(),
                              $p = $this.prev();
                        $this.datepicker(opts);
                        if ($n.is('.input-group-addon') && $n.has('a')) {
                              $n.on('click', function(ev) {
                                    ev.preventDefault();
                                    $this.datepicker('show');
                              });
                        }
                        if ($p.is('.input-group-addon') && $p.has('a')) {
                              $p.on('click', function(ev) {
                                    ev.preventDefault();
                                    $this.datepicker('show');
                              });
                        }
                  });
            }
            $scope.modalUser = function() {
                  $scope.user_id = $scope.user.id;
                  $scope.userDetail = false;
                  $scope.userDetailStatus = true;
                  $scope.userDetailImage = '';
                  $('#user-image').val('');
                  $('#descricao_bio').emojiInit({
                        fontSize: 20,
                        success: function(data) {},
                        error: function(data, msg) {}
                  });
                  $('#form-user .error-message').addClass('hide');
                  if ($scope.userValidation) {
                        $scope.userValidation.resetForm();
                        $('.validate-has-error').each(function() {
                              $(this).removeClass('validate-has-error');
                        });
                  }
                  $scope.userDetailImage = false;
                  $('#user-image').change(function(event) {
                        var tmppath = URL.createObjectURL(event.target.files[0]);
                        $timeout(function() {
                              $scope.userDetailImage = tmppath;
                        });
                  });
                  $users['details']($scope.user_id).then(function(response) {
                        $scope.userDetail = response;
                        $scope.userDetailImage = $scope.userDetail.image;
                        $timeout(function() {
                              $scope.userGestorPerfil = $scope.userDetail.id_gestor;
                              $('#modal-user').modal('show', {
                                    backdrop: 'static'
                              });
                        }, 500);
                  });
            }
            $scope.userValidation = $('#form-user').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        nome: 'required',
                        imagem: {
                              required: function() {
                                    return $('#user-image').val() ? true : false;
                              },
                              extension: "png|jpe?g|gif"
                        }
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                        if ($(element).is('#user-image')) {
                              $('#user-image').parent().find('p').remove();
                        };
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                        if ($(element).is('#user-image') && $(element).parent().hasClass('validate-has-error') && $(element).parent().find('p').length == 0) {
                              $('#user-image').parent().append('<p class="text-danger">Por favor insira uma imagem.</p>')
                        };
                  },
                  invalidHandler: function() {
                        $('#form-user .error-message').removeClass('hide');
                  },
                  submitHandler: function(form) {
                        $('#form-user .error-message').addClass('hide');
                        $('#form-user .salvar').button('loading');
                        var imageInput = $('#user-image'),
                              files = imageInput[0].files;
                        var data = {
                              id: $scope.user.id,
                              nome: $('#user-name').val(),
                              nascimento: $('#user-birthday').val(),
                              dismissal: $('#user-dismissal').val(),
                              imagem: files ? files[0] : '',
                              //team: $scope.user.usuarioviewTime.id_time,
                              //gestor: $scope.user.id_gestor,
                              //email: $scope.user.email,
                        }
                        var method = 'insert';
                        if ($scope.user_id) {
                              method = 'edit';
                              data.id = $scope.user_id;
                        }
                        // else {
                        //     data.email = $('#user-email').val()
                        // }
                        data.descricao_bio = $('#descricao_bio').val();
                        if (data.descricao_bio == '') data.descricao_bio = null;
                        $scope.form = new FormData();
                        $.each(data, function(key, value) {
                              $scope.form.append(key, value);
                        });
                        $users['edit']($scope.form).then(function(response) {
                              $scope.notifications = [];
                              clearInterval($scope.notificationInterval);
                              setTimeout($scope.updateNotifications, 1000);
                              $scope.notificationInterval = setInterval($scope.updateNotifications, 60000);
                              $scope.$parent.user.active = response.active;
                              $scope.$parent.user.admin = response.admin;
                              $scope.$parent.user.appraiser = response.appraiser;
                              $scope.$parent.user.xs_image = response.xs_image;
                              $scope.$parent.user.md_image = response.md_image;
                              $scope.$parent.user.image = response.image;
                              $scope.$parent.user.name = response.name;
                              $scope.$parent.user.birthday = response.birthday;
                              $scope.$parent.user.dismissal = response.dismissal;
                              $('#form-user .salvar').button('reset');
                              $('#form-user')[0].reset();
                              $('#modal-user').modal('hide');
                              toastr.success('Perfil atualizado com sucesso');
                              $users['me']().then(function(response) {
                                    $scope.user = response;
                                    $translate.use($scope.user.id_idioma);
                              });
                        });
                  }
            });
            $scope.changeUserPassword = function() {
                  $scope.user_id = $scope.user.id;
                  $('#form-user-password .error-message').addClass('hide');
                  if ($scope.userPasswordValidation) {
                        $scope.userPasswordValidation.resetForm();
                        $('.validate-has-error').each(function() {
                              $(this).removeClass('validate-has-error');
                        });
                  }
            }
            $scope.userPasswordValidation = $('#form-user-password').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        current_password: 'required',
                        new_password: 'required',
                        confirm_password: {
                              equalTo: "#new_password"
                        }
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#form-user .error-message').removeClass('hide');
                  },
                  submitHandler: function(form) {
                        $('#form-user-password .error-message').addClass('hide');
                        $('#form-user-password .salvar').button('loading');
                        var data = {
                              id: $scope.user.id,
                              current_password: $('#current_password').val(),
                              new_password: $('#new_password').val(),
                        }
                        $users['change_user_password'](data).then(function(response) {
                              if (response.error == false) {
                                    toastr.success('Senha atualizada com sucesso');
                                    $('#form-user-password')[0].reset();
                                    $('#modal-user').modal('hide');
                              } else {
                                    toastr.error('Senha atual inválida');
                              }
                        });
                  }
            });
      });
      /* feedback comment view */
      $scope.showHideFeedbackComments = function(feedback) {
            if (feedback.showFeedbackComments) {
                  feedback.comments = [];
                  feedback.showFeedbackComments = 0;
            } else {
                  $feedbacks['getFeedbackComments'](feedback.id).then(function(response) {
                        feedback.comments = response;
                  });
                  feedback.showFeedbackComments = 1;
            }
      }
      $scope.showFeedbackCommentReply = function(feedback) {
            if (feedback.showFeedbackCommentReply) {
                  feedback.showFeedbackCommentReply = 0;
            } else {
                  feedback.showFeedbackCommentReply = 1;
            }
      }
      $scope.addFeedbackComment = function(feedback) {
            var commentText = $('#feedback_comment_' + feedback.id).val();
            if (!commentText.length || commentText == '') {
                  return;
            }
            $feedbacks['addFeedbackComment'](feedback.id, commentText, feedback.user).then(function(response) {
                  $('#feedback_comment_' + feedback.id).val('');
                  var fedComment = {};
                  fedComment.commentid = response;
                  fedComment.feedbackid = feedback.id;
                  fedComment.comentario = commentText;
                  fedComment.commentdate = '0 min(s)';
                  fedComment.id_usuario = $scope.user.id;
                  fedComment.nome_usuario = $scope.user.name;
                  fedComment.url_image = $scope.userDetailImage ? $scope.userDetailImage : $scope.user.md_image;
                  feedback.comments.unshift(fedComment);
                  feedback.counts++;
            });
      }
      // setTimeout(function (){ $('#birthday_notification_elo_card').animate({height: "toggle", opacity: "toggle"}, 300);}, 10000);
      $scope.clickOnBirthdayNotification = function(){
            $('#birthday_notification_elo_card').animate({height: "toggle", opacity: "toggle"}, 300);
            $scope.change_timeline_mode('feed', 5);
      }
      $scope.clickOnEloNotification = function(e, tipo, jqId){
            $('#'+jqId).animate({height: "toggle", opacity: "toggle"}, 300);
            setTimeout(function(){$scope.change_timeline_mode('feed', tipo)}, 300);
      }
      $scope.clickOnLikeNotification = function(e){
            e.stopPropagation();
            $(e.currentTarget).parent().animate({height: "toggle", opacity: "toggle"}, 300);
            setTimeout(function(){$scope.change_timeline_mode('feed', 0)}, 300);
      }
      $scope.marcarOkrAprovadoComoLido = function(idUsuarioLogado){
            console.log('Chamar Service e atualizar para o usuário logado2: ',idUsuarioLogado);
            $.ajax({
                  url: baseurl + 'marcarOkrAprovadoComoLido',
                  method: 'POST',
                  dataType: 'json',
                  data: {
                        id: idUsuarioLogado
                  },
                  error: function() {},
                  success: function(response) {
                        resp.resolve(response);
                  }
            });
      }
      $scope.marcarOkrReprovadoComoLido = function(idUsuarioLogado){
            console.log('Chamar Service e atualizar para o usuário logado: ',idUsuarioLogado);
            $.ajax({
                  url: baseurl + 'marcarOkrReprovadoComoLido',
                  method: 'POST',
                  dataType: 'json',
                  data: {
                        id: idUsuarioLogado
                  },
                  error: function() {},
                  success: function(response) {
                        resp.resolve(response);
                  }
            });
      }

      $scope.updateFeedbackNotification = function(notification) {
            $users['read_feedback_notification']().then(function(response) {
                  var scrollingElement = (document.scrollingElement || document.body);
                  $(scrollingElement).animate({
                        scrollTop: $('#Section1').parent().offset().top - 120
                  }, 500);
                  $scope.removeSectionClass();
                  $('#Section1').addClass('active');
                  $('#Section1').addClass('in');
                  $('#section1_link').addClass('active');
                  $scope.feedback_reply_notification = [];
                  $scope.feedback_notification = [];
            });
      }
      $scope.updateFeedbackReplyNotification = function(notification) {
            $users['read_feedback_reply_notification']().then(function(response) {
                  var scrollingElement = (document.scrollingElement || document.body);
                  $(scrollingElement).animate({
                        scrollTop: $('#Section1').parent().offset().top - 120
                  }, 500);
                  $scope.removeSectionClass();
                  $('#Section2').addClass('active');
                  $('#Section2').addClass('in');
                  $('#section2_link').addClass('active');
                  $scope.feedback_reply_notification = [];
            });
      }
      $scope.testScroll = function() {
            var scrollingElement = (document.scrollingElement || document.body);
            $(scrollingElement).animate({
                  scrollTop: $('#Section1').parent().offset().top - 120
            }, 500);
            $scope.removeSectionClass();
            $('#Section2').addClass('active');
            $('#Section2').addClass('in');
            $('#section2_link').addClass('active');
      }
      $scope.removeSectionClass = function() {
            $('#Section1').removeClass('active');
            $('#Section1').removeClass('in');
            $('#section1_link').removeClass('active');
            $('#Section2').removeClass('active');
            $('#Section2').removeClass('in');
            $('#section2_link').removeClass('active');
            $('#Section3').removeClass('active');
            $('#Section3').removeClass('in');
            $('#section3_link').removeClass('active');
      }
      /* feedback comment view end */
      $scope.openCourselModal = function(images, index) {
            $scope.feedImagesForCoursel = images;
            $scope.selectedFeedCourselIndex = index;
            $timeout(function() {
                  $('#feed-coursel').modal('show', {
                        backdrop: 'static'
                  });
            }, 100);
      }

      $scope.deleteFeed = function(elo) {
            $('#feed-delete').modal('show', {
                  backdrop: 'static'
            });
            $('#deleteFeedAction').click(function() {
                  $elos['deleteFeed'](elo.id).then(function(response) {
                        toastr.success('Feed eliminado.');
                        $('#feed-delete').modal('hide');
                        $scope.change_timeline_mode('feed');
                  });
            });
      }

      $scope.editFeed = function(elo) {
            $scope.editingFeed = elo;
            $('#descricao_elogio').val(elo.descricao_elogio);
            $('#feed-edit').modal('show', {
                  backdrop: 'static'
            });
      }

      $scope.edit_feed_action = function() {
            if ($('#descricao_elogio').val() == "") {
                  $('#descricao_elogio').addClass("error");
                  toastr.error("Seu post está vazio, crie uma mensagem");
                  return;
            }
            $('#descricao_elogio').mentionsInput('getMentions', function(data) {
                  var elogio = new FormData();
                  elogio.append('description', $('#descricao_elogio').val());
                  elogio.append('mencoes', JSON.stringify(data));
                  elogio.append('id', $scope.editingFeed.id);
                  $elos['editFeed'](elogio).then(function(response) {
                        $('#descricao_elogio').val('');
                        $('#descricao_elogio').mentionsInput('reset');
                        toastr.success('Feed editado.');
                        $('#feed-edit').modal('hide');
                        $scope.editingFeed = null;
                        $scope.change_timeline_mode('feed');
                        $('#descricao_elogio').removeClass("error");
                  });
            });
            return;
            var description = $('#descricao_elogio').val();
            $elos['editFeed']($scope.editingFeed.id, description).then(function(response) {
                  toastr.success('Feed editado.');
                  $('#feed-edit').modal('hide');
                  $scope.editingFeed = null;
                  $scope.change_timeline_mode('feed');
            });
            
      }
});

elofy.controller('activityCtrl', function globalCtrl($scope, $timeout, $users, $teams, $globals, $filter, $activities, $mydashboard) {
      $scope.listType = 0;
      $scope.detailResponsavel = new Array();
      $scope.selectedYear = new Date().getFullYear();
      $scope.showNewFlag = false;

      if (window.location.href.includes('atividades')) {
            $scope.$watch('user', function(newValue, oldValue) {
                  if (typeof newValue.empresa != 'undefined') {
                        $scope.activitiesTab(0);
                  }
            });
      }
      
      //----activity test----//
      $scope.responsavelsNotAddedSelected = [];
      $scope.responsavelsNotAdded = [];
      $scope.showFinalized = false;
      $scope.params = {
            responsavels: '',
            team: '',
            cycle: ''
      };
      $users['get']().then(function(response) {
            $scope.responibles = response;
            $scope.responsavelsNotAdded = JSON.parse(JSON.stringify(response));
            setTimeout(function() {
                  $.each($scope.responsavelsNotAdded, function(i) {
                        if ($scope.responsavelsNotAdded[i].id == $scope.user.id) {
                              var spliced = $scope.responsavelsNotAdded.splice(i, 1)[0];
                              $scope.responsavelsNotAddedSelected.push(spliced);
                              $('#fresponsavel').select2("val", $scope.user.id);
                              return false;
                        }
                  });
            }, 1000);
      });
      //--add filters--//
      if (!$scope.selectedYear) {
            $scope.selectedYear = new Date().getFullYear();
      }
      $mydashboard['getAllCurrentCycles']($scope.selectedYear).then(function(res) {
            $scope.fcycles = res;
            $timeout(function() {
                  $('#selectedCiclo').select2('val', '');
            }, 10);
      });
      $timeout(function() {
            $('#select_time').addClass('visible');
            $('#select_time').selectBoxIt();
            $('#select_time').val('all');
            $scope.slectedTime = 'all';
            $('#select_time').trigger("change");
      }, 500);
      $teams['getAllTeams']().then(function(teams) {
            $scope.filter_teams = teams;
      });
      $('#selectedCiclo').change(function() {
            console.log("cycle change:", $('#selectedCiclo').val());
      });
      $('#selectedTime').change(function() {

      });
      $('#fresponsavel').change(function(e) {
            $.each($scope.responsavelsNotAdded, function(i) {
                  if ($scope.responsavelsNotAdded[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.responsavelsNotAdded.splice(i, 1)[0];
                        $scope.responsavelsNotAddedSelected.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedResponsavel = function(ur, justRemove = true) {
            console.log(ur);
            $.each($scope.responsavelsNotAddedSelected, function(i) {
                  if ($scope.responsavelsNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.responsavelsNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.responsavelsNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeResponsavelAndRefresh = function(ur) {
            $('#form-teams-side .select2').select2("val", "");
            $scope.removeAddedResponsavel(ur);
      };
      $scope.changeShowFinalized = function() {
            $scope.showFinalized = !$scope.showFinalized;
      }
      $scope.applyFilterActivity = function() {
            $scope.params.cycle = $('#selectedCiclo').val();
            $scope.params.team = $('#selectedTime').val();
            $scope.params.responsavels = [];
            $('.responsaveldropdown input[name^="corresponsaveis"]').each(function() {
                  $scope.params.responsavels.push($(this).val());
            });
            $scope.params.filter_time = $('#select_time').val();
            console.log("filtered:", $scope.params);
            $scope.activitiesTab(1);
      }
      $scope.clearFilterActivity = function() {
            $('#selectedCiclo').select2("val", "");
            $('#selectedTime').select2("val", "");
            $('#fresponsavel').select2("val", "");
            $timeout(function() {
                  $('#select_time').val('all');
                  $scope.slectedTime = 'all';
                  $('#select_time').trigger("change");
            }, 10);
            $scope.responsavelsNotAddedSelected = [];
            $scope.responsavelsNotAdded = JSON.parse(JSON.stringify($scope.responibles));
            $scope.showFinalized = false;
            $scope.params = {
                  responsavels: '',
                  team: '',
                  cycle: '',
                  filter_time: 'all'
            };
            console.log("cleared:", $scope.params);
            $scope.activitiesTab(0);
      }
      //--add filters end--//
      $scope.activitiesTab = function($filter) {
            $scope.filter = $filter;
            $scope.profiletab = 6;
            $scope.refreshListContent();
      };
      $scope.setNewFimToArray = function(arrOriginal) {
            angular.forEach(arrOriginal, function(result, key) {
                  result.newfim = $scope.changeFimFormat(result.fim);
                  result.isPassed = $scope.isPassed(result.fim);
            });
      }
      $scope.removeNullActivity = function(arrOriginal) {
            for (var i = 0; i < arrOriginal.length - 1; i++) {
                  if (!arrOriginal[i].id) {
                        arrOriginal.splice(i, 1);
                        i--;
                  }
            }
      }
      $scope.setShowStatusToArray = function(arrOriginal) {
            angular.forEach(arrOriginal, function(result, key) {
                  result.showComFlag = false;
                  result.showDetFlag = false;
            });
      }
      $scope.setOrderNumList = function(arrAcitivity) {
            var orderNum = 0;
            for (var i = 0; i < arrAcitivity.length; i++) {
                  angular.forEach(arrAcitivity[i], function(item, key) {
                        item.order = orderNum;
                        $scope.detailResponsavel[orderNum] = 0;
                        orderNum++;
                  });
            }
      }
      $scope.divideListBySituation = function(activityList) {
            var listProgress = [];
            var listNotStarted = [];
            var listDelayed = [];
            var listFinished = [];
            angular.forEach(activityList, function(item, key) {
                  if (item.situacao == 2 && item.atraso != 1) listProgress.push(item);
                  if (item.situacao == 0) listNotStarted.push(item);
                  if (item.situacao == 2 && item.atraso == 1) listDelayed.push(item);
                  if (item.situacao == 1 || item.situacao == 3) listFinished.push(item);
            });
            var activity_list = [];
            activity_list.push(listProgress);
            activity_list.push(listNotStarted);
            activity_list.push(listDelayed);
            activity_list.push(listFinished);
            return activity_list;
      }
      $scope.createHierarchy = function(arrList) {
            var arrOriginal = JSON.parse(JSON.stringify(arrList));
            $scope.objectives = []; //objective select
            var arrHierarchy = [];
            var objId = 0;
            var objName = "";
            var objPercentage = 0;
            var objActNum = 0;
            var objKeys = [];
            var selectedObjKeys = []; //objective select
            if (arrOriginal.length) {
                  objId = arrOriginal[0].id_objetivo;
                  objName = arrOriginal[0].nome;
                  var keyresult_id = arrOriginal[0].id_key_result;
                  var key_name = arrOriginal[0].nomeRChave;
                  var keyPercentage = 0;
                  var keyActNum = 0;
                  var keyActs = [];
                  angular.forEach(arrOriginal, function(result, key) {
                        // if (!result.id_key_result) { return; }
                        if (result.id_key_result != keyresult_id) {
                              if (keyActNum) {
                                    keyPercentage = parseInt(keyPercentage / keyActNum);
                              }
                              var keyVal = {
                                    "id_key_result": keyresult_id,
                                    "key_name": key_name,
                                    "keyPercent": keyPercentage,
                                    "activities": keyActs,
                                    "keyActNum": keyActNum,
                                    "showKey": false
                              };
                              objKeys.push(keyVal);
                              //objective select
                              var keyValue = {
                                    "id": keyresult_id,
                                    "nome": key_name
                              };
                              selectedObjKeys.push(keyValue);
                              keyresult_id = result.id_key_result;
                              key_name = result.nomeRChave;
                              keyPercentage = 0;
                              keyActNum = 0;
                              keyActs = [];
                        }
                        keyPercentage += (result.percentage) ? parseInt(result.percentage) : 0;
                        if (result.id) {
                              keyActNum++;
                        }
                        keyActs.push(result);
                        if (result.id_objetivo != objId) {
                              objPercentage = parseInt(objPercentage / objActNum);
                              var value = {
                                    "objId": objId,
                                    "objName": objName,
                                    "objPercent": objPercentage,
                                    "objActNum": objActNum,
                                    "keys": objKeys,
                                    "objKeyNum": objKeys.length,
                                    "showObj": false
                              };
                              arrHierarchy.push(value);
                              //objective select
                              var objValue = {
                                    "id": objId,
                                    "nome": objName,
                                    "keys": selectedObjKeys
                              };
                              $scope.objectives.push(objValue);
                              selectedObjKeys = [];
                              objId = result.id_objetivo;
                              objName = result.nome;
                              objPercentage = 0;
                              objActNum = 0;
                              objKeys = [];
                        }
                        objPercentage += (result.percentage) ? parseInt(result.percentage) : 0;
                        objActNum++;
                  });
                  if (keyActNum) {
                        keyPercentage = parseInt(keyPercentage / keyActNum);
                  }
                  var keyVal = {
                        "id_key_result": keyresult_id,
                        "key_name": key_name,
                        "keyPercent": keyPercentage,
                        "activities": keyActs,
                        "keyActNum": keyActNum,
                        "showKey": false
                  };
                  objKeys.push(keyVal);
                  //objective select
                  var keyValue = {
                        "id": keyresult_id,
                        "nome": key_name
                  };
                  selectedObjKeys.push(keyValue);
                  objPercentage = parseInt(objPercentage / objActNum);
                  var value = {
                        "objId": objId,
                        "objName": objName,
                        "percent": objPercentage,
                        "objActNum": objActNum,
                        "keys": objKeys,
                        "objKeyNum": objKeys.length,
                        "showObj": false
                  };
                  arrHierarchy.push(value);
                  //objective select
                  var objValue = {
                        "id": objId,
                        "nome": objName,
                        "keys": selectedObjKeys
                  };
                  $scope.objectives.push(objValue);
            }
            var orderNum = 0;
            angular.forEach(arrHierarchy, function(result, key) {
                  angular.forEach(result.keys, function(result1, key1) {
                        result1.activities = $scope.divideListBySituation(result1.activities);
                        for (var i = 0; i < result1.activities.length; i++) {
                              angular.forEach(result1.activities[i], function(item, key2) {
                                    item.order = orderNum;
                                    $scope.detailResponsavel[orderNum] = 0;
                                    orderNum++;
                              });
                        }
                  });
            });
            return arrHierarchy;
      }
      $scope.refreshListContent = function(activity_id) {
            var objid = 0;
            $users['get_activities_hierarchy']($scope.user.id, $scope.filter, $scope.params).then(function(activities) {
                  $scope.activity_list = [];
                  $scope.listFinished = [];
                  $scope.activities_hierarchy = [];
                  $scope.validateImage(activities);
                  $scope.setNewFimToArray(activities);
                  $scope.setShowStatusToArray(activities);
                  //hierarchy
                  $scope.activities_hierarchy = $scope.createHierarchy(activities);
                  if ($scope.listType == 2) {
                        angular.forEach($scope.activities_hierarchy, function(result, key) {
                              result.showObj = true;
                        });
                  }

                  //list
                  $scope.removeNullActivity(activities);
                  var activity_list = $scope.divideListBySituation(activities);
                  $scope.listFinished = activity_list[3];
                  activity_list.splice(3, 1);
                  $scope.setOrderNumList(activity_list);
                  $scope.activities_list = activity_list;
                  console.log("objectives:", $scope.objectives);
                  if (activity_id) {
                        console.log("open hierarchy status:", activity_id);
                        $scope.openHierarchyStatus(activity_id);
                  }
            });
      }
      $scope.openObjetivo = function(hierarchy) {
            hierarchy.showObj = !hierarchy.showObj;
      }
      $scope.openKeyResults = function(keyresult) {
            keyresult.showKey = !keyresult.showKey;
      }
      $scope.listActivities = function() {
            $scope.listType = 0;
            $scope.refreshListContent();
      }
      $scope.listHierarchy = function() {
            $scope.listType = 1;
            $scope.refreshListContent();
      }
      $scope.listKeyResults = function() {
            $scope.listType = 2;
            $scope.refreshListContent();
      }
      $scope.showHideComments = function(sitind, activity) {
            if (!$scope.listType) {
                  for (var i = 0; i < $scope.activities_list.length; i++) {
                        angular.forEach($scope.activities_list[i], function(item, key) {
                              if (item.id != activity.id) {
                                    item.showComFlag = false;
                                    $scope.activityComments = [];
                              }
                        });
                  }
            } else {
                  angular.forEach($scope.activities_hierarchy, function(result, key) {
                        angular.forEach(result.keys, function(result1, key1) {
                              for (var i = 0; i < result1.activities.length; i++) {
                                    angular.forEach(result1.activities[i], function(item, key2) {
                                          if (item.id != activity.id) {
                                                item.showComFlag = false;
                                                $scope.activityComments = [];
                                          }
                                    });
                              }
                        });
                  });
            }
            if (activity.showComFlag) {
                  activity.showComFlag = false;
                  $scope.activityComments = [];
            } else {
                  $activities['getActivityComments'](activity.id).then(function(response) {
                        $scope.activityComments = response;
                  });
                  activity.showComFlag = true;
            }
      }
      $scope.addActivityComment = function(activity) {
            var commentText = $('.comments_' + activity.order + ' .input_comment').val();
            if (!commentText.length || commentText == '') {
                  return;
            }
            $activities['addActivityComment'](activity.id, commentText).then(function(response) {
                  $('.comments_' + activity.order + ' .input_comment').val('');
                  var actComment = {};
                  actComment.commentid = response;
                  actComment.activityid = activity.id;
                  actComment.comentario = commentText;
                  actComment.commentdate = '0 min(s)';
                  actComment.id_usuario = $scope.user.id;
                  actComment.nome_usuario = $scope.user.name;
                  actComment.url_image = $scope.userDetailImage ? $scope.userDetailImage : $scope.user.md_image;
                  $scope.activityComments.unshift(actComment);
                  activity.comments++;
            });
      }
      $scope.showHideDetails = function(sitind, activity) {
            if (!$scope.listType) {
                  for (var i = 0; i < $scope.activities_list.length; i++) {
                        angular.forEach($scope.activities_list[i], function(item, key) {
                              if (item.id != activity.id) {
                                    $scope.hideDetails(item);
                              }
                        });
                  }
            } else {
                  angular.forEach($scope.activities_hierarchy, function(result, key) {
                        angular.forEach(result.keys, function(result1, key1) {
                              for (var i = 0; i < result1.activities.length; i++) {
                                    angular.forEach(result1.activities[i], function(item, key2) {
                                          if (item.id != activity.id) {
                                                $scope.hideDetails(item);
                                          }
                                    });
                              }
                        });
                  });
            }
            if (activity.showDetFlag) {
                  $scope.hideDetails(activity);
            } else {
                  $('.details_' + activity.order + ' #detail-responsavel').select2();
                  $('.details_' + activity.order + ' #detail-date-init').datepicker();
                  $('.details_' + activity.order + ' #detail-date-fim').datepicker();
                  $('.details_' + activity.order + ' .input_description').val(activity.description);
                  $('.details_' + activity.order + ' #detail-date-init').val(activity.init);
                  $('.details_' + activity.order + ' #detail-date-fim').val(activity.fim);
                  if (activity.situacao == 1) $('.details_' + activity.order + ' #check-finished').prop("checked", true);
                  if (activity.situacao == 3) $('.details_' + activity.order + ' #check-cancelled').prop("checked", true);
                  var activity_percentage = activity.percentage;
                  $('.details_' + activity.order + ' #detail-percentage').val(activity_percentage);
                  $timeout(function() {
                        $('.details_' + activity.order + ' .slider').slider({
                              range: "min",
                              min: 0,
                              max: 100,
                              value: activity_percentage,
                              create: function() {
                                    var $handles = $('.details_' + activity.order + ' .slider').find('.ui-slider-handle');
                                    $handles.html('<span class="ui-label">' + $(this).slider("value") + '</span>');
                              },
                              slide: function(event, ui) {
                                    $('.details_' + activity.order + ' #detail-percentage').val(ui.value);
                                    var $handles = $('.details_' + activity.order + ' .slider').find('.ui-slider-handle');
                                    $handles.html('<span class="ui-label">' + ui.value + '</span>');
                              }
                        });
                        $(".details_" + activity.order + " .slider .ui-slider-handle .ui-label").text(activity_percentage);
                  });
                  var startPos = $('.details_' + activity.order + ' #detail-percentage').val();
                  var endPos = '';
                  $('.details_' + activity.order + ' .slider').on("slidestop", function(event, ui) {
                        endPos = ui.value;
                        if (startPos != endPos) {
                              if (endPos == 100) {
                                    $('.details_' + activity.order + ' #check-finished').prop("checked", true);
                                    $('.details_' + activity.order + ' #check-cancelled').removeAttr("checked");
                              } else {
                                    $('.details_' + activity.order + ' #check-finished').removeAttr("checked");
                              }
                        }
                        startPos = endPos;
                  });
                  $scope.detailResponsavel[activity.order] = activity.responsavel;
                  $timeout(function() {
                        $('.details_' + activity.order + ' #detail-responsavel').trigger('change');
                  }, 100);
                  activity.showDetFlag = true;
            }
      }
      $scope.hideDetails = function(activity) {
            activity.showDetFlag = false;
            $('.details_' + activity.order + ' #detail-responsavel').select2("destroy");
            $('.details_' + activity.order + ' #detail-date-init').datepicker("destroy");
            $('.details_' + activity.order + ' #detail-date-fim').datepicker("destroy");
            $('.details_' + activity.order + ' #check-finished').removeAttr("checked");
            $('.details_' + activity.order + ' #check-cancelled').removeAttr("checked");
      }
      $scope.changeDetailSituation = function(activity, situation) {
            if (situation == '3') {
                  $('.details_' + activity.order + ' #check-finished').removeAttr("checked");
            }
            if (situation == '1') {
                  $('.details_' + activity.order + ' #check-cancelled').removeAttr("checked");
            }
      }
      $scope.saveActivity = function() {
            if ($('.new_activity #nome').val() == "") {
                  alert("Enter the name!");
                  return;
            }
            if ($('.new_activity #descricao').val() == "") {
                  alert("Enter the description!");
                  return;
            }
            if ($scope.newObjective == 0 || !$scope.newObjective) {
                  alert("Enter the Objective!");
                  return;
            }
            if ($scope.newChave == 0 || !$scope.newChave) {
                  alert("Enter the Resultado-chave!");
                  return;
            }
            if ($scope.newResponsavel == 0 || !$scope.newResponsavel) {
                  alert("Enter the Responsavel!");
                  return;
            }
            if ($('.new_activity #new-date-init').val() == "") {
                  alert("Enter the starting date!");
                  return;
            }
            if ($('.new_activity #new-date-fim').val() == "") {
                  alert("Enter the end date!");
                  return;
            }
            var data = {
                  nome: $('.new_activity #nome').val(),
                  descricao: $('.new_activity #descricao').val(),
                  goal_id: $scope.newObjective,
                  id_resultado_chave: $scope.newChave,
                  responsavel: $scope.newResponsavel,
                  data_ini: $('.new_activity #new-date-init').val(),
                  data_fim: $('.new_activity #new-date-fim').val()
            };
            $activities['addActivityDetails'](data).then(function(added_activity_id) {
                  toastr.success("Atividade Atualizada");
                  $scope.hideNewPanel();
                  $scope.refreshListContent(added_activity_id);
            });
      }
      $scope.openHierarchyStatus = function(activity_id) {
            if ($scope.listType == 0) {
                  return;
            }
            angular.forEach($scope.activities_hierarchy, function(hierarchy, key) {
                  angular.forEach(hierarchy.keys, function(keyresult, key1) {
                        for (var i = 0; i < keyresult.activities.length; i++) {
                              angular.forEach(keyresult.activities[i], function(item, key2) {
                                    if (item.id == activity_id) {
                                          keyresult.showKey = true;
                                          if ($scope.listType == 1) {
                                                hierarchy.showObj = true;
                                                return true;
                                          }
                                    }
                              });
                        }
                  });
            });
      }
      $scope.updateDetails = function(activity) {
            if ($scope.detailResponsavel[activity.order] == 0 || !$scope.detailResponsavel[activity.order]) {
                  alert("Enter the responsavel!");
                  return;
            }
            if ($('.details_' + activity.order + ' #detail-date-init').val() == "") {
                  alert("Enter the starting date!");
                  return;
            }
            if ($('.details_' + activity.order + ' #detail-date-fim').val() == "") {
                  alert("Enter the end date!");
                  return;
            }
            var sitFinished = $('.details_' + activity.order + ' #check-finished').is(":checked");
            var sitCancelled = $('.details_' + activity.order + ' #check-cancelled').is(":checked");
            var situation = activity.situacao;
            situation = sitFinished ? 1 : situation;
            situation = sitCancelled ? 3 : situation;
            var data = {
                  activity_id: activity.id,
                  description: $('.details_' + activity.order + ' .input_description').val(),
                  responsavel: $scope.detailResponsavel[activity.order],
                  date_init: $('.details_' + activity.order + ' #detail-date-init').val(),
                  date_fim: $('.details_' + activity.order + ' #detail-date-fim').val(),
                  situation: situation,
                  percentage: $('.details_' + activity.order + ' #detail-percentage').val()
            };
            $activities['updateActivityDetails'](data).then(function(response) {
                  toastr.success("Atividade Atualizada");
                  $scope.hideDetails(activity);
                  $scope.refreshListContent(activity.id);
            });
      }

      $scope.updateSitActivityId = 0;
      $scope.showUpdateSitautionConfirmModal = function(activity) {
            $scope.updateSitActivityId = activity.id;
            $('#update-situaction-confirm-modal').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.updateSituation = function() {
            $activities['updateSituationToFinished']($scope.updateSitActivityId).then(function(response) {
                  toastr.success("Atividade Finalizada");
                  $('#update-situaction-confirm-modal').modal('hide');
                  $scope.refreshListContent($scope.updateSitActivityId);
                  $scope.updateSitActivityId = 0;
                  $scope.showFinalized = true;
            });
      }
      $scope.showNewPanel = function() {
            if ($scope.showNewFlag) return;
            $scope.showNewFlag = true;
      }
      $scope.hideNewPanel = function() {
            $('.new_activity #nome').val("");
            $('.new_activity #descricao').val("");
            $('.new_activity #new_objective').select2("val", "");
            $scope.newObjective = 0;
            $('.new_activity #new_chave').select2("val", "");
            $scope.newChave = 0;
            $('.new_activity #new_responsavel').select2("val", "");
            $scope.newResponsavel = 0;
            $('.new_activity #new-date-init').val("");
            $('.new_activity #new-date-fim').val("");
            $scope.showNewFlag = false;
      }
      $scope.changeObj = function() {
            angular.forEach($scope.objectives, function(item, key) {
                  if (item.id == $scope.newObjective) {
                        $scope.resultados = item.keys;
                        console.log("change obj:", item);
                        return;
                  }
            });
            $('.new_activity #new_chave').select2("val", "");
            $scope.newChave = 0;
            // $activities['getActivityResultados']($scope.newObjective).then(function(response) {
            //         console.log("resultados:", $scope.newObjective, response);
            //         $scope.resultados = response;
            //         $('.new_activity #new_chave').select2("val", "");
            //         $scope.newChave = 0;
            // });
      }
      $scope.changeFimFormat = function(originDate) {
            const monthNames = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];
            var parts = originDate.split('/');
            return parts[0] + " " + monthNames[parts[1] - 1];
      }
      $scope.isPassed = function(originDate) {
            var parts = originDate.split("/");
            var origin = new Date(parts[2], parts[1] - 1, parts[0]);
            return (origin > new Date());
      }
      //----activity test end----//
      $scope.validateImage = function(list) {
            angular.forEach(list, function(result, key) {
                  $activities['isValidImage'](result.url_image).then(function(response) {
                        if (!response) result.url_image = 'assets/img/elinho.png';
                  });
            });
      }
});

elofy.controller('careerCtrl', function globalCtrl($scope, $results, $timeout, $years, $cycles, $cycleConfiguration, $users, $teams, $tags, $skills, $tatics, $globals, $empressa, $elos, timeAgo, nowTime, $dashboard, $carreers, $cargo, $surveys, $translate, $filter, $activities, $competencias, $mydashboard) {

      if (window.location.href.includes('carreira')) {
            $scope.$watch('user', function(newValue, oldValue) {
                  if (typeof newValue.empresa != 'undefined') {
                        // $scope.eloTab();
                        $scope.carreerTab(0);
                  }
            });
      }

      /* put dummy image if no valid image */
      $scope.career_valid_image = false;
      $scope.$watch('career_details', function(newVal, oldVal) {
            if (newVal) {
                  $activities['isValidImage']($scope.career_details.image).then(function(response) {
                        if (response) $scope.career_valid_image = true;
                        else $scope.career_valid_image = false;
                  });
            }
      });
      /* dummy image end */
      var myCompetenciaRadar;
      var myValoresRadar;
      $scope.carreerTab = function() {
            $scope.profiletab = 5;
            $scope.CargoNotAddedSelected = [];
            $scope.CargoNotAddedSelectedFilter = [];
            delete $scope.meta_id;
            delete $scope.goal_id;
            delete $scope.updateDpObjModel;
            delete $scope.situacaoStatus;
            $("#career_users").select2();
            $("#performance-cycle-select").select2();
            $("#active_status_career").select2();
            $("#objective_time").select2();
            $scope.viewInFullSize = true;
            $scope.viewFullCrossfeed = true;
            $scope.viewFullActivity = true;
            $scope.addMode = false;
            $scope.editMode = false;
            myCompetenciaRadar = new Chart(document.getElementById('competencia_chart'), {
                  "type": "radar",
                  "data": {
                        "labels": [],
                        "datasets": []
                  },
                  "options": {
                        "elements": {
                              "line": {
                                    "tension": 0,
                                    "borderWidth": 3
                              }
                        },
                        scale: {
                              pointLabels: {
                                    fontSize: 12,
                                    fontStyle: '300'
                              },
                              ticks: {
                                    beginAtZero: true,
                                    min: 0,
                              },
                        },
                        legend: {
                              position: 'left',
                        },
                        maintainAspectRatio: false
                  }
            });
            myValoresRadar = new Chart(document.getElementById('valores_chart'), {
                  "type": "radar",
                  "data": {
                        "labels": [],
                        "datasets": []
                  },
                  "options": {
                        "elements": {
                              "line": {
                                    "tension": 0,
                                    "borderWidth": 3
                              }
                        },
                        scale: {
                              pointLabels: {
                                    fontSize: 12,
                                    fontStyle: '300'
                              },
                              ticks: {
                                    beginAtZero: true,
                                    min: 0,
                              }
                        },
                        legend: {
                              position: 'left',
                        },
                        maintainAspectRatio: false
                  }
            });
            $timeout(function() {
                  $(document).on('click', '#filter_btn .dropdown-menu', function(e) {
                        e.stopPropagation();
                  });
                  $scope.datafunction();
                  $("#Planejamento_status").val('1');
                  $("#Planejamento_status").select2();
                  $('#dev_sent_updates').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('#dev_received_updates').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('#carrier_block_hgt').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('.career_sidebar_details').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
                  $('#active_status_career').select2('val', 1);
            }, 1000);
            if (!$scope.getUserId) {
                  $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                        $scope.career_details = response;
                  });
            }
            $carreers['getAll']($scope.user.id).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived']($scope.user.id).then(function(response) {
                  $scope.received_carreers = response;
            });
            $users['getAllUsersCombo']().then(function(response) {
                  $scope.users_combo = response;
                  if (!$scope.users_combo.find(x => x.id === $scope.$parent.user.id)) $scope.users_combo.push({
                        id: $scope.$parent.user.id,
                        name: $scope.$parent.user.name
                  });
                  $scope.carrer_user_id = $scope.$parent.user.id;
                  setTimeout(function() {
                        if (!$scope.getUserId) $("#career_users").val($scope.$parent.user.id);
                        else $("#career_users").val($scope.getUserId);
                        $("#career_users").trigger('change');
                  }, 300);
            });
            $users['activities_career']($scope.user.id).then(function(activities) {
                  $scope.activities_career = activities;
            });
            $scope.addDevelopmentTab = 1;
            $cargo['cargos']().then(function(response) {
                  $scope.cargos = response;
                  $scope.CargosNotAdded = response;
                  $scope.CargosNotAddedFilter = response;
            });
            $scope.selectedPerformanceUser = $scope.user.id;
            // tirei esta chamada pois ela já acontece no set do usuário default
            // $scope.loadPerformanceServices($scope.selectedPerformanceUser); 

            //--carrer upgrade
            /*
            $cycleConfiguration['getNiveisByEmpresaId']().then(function(res) {
                  $scope.nivels = [];
                  angular.forEach(res, function(result, key) {
                        var data = {id:result.nivel, name:result.nivel};
                        $scope.nivels.push(data);
                  });
            });

            $cycles['getRevisionCycleByCompany']().then(function(response) {
                  $scope.u_cycles = [];
                  angular.forEach(response, function(result, key) {
                        var data = {id:result.id_revisao_ciclo, name:result.nome_ciclo};
                        $scope.u_cycles.push(data);
                  });
            });

            $scope.onChangeResponsavelSelect = function() {
                  angular.forEach($scope.users_combo, function(result, key) {
                        if (result['id'] == $('#search_responsavel').val()) result.added = true;
                  });
            }

            $scope.onChangeNivelSelect = function() {
                  angular.forEach($scope.nivels, function(result, key) {
                        if (result['id'] == $('#search_nivel').val()) result.added = true;
                  });
            }

            $scope.onChangeUCycleSelect = function() {
                  angular.forEach($scope.u_cycles, function(result, key) {
                        if (result['id'] == $('#search_ucycle').val()) result.added = true;
                  });
            }

            $scope.resetIdLists = function() {
                  $scope.responsavelsList = $scope.makeIdList($scope.users_combo);
                  $scope.nivelsList = $scope.makeIdList($scope.nivels);
                  $scope.ucyclesList = $scope.makeIdList($scope.u_cycles);
            }

            $scope.makeIdList = function(obj) {
                  var idList = [];
                  angular.forEach(obj, function(result, key) {
                        if (result.added) idList.push(result.id);
                  });
                  return idList;
            }

            $scope.isSelectedFilter = function() {
                  if ($scope.responsavelsList.length || $scope.nivelsList.length || $scope.ucyclesList.length) {
                        return true;
                  } else {
                        return false;
                  }                  
            }

            $scope.clearCareerFilter = function() {
                  $('#search_responsavel').select2('val', '');
                  $('#search_nivel').select2('val', '');
                  $('#search_ucycle').select2('val', '');
                  angular.forEach($scope.users_combo, function(result, k) {
                        result['added'] = null;
                  });
                  angular.forEach($scope.nivels, function(result, k) {
                        result['added'] = null;
                  });
                  angular.forEach($scope.u_cycles, function(result, k) {
                        result['added'] = null;
                  });
                  $scope.resultsFromGestor = [];
            }

            $scope.applyCareerFilter = function() {
                  $scope.resetIdLists();
                  if (!$scope.isSelectedFilter()) {
                        alert("Por favor, selecione ao menos um parâmetro de pesquisa!");
                        return;
                  }
                  console.log("filter:", $scope.responsavelsList, $scope.nivelsList, $scope.ucyclesList);
                  $scope.loadResults();
            }

            $scope.loadResults = function() {
                  var user_id = $scope.responsavelsList.join(',');
                  var cycle_id = $scope.ucyclesList.join(',');
                  var nivel_id = $scope.nivelsList.join(',');
                  $results['list'](user_id, null, cycle_id, nivel_id, null).then(function(response) {
                        console.log("results:", response);
                        $scope.resultsFromGestor = response;
                  });
            } */

            $scope.generatePDF = function(result) {
                  console.log("generate pdf from career!");
                  $scope.id_usuario_avaliado = result.id_usuario_avaliado;
                  $scope.id_revisao_ciclo = result.id_revisao_ciclo;
                  setTimeout(function() {
                        $('#form-generate-pdf').submit();
                  }, 100);
            }

            $scope.modalCarreira = function(id_user, id_cicle) {
                  $("html, body").animate({
                        scrollTop: 0
                  }, "slow");
                  $timeout(function() {
                        $scope.carreiraUrl = baseurl + "carreira/" + id_user + "/" + id_cicle + "/" + "1";
                        $('#carreira-modal').fadeIn(400);
                  }, 200);
            }

            $scope.closeCarreira = function() {
                  $scope.carreiraUrl = "";
                  $('#carreira-modal').fadeOut(300);
            }

            $scope.resultsFromGestor = [];

            // $scope.loadUsersFromGestorByCycle(135);

            setTimeout(function() {
                  $('#search_responsavel').select2();
                  $('#search_nivel').select2();
                  $('#search_ucycle').select2();
            }, 300);
      }

      $scope.loadUsersFromGestorByCycle = function(id_cycle) {
            $users['getUsersFromGestorByCycle'](id_cycle).then(function(response) {
                  $scope.usersFromGestor = response;
            });
      }
      $scope.revokeEvalAccess = function() {
            alert('3');
            $results['revokeEvaluationAccess']($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle).then(function(results) {
                  toastr.success("Avaliação Bloqueada");
                  $scope.loadPerformanceServices($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
            });
      }
      $scope.grantEvalAccess = function() {
            
            $results['grantEvaluationAccess']($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle).then(function(results) {
                  toastr.success("Avaliação Liberada");
                  $scope.loadPerformanceServices($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
            });
      }
      $scope.revokeEvaluationAccess = function(user) {
            
            user.liberado = 0;
            $results['revokeEvaluationAccess'](user.id_usuario_avaliado, user.id_revisao_ciclo).then(function(results) {
                  toastr.success("Avaliação Bloqueada");
                  $scope.loadPerformanceServices($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
            });
      }
      $scope.grantEvaluationAccess = function(user) {
            user.liberado = 1;
            // confirm
            if(confirm("Liberando esta nota, será encaminhando um email para o usuário.\n\n Deseja continuar?")) {
                  $results['grantEvaluationAccess'](user.id_usuario_avaliado, user.id_revisao_ciclo).then(function(results) {
                        toastr.success("Avaliação Liberada");
                        $scope.loadPerformanceServices($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
                        $cycleConfiguration['sendNotaEmail'](user.id_revisao_ciclo, user.id_usuario_avaliado).then(function(response) {
                              toastr.success("Email Enviado!");
                        });
                  });
            } else {
                  //
            }    
      }
      $scope.viewPerformance = function(user) {
            $('#myTabs a[href="#tab_Performance"]').tab('show');
            setTimeout(function() {
                  $("#career_users").val(user.id_usuario_avaliado);
                  $("#career_users").trigger('change');
            }, 100);
      }
      $scope.loadPerformanceServices = function(user_id, cycle_id = null) {
            var loadScores = function(user, cycle) {
                  console.log("load score:", user, cycle, $scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
                  if (!cycle) return;

                  $cycleConfiguration['getReguaByCycleId'](cycle).then(function(results) {
                        $results['getEvaluationAccess'](user, cycle).then(function(result) {
                              $scope.carrerLogedIn = result.isloggedin;
                              $scope.carrerLiberado = result.liberado;
                        });
                        $scope.selected_cycle_ruler = results;
                        $scope.v_resultados = false;
                        $scope.v_competencias = false;
                        $scope.v_potencial = false;
                        $scope.v_valores = false;
                        $results['getCareerVisibleByCycle'](cycle).then(function(results) {
                              angular.forEach(results, function(item, key) {
                                    if (item.componente == 'O') {
                                          if (item.grafico == '1') {
                                                if (item.acesso == '0') {
                                                      $scope.v_resultados = true;
                                                } else {
                                                      if (item.tipo_cargo == '4') {
                                                            $scope.v_resultados = true;
                                                      }
                                                }
                                          }
                                          if (item.exibir_grafico == '1') {
                                                $scope.v_resultados_exibir_grafico = true;
                                          } else {
                                                $scope.v_resultados_exibir_grafico = false; 
                                          }
                                    } else if (item.componente == 'C') {
                                          if (item.grafico == '1') {
                                                if (item.acesso == '0') {
                                                      $scope.v_competencias = true;
                                                } else {
                                                      if (item.tipo_cargo == '4') {
                                                            $scope.v_competencias = true;
                                                      }
                                                }
                                          }
                                          if (item.exibir_grafico == '1') {
                                                $scope.v_competencias_exibir_grafico = true;
                                          } else {
                                                $scope.v_competencias_exibir_grafico = false;
                                          }
                                    } else if (item.componente == 'T') {
                                          if (item.grafico == '1') {
                                                if (item.acesso == '0') {
                                                      $scope.v_potencial = true;
                                                } else {
                                                      if (item.tipo_cargo == '4') {
                                                            $scope.v_potencial = true;
                                                      }
                                                }
                                          }
                                          if (item.exibir_grafico == '1') {
                                                $scope.v_potencial_exibir_grafico = true;
                                          } else {
                                                $scope.v_potencial_exibir_grafico = false; 
                                          }
                                    } else if (item.componente == 'V') {
                                          if (item.grafico == '1') {
                                                if (item.acesso == '0') {
                                                      $scope.v_valores = true;
                                                } else {
                                                      if (item.tipo_cargo == '4') {
                                                            $scope.v_valores = true;
                                                      }
                                                }
                                          }
                                          if (item.exibir_grafico == '1') {
                                                $scope.v_valores_exibir_grafico = true;
                                          } else {
                                                $scope.v_valores_exibir_grafico = false;
                                          }
                                    }
                                    
                              });
                              $results['getResultsFromUserByCycle'](user, cycle).then(function(results) {
                                    $scope.scoresFromCycle = results;
                                    // $scope.setupScoresFromCycleChart();

                                    $scope.setResultChartData();
                                    $scope.drawResultCharts();
                              });
                        });
                        $results['getUserAveragesScores'](user).then(function(results) {
                              $scope.performanceAverageScores = results;
                              angular.forEach($scope.performanceAverageScores, function(item, key) {
                                    $scope.tempoEmpresa = item.tempo_empresa;
                                    if (item.id_revisao_ciclo == cycle) {
                                          $scope.overviewCycleName = item.nome_revisao_ciclo;
                                          $scope.overviewCycleScore = item.media_final;
                                          $scope.nineboxCycleLabel = item.nine_box_label;
                                          $scope.tempoEmpresa = item.tempo_empresa;
                                         
                                          if ($scope.selected_cycle_ruler && $scope.selected_cycle_ruler.length > 0 && $scope.selected_cycle_ruler[0].conceito == 1) {
                                                $scope.overviewCycleName = "Sua avaliação foi:";
                                                $scope.overviewCycleScore = item.label_media_final;
                                                $scope.nineboxCycleLabel = item.nine_box_label;
                                                $scope.tempoEmpresa = item.tempo_empresa;
                                          }
                                    }
                              });
                              $scope.heartArrays = [];
                              var count = Math.floor($scope.overviewCycleScore);
                              var remainder = $scope.overviewCycleScore % 1;
                              for (var i = 0; i < count; i++) {
                                    $scope.heartArrays.push(1);
                              }
                              if (remainder > 0)
                              {
                                    $scope.heartArrays.push(0);   
                                    count++;
                              }
                              if ($scope.selected_cycle_ruler && $scope.selected_cycle_ruler.length > 0) {
                                    var max = $scope.selected_cycle_ruler[$scope.selected_cycle_ruler.length - 1].limite_final;
                                    var totalCount = Math.floor(max);
                                    if (totalCount > count) {
                                          for (var i = count; i < totalCount; i++) {
                                                $scope.heartArrays.push(2);
                                          }
                                    }
                              }                           
                              console.log("ruler:", $scope.selected_cycle_ruler, max, $scope.heartArrays);
                        });
                  });
                  
                  $results['getValoresFromUsuarioByCycle'](user, cycle).then(function(results) {
                        if (results.length > 20) {
                              document.getElementById("valores_chart").style.minHeight = "360px";
                              document.getElementById("valores_chart").style.minWidth = "720px";
                              document.getElementById("chartjs-radar-valores").style.width = "100%";
                        }
                        $scope.valoresFromUsuarioByCycle = results;
                        $scope.score_1_visibility = false;
                        $scope.score_2_visibility = false;
                        $scope.score_3_visibility = false;
                        $scope.score_4_visibility = false;
                        myValoresRadar.data.labels = [];
                        myValoresRadar.data.datasets = [];
                        if ($scope.valoresFromUsuarioByCycle.length > 0) {
                              angular.forEach($scope.valoresFromUsuarioByCycle, function(item, key) {
                                    myValoresRadar.data.labels.push(item['nome_valor']);
                              });
                              myValoresRadar.data.datasets.push({
                                    "label": 'Gestor',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "#FF00FF",
                                    "borderColor": "#FF00FF",
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Auto',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "#006CE8",
                                    "borderColor": "#006CE8",
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Pares',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "#01D799",
                                    "borderColor": "#01D799",
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Equipes',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "#FCFF00",
                                    "borderColor": "#FCFF00",
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, );
                              if (myValoresRadar) myValoresRadar.update();
                        }
                        angular.forEach($scope.valoresFromUsuarioByCycle, function(item, key) {
                              $scope.score_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.score_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.score_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.score_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                              myValoresRadar.data.datasets[0].data.push(item['score_2']);
                              myValoresRadar.data.datasets[1].data.push(item['score_1']);
                              myValoresRadar.data.datasets[2].data.push(item['score_3']);
                              myValoresRadar.data.datasets[3].data.push(item['score_4']);
                        });
                        myValoresRadar.update();
                  });
                  $results['getPotencialFromUsuarioByCycle'](user, cycle).then(function(results) {
                        $scope.potencialFromUsuarioByCycle = results;
                        $scope.potencial_1_visibility = false;
                        $scope.potencial_2_visibility = false;
                        $scope.potencial_3_visibility = false;
                        $scope.potencial_4_visibility = false;
                        angular.forEach($scope.potencialFromUsuarioByCycle, function(item, key) {
                              $scope.potencial_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.potencial_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.potencial_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.potencial_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $results['getResultadoFromUsuarioByCycle'](user, cycle).then(function(results) {
                        $scope.resultadoFromUsuarioByCycle = results;
                        $scope.resultado_1_visibility = false;
                        $scope.resultado_2_visibility = false;
                        $scope.resultado_3_visibility = false;
                        $scope.resultado_4_visibility = false;
                        angular.forEach($scope.resultadoFromUsuarioByCycle, function(item, key) {
                              $scope.resultado_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.resultado_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.resultado_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.resultado_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  $results['getCompetenciaFromUserByCycle'](user, cycle).then(function(results) {
                        $scope.competenciaFromUsuarioByCycle = results;
                        if (!results) return;
                        if (results.length > 20) {
                              document.getElementById("competencia_chart").style.minHeight = "360px";
                              document.getElementById("competencia_chart").style.minWidth = "720px";
                              document.getElementById("chartjs-radar").style.width = "100%";
                        }
                        $scope.competencia_1_visibility = false;
                        $scope.competencia_2_visibility = false;
                        $scope.competencia_3_visibility = false;
                        $scope.competencia_4_visibility = false;
                        myCompetenciaRadar.data.labels = [];
                        myCompetenciaRadar.data.datasets = [];
                        if ($scope.competenciaFromUsuarioByCycle.length > 0) {
                              angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                                    myCompetenciaRadar.data.labels.push(item['nome_comp']);
                                    $competencias['search']('', '', '', '', '', '', '', item['nome_competencia']).then(function(response) {
                                          $scope.competenciaFromUsuarioByCycle[key].description = response[0].descricao;
                                    });
                              });
                              myCompetenciaRadar.data.datasets.push({
                                    "label": 'Gestor',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "#FF00FF",
                                    "borderColor": "#FF00FF",
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Auto',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "#006CE8",
                                    "borderColor": "#006CE8",
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Pares',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "#01D799",
                                    "borderColor": "#01D799",
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, {
                                    "label": 'Média Equipes',
                                    "data": [],
                                    "fill": false,
                                    "backgroundColor": "#FCFF00",
                                    "borderColor": "#FCFF00",
                                    "pointBackgroundColor": "rgb(58, 118, 174)",
                                    "pointBorderColor": "#fff",
                                    "pointHoverBackgroundColor": "#fff",
                                    "pointHoverBorderColor": "rgb(58, 118, 174)"
                              }, );
                              if (myCompetenciaRadar) myCompetenciaRadar.update();
                        }
                        angular.forEach($scope.competenciaFromUsuarioByCycle, function(item, key) {
                              $scope.competencia_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.competencia_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.competencia_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.competencia_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                              myCompetenciaRadar.data.datasets[0].data.push(item['score_2']);
                              myCompetenciaRadar.data.datasets[1].data.push(item['score_1']);
                              myCompetenciaRadar.data.datasets[2].data.push(item['score_3']);
                              myCompetenciaRadar.data.datasets[3].data.push(item['score_4']);
                        });
                        myCompetenciaRadar.update();
                  });
                  $results['getOutraEtapaFromUserByCycle'](user, cycle).then(function(results) {
                        $scope.outraetapaFromUsuarioByCycle = results;
                        $scope.outraetapa_1_visibility = false;
                        $scope.outraetapa_2_visibility = false;
                        $scope.outraetapa_3_visibility = false;
                        $scope.outraetapa_4_visibility = false;
                        angular.forEach($scope.outraetapaFromUsuarioByCycle, function(item, key) {
                              $scope.outraetapa_1_visibility |= Number(item['score_1']) || Number(item['numComentarios_1']);
                              $scope.outraetapa_2_visibility |= Number(item['score_2']) || Number(item['numComentarios_2']);
                              $scope.outraetapa_3_visibility |= Number(item['score_3']) || Number(item['numComentarios_3']);
                              $scope.outraetapa_4_visibility |= Number(item['score_4']) || Number(item['numComentarios_4']);
                        });
                  });
                  //---load performance do time tab---//
                  $results['performanceDoTime'](cycle).then(function(response) {
                        $scope.resultsFromGestor = response;
                  });
                  $results['getYouTimeByUserCycle'](user, cycle).then(function(response) {
                        $scope.youTimeResult = response;
                  });
                  $(function() {
                        setTimeout(function() {
                              $('[data-toggle="tooltip"]').tooltip();
                        }, 1000);
                  });
            };
            if (!cycle_id) {
                  $cycles['getAll'](user_id).then(function(results) {
                       $scope.allCycles = results;
                       $cycles['getLastCycle'](user_id).then(function(result) {
                             $scope.selectedPerformanceCycleResult = result;
                             $scope.selectedPerformanceCycle = result.id_revisao_ciclo;
                             $("#performance-cycle-select").val($scope.selectedPerformanceCycle);
                             $("#performance-cycle-select").trigger("change");
                             loadScores(user_id, $scope.selectedPerformanceCycle);
                        });
                  });
            } else loadScores(user_id, cycle_id);
      }
      $scope.getStarValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getHeartValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.submitUpdateForm = function() {
            $('#new_update .salvar').button('loading');
            var $data = $("#new_update").serialize();
            $users['save_user_update_career']($data).then(function(response) {
                  $('#new_update')[0].reset();
                  $('#new_update .salvar').button('reset');
                  $('#newUpdateModal').modal('hide');
                  toastr.success('Adicionado com sucesso.');
                  $users['get_user_updates']().then(function(get_user_updates) {
                        $scope.user_updates = get_user_updates;
                  });
                  $scope.loadPerformanceServices($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
            });
      }
      $scope.closeYouTime = function() {
            if (!$scope.id_protocolo) {
                  return;
            }
            $results['closeYouTimeByIdProtocol']($scope.id_protocolo).then(function(res) {
                  toastr.success('Encerrar!');
                  $('#newUpdateModal').modal('hide');
                  $scope.loadPerformanceServices($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
            });
      }
      $scope.handleCompetenciaCombo = function() {
            $timeout(function() {
                  $('.competencia_update').select2();
                  $(".competencia_update").change(function() {
                        var comp_id = $(this).val();
                        if (comp_id != "") {
                              var question_id = $(this).data('question-id');
                              var comp_name = $(this).find("option:selected").text();
                              if (typeof $scope.questions_competencias_array[question_id] == "undefined") {
                                    $scope.questions_competencias_array[question_id] = [];
                              }
                              var already_added = false;
                              $.each($scope.questions_competencias_array[question_id], function(key, comp_data) {
                                    if (comp_data.comp_id == comp_id) {
                                          already_added = true;
                                    }
                              });
                              if (!already_added) {
                                    $scope.questions_competencias_array[question_id].push({
                                          comp_id: comp_id,
                                          question_id: question_id,
                                          comp_name: comp_name,
                                          answer: ''
                                    });
                              }
                        }
                  });
                  
            }, 100);
      }
      $scope.openYouTime = function(user = null) {
            $scope.isDisabled = false;
            $scope.questions_competencias_array = [];
            $scope.id_protocolo = null;
            $users['get_questionerios_profile']('n').then(function(response) {
                  $scope.questions = response;
                  $scope.textAnswers = [];
                  if (!user) {
                        $scope.youTimeUser = $scope.selectedPerformanceUser;
                        $scope.youTimeCycle = $scope.selectedPerformanceCycle;
                        if ($scope.selectedPerformanceUser == $scope.user.id) $scope.isDisabled = true;
                        $scope.isYouTimeNew = true;
                        var youTimeResult = null;
                        if ($scope.youTimeResult.length > 0)  {
                              youTimeResult = $scope.youTimeResult[0];
                              if (youTimeResult.situacao == 0 || youTimeResult.situacao == 1) $scope.isYouTimeNew = false;
                        }
                        if (!$scope.isYouTimeNew) {
                              $scope.id_protocolo = $scope.youTimeResult[0].id_protocolo_questionario;
                              $results['getYouTimeByIdProtocol']($scope.id_protocolo).then(function(res) {
                                    angular.forEach(res, function(item, key) {
                                          if (item.tipo == 'q') {
                                                $scope.textAnswers[item.id_pergunta] = item.resposta_qualitativa;
                                          }
                                          if (item.tipo == 'c') {
                                                $scope.getHeartValue(item.id_pergunta, item.rating_score);
                                                $('#smhr_rad2'+item.rating_score+'_'+item.id_pergunta+'_'+item.rating_score).prop("checked", true);
                                          }
                                          if (item.tipo == 'e') {
                                                $('#sm_rad_'+item.id_pergunta+'_'+item.rating_score).prop("checked", true);
                                                $scope.getStarValue(item.id_pergunta, item.rating_score);
                                          }
                                          if (item.tipo == 't') {
                                                if (typeof $scope.questions_competencias_array[item.id_pergunta] == "undefined") {
                                                      $scope.questions_competencias_array[item.id_pergunta] = [];
                                                }
                                                $scope.questions_competencias_array[item.id_pergunta].push({
                                                      comp_id: item.id_competencia,
                                                      question_id: item.id_pergunta,
                                                      comp_name: item.nome_competencia,
                                                      answer: item.descricao
                                                });
                                          }
                                    });
                                    $scope.handleCompetenciaCombo();
                              });
                        } else {
                              $scope.handleCompetenciaCombo();
                        }
                  } else {
                        $scope.youTimeUser = user.id_usuario_avaliado;
                        $scope.youTimeCycle = user.id_revisao_ciclo;
                        if ($scope.selectedPerformanceUser == user.id_usuario_avaliado) $scope.isDisabled = true;
                        $scope.isYouTimeNew = true;
                        if (user.youtime && user.youtime.length > 0)  {
                              if (user.youtime[0].situacao == 0 || user.youtime[0].situacao == 1) $scope.isYouTimeNew = false;
                        }
                        if (!$scope.isYouTimeNew) {
                              $scope.id_protocolo = user.youtime[0].id_protocolo_questionario;
                              $results['getYouTimeByIdProtocol']($scope.id_protocolo).then(function(res) {
                                    angular.forEach(res, function(item, key) {
                                          if (item.tipo == 'q') {
                                                $scope.textAnswers[item.id_pergunta] = item.resposta_qualitativa;
                                          }
                                          if (item.tipo == 'c') {
                                                $('#smhr_rad2'+item.rating_score+'_'+item.id_pergunta+'_'+item.rating_score).prop("checked", true);
                                                $scope.getHeartValue(item.id_pergunta, item.rating_score);
                                          }
                                          if (item.tipo == 'e') {
                                                $('#sm_rad_'+item.id_pergunta+'_'+item.rating_score).prop("checked", true);
                                                $scope.getStarValue(item.id_pergunta, item.rating_score);
                                          }
                                          if (item.tipo == 't') {
                                                if (typeof $scope.questions_competencias_array[item.id_pergunta] == "undefined") {
                                                      $scope.questions_competencias_array[item.id_pergunta] = [];
                                                }
                                                $scope.questions_competencias_array[item.id_pergunta].push({
                                                      comp_id: item.id_competencia,
                                                      question_id: item.id_pergunta,
                                                      comp_name: item.nome_competencia,
                                                      answer: item.descricao
                                                });
                                          }
                                    });
                                    $scope.handleCompetenciaCombo();
                              });
                        } else {
                              $scope.handleCompetenciaCombo();
                        }
                  }
            })
            $('#newUpdateModal').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.openOutraEtapaComents = function(id_valores, id_tipo_avaliacao) {
            console.log("clicked");
            $("#outraetapa-table").removeClass("full-sized-table");
            $("#outraetapa-table").addClass("half-sized-table");
            $results['getCommentsByOutraEtapa']($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle, id_valores, id_tipo_avaliacao).then(function(results) {
                  $scope.outraetapaComments = results;
                  setTimeout(function() {
                        $('#outraetapaComments').addClass("visible-comments");
                        console.log("addclass");
                  }, 1000);
            });
      }
      $scope.closeOutraetapaComments = function() {
            $("#outraetapa-table").removeClass("half-sized-table");
            $("#outraetapa-table").addClass("full-sized-table");
            $('#outraetapaComments').removeClass("visible-comments");
      }
      $scope.openResultadoComents = function(id_valores, id_tipo_avaliacao, index_id, event) {
            console.log(angular.element(event.target).position());
            $("#resultado-table").removeClass("full-sized-table");
            $("#resultado-table").addClass("half-sized-table");
            document.getElementById("resultadoComments").style.marginTop = angular.element(event.target).position().top - 62 + 'px';
            $results['getCommentsByResultado']($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle, id_valores, id_tipo_avaliacao).then(function(results) {
                  $scope.resultadoComments = results;
                  setTimeout(function() {
                        $('#resultadoComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.closeResultadoComments = function() {
            $("#resultado-table").removeClass("half-sized-table");
            $("#resultado-table").addClass("full-sized-table");
            $('#resultadoComments').removeClass("visible-comments");
      }
      $scope.openValuesComents = function(id_valores, id_tipo_avaliacao) {
            $("#valores-table").removeClass("full-sized-table");
            $("#valores-table").addClass("half-sized-table");
            $results['getCommentsByValue']($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle, id_valores, id_tipo_avaliacao).then(function(results) {
                  $scope.valueComments = results;
                  setTimeout(function() {
                        $('#valuesComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.closeValuesComments = function() {
            $("#valores-table").removeClass("half-sized-table");
            $("#valores-table").addClass("full-sized-table");
            $('#valuesComments').removeClass("visible-comments");
      }
      $scope.openPotencialComents = function(id_pergunta, id_tipo_avaliacao) {
            $("#potencial-table").removeClass("full-sized-table");
            $("#potencial-table").addClass("half-sized-table");
            $results['getCommentsByPotencial']($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle, id_pergunta, id_tipo_avaliacao).then(function(results) {
                  $scope.potencialComments = results;
                  setTimeout(function() {
                        $('#potencialComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.closePotencialComments = function() {
            $("#potencial-table").removeClass("half-sized-table");
            $("#potencial-table").addClass("full-sized-table");
            $('#potencialComments').removeClass("visible-comments");
      }
      $scope.openCompetenciaComents = function(id_competencia, id_tipo_avaliacao, index_id) {
            $("#competencia-table").removeClass("full-sized-table");
            $("#competencia-table").addClass("half-sized-table");
            document.getElementById("competenciaComments").style.marginTop = 36.8 * (index_id + 1) + 'px';
            $results['getCommentsByCompetencia']($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle, id_competencia, id_tipo_avaliacao).then(function(results) {
                  $scope.competenciaComments = results;
                  setTimeout(function() {
                        $('#competenciaComments').addClass("visible-comments");
                  }, 1000);
            });
      }
      $scope.closeCompetenciaComments = function() {
            $("#competencia-table").removeClass("half-sized-table");
            $("#competencia-table").addClass("full-sized-table");
            $('#competenciaComments').removeClass("visible-comments");
      }
      $scope.openSubCareerBlock = function(section) {
            switch (section) {
                  case "performance":
                        console.log("performance tab");
                        $scope.refreshCareerBlock();
                        break;
            }
      }
      $scope.$watchGroup(['performanceAverageScores', 'scoresFromCycle'], function(newValue, oldValue) {
            setTimeout(function() {
                  window.dispatchEvent(new Event('resize'));
            }, 300);
      });


      $scope.getGradeFromScore = function(score) {
            var c = 'sem conceito';
            if (score != null){
            angular.forEach($scope.selected_cycle_ruler, function(item, key) {
                  // console.log("comparação :: ", score, item['limite_inicial'], item['limite_final']);
                  if (score >= Number(item['limite_inicial']) && score <= Number(item['limite_final'])) {
                        // console.log("achou :",  item['label']);
                        c = item['label'];
                  }
            });
      }
            return c;
      }

      $scope.isNullResultChart = function(data) {
            var count = 0;
            angular.forEach(data, function(item) {
                  if (item == null) count++;
            });
            if (count == 3) return true;
            return false;
      }

      $scope.setResultChartData = function() {
            var originData = $scope.scoresFromCycle.results_by_cycle;
            $scope.resultChartDataList = [];

            var comportamento = new Array();

            var equipe = originData['Comportamentos p/ equipe'];
            var gestor = originData['Comportamentos p/ gestor'];
            var pares = originData['Comportamentos p/ pares'];

            comportamento.scores = [];
            comportamento.grades = [];
            comportamento.labels = [];

            if (equipe != null) {
                  comportamento.scores.push(equipe);
                  comportamento.grades.push($scope.getGradeFromScore(equipe));
                  comportamento.labels.push('p/ equipe');
            }

            if (gestor != null) {
                  comportamento.scores.push(gestor);
                  comportamento.grades.push($scope.getGradeFromScore(gestor));
                  comportamento.labels.push('p/ gestor');
            }

            if (pares != null) {
                  comportamento.scores.push(pares);
                  comportamento.grades.push($scope.getGradeFromScore(pares));
                  comportamento.labels.push('p/ pares');
            }

            comportamento.title = "Comportamentos";
            comportamento.divid = "div_1st";
            comportamento.chartid = "polar_comportamento_chart";
            $('#div_1st').removeClass();
            $('#div_1st').addClass('hide');

            var resultados = new Array();

            equipe = originData['Resultados p/ equipe'];
            gestor = originData['Resultados p/ gestor'];
            pares = originData['Resultados p/ pares'];

            resultados.scores = [];
            resultados.grades = [];
            resultados.labels = [];

            if (equipe != null) {
                  resultados.scores.push(equipe);
                  resultados.grades.push($scope.getGradeFromScore(equipe));
                  resultados.labels.push('p/ equipe');
            }

            if (gestor != null) {
                  resultados.scores.push(gestor);
                  resultados.grades.push($scope.getGradeFromScore(gestor));
                  resultados.labels.push('p/ gestor');
            }

            if (pares != null) {
                  resultados.scores.push(pares);
                  resultados.grades.push($scope.getGradeFromScore(pares));
                  resultados.labels.push('p/ pares');
            }

            resultados.title = "Resultados";
            resultados.divid = "div_2nd";
            resultados.chartid = "polar_resultados_chart";
            $('#div_2nd').removeClass();
            $('#div_2nd').addClass('hide');

            var competencias = new Array();

            equipe = originData['Competências p/ equipe'];
            gestor = originData['Competências p/ gestor'];
            pares = originData['Competências p/ pares'];

            competencias.scores = [];
            competencias.grades = [];
            competencias.labels = [];

            if (equipe != null) {
                  competencias.scores.push(equipe);
                  competencias.grades.push($scope.getGradeFromScore(equipe));
                  competencias.labels.push('p/ equipe');
            }

            if (gestor != null) {
                  competencias.scores.push(gestor);
                  competencias.grades.push($scope.getGradeFromScore(gestor));
                  competencias.labels.push('p/ gestor');
            }

            if (pares != null) {
                  competencias.scores.push(pares);
                  competencias.grades.push($scope.getGradeFromScore(pares));
                  competencias.labels.push('p/ pares');
            }

            competencias.title = "Competências";
            competencias.divid = "div_3rd";
            competencias.chartid = "polar_competencia_chart";
            $('#div_3rd').removeClass();
            $('#div_3rd').addClass('hide');

            var pontencial = new Array();

            equipe = originData['Potencial p/ equipe'];
            gestor = originData['Potencial p/ gestor'];
            pares = originData['Potencial p/ pares'];

            pontencial.scores = [];
            pontencial.grades = [];
            pontencial.labels = [];

            if (equipe != null) {
                  pontencial.scores.push(equipe);
                  pontencial.grades.push($scope.getGradeFromScore(equipe));
                  pontencial.labels.push('p/ equipe');
            }

            if (gestor != null) {
                  pontencial.scores.push(gestor);
                  pontencial.grades.push($scope.getGradeFromScore(gestor));
                  pontencial.labels.push('p/ gestor');
            }

            if (pares != null) {
                  pontencial.scores.push(pares);
                  pontencial.grades.push($scope.getGradeFromScore(pares));
                  pontencial.labels.push('p/ pares');
            }

            pontencial.title = "Potencial";
            pontencial.divid = "div_4th";
            pontencial.chartid = "polar_pontencial_chart";
            $('#div_4th').removeClass();
            $('#div_4th').addClass('hide');

            if (!$scope.isNullResultChart(comportamento.scores) && $scope.v_valores) {
                  $scope.resultChartDataList.push(comportamento);
            }
            if (!$scope.isNullResultChart(resultados.scores) && $scope.v_resultados) {
                  $scope.resultChartDataList.push(resultados);
            }
            if (!$scope.isNullResultChart(competencias.scores) && $scope.v_competencias) {
                  $scope.resultChartDataList.push(competencias);
            }
            if (!$scope.isNullResultChart(pontencial.scores) && $scope.v_potencial) {
                  $scope.resultChartDataList.push(pontencial);
            }

            var totalChartCounts = $scope.resultChartDataList.length;
            if (totalChartCounts) {
                  for (var i = 0; i < $scope.resultChartDataList.length; i++) {
                        $scope.resultChartDataList[i].classname = 'col-md-6';
                  }
            }
            if (totalChartCounts == 1) $scope.resultChartDataList[0].classname = 'col-md-12';
            else if (totalChartCounts == 3) $scope.resultChartDataList[2].classname = 'col-md-12';

      }

      $scope.resultChartReferences = [];
      $scope.drawResultCharts = function() {
            var tooltipObj = {};
            var backColors = ["#FF00FF", "#006CE8", "#01D799"];
            angular.forEach($scope.resultChartReferences, function(item) {
                  if (item) item.destroy();
            });
            $scope.resultChartReferences = [];
            angular.forEach($scope.resultChartDataList, function(item) {
                  $('#'+item.divid).addClass(item.classname);
                  $('#'+item.divid).removeClass('hide');
                  var polarChartData = {
                        labels: item.labels,
                        datasets: [{
                              backgroundColor: backColors,
                              data: item.scores
                        }]
                  };
                  if ($scope.selected_cycle_ruler && $scope.selected_cycle_ruler.length > 0 && $scope.selected_cycle_ruler[0].conceito == 1) {
                        tooltipObj = {
                              mode: 'index',
                              intersect: false,
                              callbacks: {
                                    label: function(tooltipItem, data) {
                                          var label = item.grades[tooltipItem.index];
                                          return label;
                                    }
                              }
                        }
                  }

                  var optionsPolar = {
                        tooltips: tooltipObj,
                        responsive: true,
                        legend: {
                              position: 'right',
                        },
                        scale: {
                              ticks: {
                                    beginAtZero: true,
                                    display: false
                              },
                              reverse: false,
                              gridLines: {
                                 display: false
                              }
                        },
                        animation: {
                              animateRotate: false,
                              animateScale: true
                        },
                        maintainAspectRatio: false,
                        plugins: {
                              datalabels: {
                                color: 'white',
                                formatter: function(value, context) {
                                    if ($scope.selected_cycle_ruler && $scope.selected_cycle_ruler.length > 0 && $scope.selected_cycle_ruler[0].conceito == 1) {
                                          // return item.grades[context.dataIndex];
                                          return "";
                                    } else {
                                          return value;
                                    }
                                }
                              }
                        },
                  };
                  var resultChart = new Chart(document.getElementById(item.chartid).getContext('2d'), {
                        type: 'polarArea',
                        plugins: [ChartDataLabels],
                        data: polarChartData,
                        options: optionsPolar
                  });
                  $scope.resultChartReferences.push(resultChart);
            });
      }

      var scoresHorizontalChart;
      $scope.setupScoresFromCycleChart = function() {
            if (scoresHorizontalChart) scoresHorizontalChart.destroy();
            var scores = [];
            var labels = [];
            var grades = [];
            var tickObj = {};
            var tooltipObj = {};
            var hasConceito = false;
            angular.forEach($scope.scoresFromCycle.results_by_cycle, function(item, key) {
                  if (item && (item != 0)) {
                        scores.push(item);
                        grades.push($scope.getGradeFromScore(item));
                        labels.push(key);
                  }
            });
            if ($scope.selected_cycle_ruler && $scope.selected_cycle_ruler.length > 0 && $scope.selected_cycle_ruler[0].conceito == 1) {
                  tickObj = {
                        callback: function(value, index, values) {
                              // apagar eixo y
                              return '';
                        }
                  };
                  tooltipObj = {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                              label: function(tooltipItem, data) {
                                    var label = grades[tooltipItem.index];
                                    return label;
                              }
                        }
                  }


            }

            var color = Chart.helpers.color;
            var horizontalBarChartData = {
                  labels: labels,
                  datasets: [{
                        label: 'Notas',
                        backgroundColor: "#006CE8",
                        borderColor: 'rgb(54, 162, 235)',
                        borderWidth: 1,
                        data: scores
                  }]
            };
            tickObj.beginAtZero = true;
            scoresHorizontalChart = new Chart(document.getElementById('overal_view_chart').getContext('2d'), {
                  type: 'horizontalBar',
                  plugins: [ChartDataLabels],
                  data: horizontalBarChartData,
                  options: {
                        // Elements options apply to all of the options unless overridden in a dataset
                        // In this case, we are setting the border of each horizontal bar to be 2px wide
                        elements: {
                              rectangle: {
                                    borderWidth: 2,
                              }
                        },
                        tooltips: tooltipObj,
                        responsive: true,
                        legend: {
                              position: 'right',
                        },
                        title: {
                              display: false,
                              text: 'Chart.js Horizontal Bar Chart'
                        },
                        scales: {
                              xAxes: [{
                                    ticks: tickObj,
                                    gridLines: {
                                      display: false,
                                      drawBorder: false,
                                    }
                              }],
                              yAxes:[{
                                maxBarThickness: 30,
                                gridLines: {
                                  display: false,
                                  drawBorder: false,
                                }
                              }],
                        },
                        plugins: {
                              datalabels: {
                                color: 'white',
                                formatter: function(value, context) {
                                    if ($scope.selected_cycle_ruler && $scope.selected_cycle_ruler.length > 0 && $scope.selected_cycle_ruler[0].conceito == 1) {
                                          return grades[context.dataIndex];
                                    } else {
                                          return value;
                                    }
                                },
                                font: {
                                  // weight: 'bold'
                                },
                              }
                        },
                  }
            });
      }
      
      $scope.viewInFullSize = true;
      $("#performance-cycle-select").change(function() {
            if ($(this).val() == "") return;
            if ($scope.selectedPerformanceCycle == $(this).val()) return;
            $scope.selectedPerformanceCycle = $(this).val();
            $scope.loadPerformanceServices($scope.selectedPerformanceUser, $scope.selectedPerformanceCycle);
      });
      $('#career_users').change(function() {
            $scope.selectedPerformanceUser = $(this).val();
            $carreers['getCareerForUser']($scope.selectedPerformanceUser).then(function(response) {
                  $scope.career_details = response;
            });
            $carreers['getAll']($scope.selectedPerformanceUser).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived']($scope.selectedPerformanceUser).then(function(response) {
                  $scope.received_carreers = response;
            });
            $users['activities_career']($scope.selectedPerformanceUser).then(function(activities) {
                  $scope.activities_career = activities;
            });
            $scope.loadPerformanceServices($scope.selectedPerformanceUser);
            delete $scope.dp_session_added_activities;
            $scope.dp_session_added_activities = [];
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
            $scope.addMode = false;
            $scope.editMode = false;
            $scope.viewInFullSize = true;
      });
      $scope.showHideMeta = function(id_objetivo) {
            var icon_id = "#icon_dp_" + id_objetivo;
            
            // if ($(icon_id).val() == 'arrow_drop_up') {
                  
            //       $(icon_id).val() == 'arrow_drop_down';
            // } else {
                 
            //       $(icon_id).val() == 'arrow_drop_up';
            // }
            if(document.getElementById(icon_id).value='arrow_drop_down'){
                  document.getElementById(icon_id).value='arrow_drop_up';
            } else{
                  document.getElementById(icon_id).value='arrow_drop_down'
            }
            var section_objectivo = ".section_meta_" + id_objetivo;
            $(section_objectivo).toggleClass('hide');
      }
      $scope.showHideActivities = function(meta_id) {
            $scope.refreshCareerBlock();
            var icon_id = "#icon_dp_activity_" + meta_id;
            if ($(icon_id).val() == 'arrow_drop_up') {
                  
                  $(icon_id).val() == 'arrow_drop_down';
            } else {
                 
                  $(icon_id).val() == 'arrow_drop_up';
            }
            var section_objectivo = "#section_meta_activities_" + meta_id;
            if ($(section_objectivo).attr('class') == 'hide') {
                  $(section_objectivo).removeClass('hide');
                  $(section_objectivo).addClass('show');
            } else {
                  $(section_objectivo).removeClass('show');
                  $(section_objectivo).addClass('hide');
            }
            $timeout(function() {
                  $('.career_sidebar_details').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  });
            }, 400);
      }
      $scope.get_goal_details_by_id = function(goal_id) {
            $scope.refreshCareerBlock();
            delete $scope.dp_added_activities;
            $carreers['getDpGoalDetailById'](goal_id).then(function(res) {
                  $('#id_dp_objetivo_glob').val(res.id_dp_objetivo);
                  $scope.goal_details = res;
                  $scope.id_dp_objetivo_glob = res.id_dp_objetivo;
                  $scope.nome_obj_glob = res.nome_dp_objetivo;
                  $scope.date_limit_glob = res.date_limit;
                  delete $scope.CargoNotAddedSelected;
                  $scope.CargoNotAddedSelected = [];
                  $('#objecive_dp_update_form #cargo_objevio_rht').select2('destroy');
                  $('#objecive_dp_update_form #active_status_rht').select2('destroy');
                  $timeout(function() {
                        $('#objecive_dp_update_form #active_status_rht').val(res.situacao);
                        $scope.datafunction();
                        $('#objecive_dp_update_form #cargo_objevio_rht').select2();
                        $('#objecive_dp_update_form #active_status_rht').select2();
                        $scope.CargoNotAddedSelected = res.cargos;
                        $('#objecive_dp_update_form #cargo_objevio_rht').change(function(e) {
                              $.each($scope.CargosNotAdded, function(i) {
                                    if ($scope.CargosNotAdded[i].id === $(e.currentTarget).val()) {
                                          var spliced = $scope.CargosNotAdded.splice(i, 1)[0];
                                          $scope.CargoNotAddedSelected.push(spliced);
                                          return false;
                                    }
                              });
                        });
                  }, 100);
            });
            $scope.viewInFullSize = false;
            $scope.editMode = true;
            $scope.addMode = false;
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
      }
      $scope.add_novo_dp_goal = function() {
            $scope.refreshCareerBlock();
            $scope.viewInFullSize = false;
            $scope.addMode = true;
            $scope.editMode = false;
            delete $scope.dp_session_added_activities;
            $scope.dp_session_added_activities = [];
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
            delete $scope.updateDpObjModel;
            delete $scope.id_dp_objetivo;
            delete $scope.nome_obj;
            delete $scope.date_limit;
            delete $scope.CargoNotAddedSelected;
            $scope.CargoNotAddedSelected = [];
            $('#cargo_objevio').select2('destroy');
            $('#active_status').select2('destroy');
            $timeout(function() {
                  $scope.datafunction();
                  $scope.showViewModel = false;
                  $('#cargo_objevio').select2();
                  $('#active_status').select2();
                  $('#objecive_dp_form #cargo_objevio').change(function(e) {
                        $scope.refreshCareerBlock();
                        $.each($scope.CargosNotAdded, function(i) {
                              if ($scope.CargosNotAdded[i].id === $(e.currentTarget).val()) {
                                    var spliced = $scope.CargosNotAdded.splice(i, 1)[0];
                                    $scope.CargoNotAddedSelected.push(spliced);
                                    return false;
                              }
                        });
                  });
            }, 300);
      }
      $scope.cancelToObjectivos = function() {
            $timeout(function() {
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
            }, 100);
      }
      $scope.returnToMainCareer = function() {
            delete $scope.dp_session_added_activities;
            $scope.dp_session_added_activities = [];
            $scope.addMetaMode = false;
            $scope.editMetaMode = false;
            $scope.addMode = false;
            $scope.editMode = false;
            $scope.viewInFullSize = true;
      }
      $scope.addDpObjectivo = function() {
            $('#objecive_dp_form').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        nome_obj: 'required',
                        date_limit: 'required',
                        active_status: {
                              valueNotEquals: "? undefined:undefined ?"
                        },
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#objecive_dp_form .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#objecive_dp_form .error-message').addClass('hide');
                        $('#objecive_dp_form .salvar').button('loading');
                        var data = {
                              name: $('#objecive_dp_form #nome_obj').val(),
                              date_limit: $('#objecive_dp_form #date_limit').val(),
                              active_status: $('#objecive_dp_form #active_status').val(),
                        }
                        data.cargoes = [];
                        $('#objecive_dp_form input[name^="cargos"]').each(function() {
                              data.cargoes.push($(this).val());
                        });
                        $carreers['save_user_dp_goals'](data).then(function(response) {
                              $timeout(function() {
                                    $scope.carreerTab();
                              }, 300);
                              toastr.success('Objetivo adicionado.');
                        });
                        delete $scope.updateDpObjModel;
                        $('#objecive_dp_form .salvar').button('reset');
                        $('#objecive_dp_form')[0].reset();
                  }
            });
      }

      $scope.addMetaMode = false;
      $scope.add_new_dp_meta = function() {
            $scope.addMetaMode = true;
            $scope.addMode = false;
            $scope.editMode = false;
            $scope.viewInFullSize = false;
            delete $scope.dp_added_activities;
            delete $scope.dp_minor_added_activities;
            $timeout(function() {
                  $scope.dp_minor_added_activities = [];
                  $carreers['getDpGoalDetailById']($scope.id_dp_objetivo_glob).then(function(res) {
                        $('#id_meta_obj_glob').val($scope.id_dp_objetivo_glob);
                        $scope.goal_details = res;
                        $scope.nome_obj_goal = res.nome_dp_objetivo;
                        $scope.date_limit_obj_meta = res.date_limit;
                        $timeout(function() {
                              $('#carrier_block_hgt').niceScroll({
                                    cursorcolor: "#3fb0ac",
                                    cursorborder: "none"
                              });
                              $('#fixed_hgt').niceScroll({
                                    cursorcolor: "#3fb0ac",
                                    cursorborder: "none"
                              });
                              $scope.datafunction();
                        }, 100);
                  });
            }, 200);
      }
      $scope.dp_minor_added_activities = new Array();
      var counter_acti = 0;
      $scope.addNewDpMinorActivity = function() {
            var data = {
                  index: counter_acti,
                  name: $('#addmeta_dp_form #activity_name_meta').val(),
                  activity_end: $('#addmeta_dp_form #activity_end_meta').val(),
            }
            if (data.name != '') {
                  $scope.dp_minor_added_activities.push(data);
                  counter_acti++;
            }
            $('#addmeta_dp_form #activity_name_meta').val('');
            $('#addmeta_dp_form #activity_end_meta').val('');
      }
      $scope.DeleteMinorDpActivity = function(index_id) {
            if ($scope.index_id == index_id) {
                  $('#addmeta_dp_form #activity_name_meta').val('');
                  $('#addmeta_dp_form #activity_end_meta').val();
            }
            $scope.dp_minor_added_activities.splice(index_id, 1);
      }
      $scope.addDpMeta = function() {
            $('#addmeta_dp_form').validate({
                  ignore: [],
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .colorpicker, .select2-input, .times',
                  rules: {
                        nome_meta_obj: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  submitHandler: function(form) {
                        var $post_dp_minor = new Array();
                        $.each($scope.dp_minor_added_activities, function(index, value) {
                              delete value.$$hashKey;
                              $post_dp_minor.push(value);
                        });
                        var data = {
                              parent_id: $('#addmeta_dp_form #id_meta_obj_glob').val() ? $('#addmeta_dp_form #id_meta_obj_glob').val() : 0,
                              name: $('#addmeta_dp_form #nome_meta_obj').val(),
                              goal_name: $('#addmeta_dp_form #nome_obj_goal').val(),
                              goal_prazo: $('#addmeta_dp_form #date_limit_obj_meta').val(),
                              activities: $post_dp_minor
                        }
                        $carreers['insert_minor_goals'](data).then(function(response) {
                              $('#addmeta_dp_form')[0].reset();
                              toastr.success('Meta adicionada.');
                              $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                                    $scope.career_details = response;
                              });
                        });
                        $timeout(function() {
                              $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                        }, 100);
                  }
            });
      }

      $scope.saveGlobalDpValues = function() {
            var data = $('#objecive_dp_update_form').serialize();
            
            $carreers['saveGlobalDpForm'](data).then(function(response) {
                  $carreers['getCareerForUser']($scope.user.id).then(function(response) {
                        $scope.career_details = response;
                  });
            });
            toastr.success('Salvo com sucesso.');

            $('#nome_dp_rchave').val('');
            
            $timeout(function() {
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
            }, 300);
      }
      $scope.filterCareerBlock = function() {
            var user_id = $('#career_users').val();
            var status = $('#active_status_career').val();
            var objective_time = $('#objective_time').val();
            $('#filter_btn').removeClass('open');
            $('#filter_btn .dropdown-menu').css('display', 'none');
            if (!user_id) {
                  user_id = $scope.user.id;
            }
            $carreers['getCareerForUser'](user_id, status, objective_time).then(function(response) {
                  $scope.career_details = response;
            });
      }
      $scope.hideCarreerBlock = function() {
            $('#filter_btn').removeClass('open');
            $('#filter_btn .dropdown-menu').css('display', 'none');
      }
      $('#filter_by_startdate,#filter_by_enddate').change(function() {
            $('#filter_btn').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      });
      $scope.showFilterBox = function() {
            $('#filter_btn').addClass('open');
            $('.open > .dropdown-menu').css('display', 'block');
      }
      $scope.clearfilterCareerBlock = function() {
            $('#active_status_career').select2("val", "");
            $('#filter_by_startdate').val('');
            $('#filter_by_enddate').val('');
            $('#objective_time').val('');
            $('#objective_time').select2("val", "");
            var user_id = $('#career_users').val();
            $carreers['getCareerForUser'](user_id).then(function(response) {
                  $scope.career_details = response;
            });
      }
      $scope.filterCareerBlockCrossfeed = function() {
            var crossfeed_status = $('#crossfeed_status').val();
            var crossfeed_time = $('#crossfeed_time').val();
            var crossfeed_type = $('#crossfeed_type').val();
            var user_id = $('#career_users').val();
            $carreers['getAll'](user_id, crossfeed_status, crossfeed_time, crossfeed_type).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived'](user_id, crossfeed_status, crossfeed_time, crossfeed_type).then(function(response) {
                  $scope.received_carreers = response;
            });
            if (crossfeed_type == 'received') {
                  $timeout(function() {
                        $scope.carreers = [];
                  }, 500);
            }
            if (crossfeed_type == 'asked') {
                  $timeout(function() {
                        $scope.received_carreers = [];
                  }, 500);
            }
      }
      /* BOTÃO REJEITAR CROSSFEED */
      $scope.feedback_justificativa_div = true;
      $scope.feedback_rejeitado = false;
      $scope.ShowHideJustificativa = function(fonte){
            if (fonte == "cancelarRejeicao"){
                  $scope.feedback_justificativa_div = $scope.feedback_justificativa_div = true;
                  $scope.feedback_rejeitado = $scope.feedback_rejeitado = false;
            } else {
                  $scope.feedback_justificativa_div = $scope.feedback_justificativa_div = false;
                  $scope.feedback_rejeitado = $scope.feedback_rejeitado = true;
            }
      }

      $scope.mostrar_crossfeed_arquivada = true;
      $scope.ShowHideArquivadas = function(){
            if($("input[name='arquivadasCheck']:checked").val() == 1){
                  $scope.mostrar_crossfeed_arquivada = false;
            } else {
                  $scope.mostrar_crossfeed_arquivada = true;
            }

      }



      $scope.declineFeedback = function(id_feedback) {
            $('#dismiss-feedback-modal').modal();
            $scope.feedback_justificativa_div = true;
            $scope.feedback_rejeitado = false;

            var justificativaTexto = $('#feedback_justificativa').val();

            $('#completeDeclineFeedback').click(function(justificativaTexto) {
                  $carreers['declineFeedback'](id_feedback,justificativaTexto).then(function(response) {
                        $timeout(function() {
                              $scope.carreerTab()
                        }, 200);
                        $('#dismiss-feedback-modal').modal('hide');
                  });
            });
      }

      $scope.archiveFeedback = function(id_feedback) {
            toastr.success("Arquivado com sucesso!");
            $carreers['archiveFeedback'](id_feedback).then(function(response) {
                  $timeout(function() {
                        $scope.carreerTab();
                  }, 200);
            });
      }

      $scope.unarchiveFeedback = function(id_feedback) {
            toastr.success("Retornado com sucesso!");
            $carreers['unarchiveFeedback'](id_feedback).then(function(response) {
                  $timeout(function() {
                        $scope.carreerTab();
                  }, 200);
            });
      }

      $scope.clearfilterCareerBlockCrossfeed = function() {
            $('#crossfeed_status').select2('val', '');
            $('#crossfeed_time').select2('val', '');
            $('#crossfeed_type').select2('val', '');
            var user_id = $('#career_users').val();
            $carreers['getAll'](user_id).then(function(response) {
                  $scope.carreers = response;
            });
            $carreers['getAllReceived'](user_id).then(function(response) {
                  $scope.received_carreers = response;
            });
      }

      $scope.filterCareerBlockAtivade = function() {
            var user_id = $('#career_users').val();
            var ativade_time = $('#ativade_time').val();
            var ativade_situacao = $('#ativade_situacao').val();
            if (!user_id) {
                  user_id = $scope.user.id;
            }
            $users['activities_career'](user_id, ativade_time, ativade_situacao).then(function(activities) {
                  $scope.activities_career = activities;
            });
      }

      $scope.clearfilterCareerBlockAtivade = function() {
            $('#ativade_time').select2('val', '');
            $users['activities_career']($scope.user.id).then(function(activities) {
                  $scope.activities_career = activities;
            });
      }
      
      var counter_acti = 0;
      $scope.addNewMinorActivity = function(meta_id) {
            var activity_name = '#objecive_dp_update_form #activity_name_meta_gb_' + meta_id;
            var activity_end_date = '#objecive_dp_update_form #activity_end_meta_gb_' + meta_id;
            var data = {
                  index: counter_acti,
                  meta_id: meta_id,
                  name: $(activity_name).val(),
                  activity_end: $(activity_end_date).val(),
            }
            if (data.name != '') {
                  $carreers['save_user_dp_activity'](data).then(function(response) {
                        $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                        $('#section_meta_activities_' + meta_id).removeClass('hide');
                        $('#icon_dp_activity_' + meta_id).removeClass('arrow_drop_down');
                        $timeout(function() {
                              $('#section_meta_activities_' + meta_id).addClass('show');
                              $('#icon_dp_activity_' + meta_id).addClass('arrow_drop_up');
                        }, 300);
                  });
                  counter_acti++;
            }
            $(activity_name).val('');
            $(activity_end_date).val('');
      }
      $scope.DeleteDpActivity = function(activity_id) {
            $carreers['delete_dpactivity'](activity_id).then(function(results) {
                  var meta_id = results.meta_id;
                  $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                  $('#section_meta_activities_' + meta_id).removeClass('hide');
                  $('#icon_dp_activity_' + meta_id).removeClass('arrow_drop_down');
                  $timeout(function() {
                        $('#section_meta_activities_' + meta_id).addClass('show');
                        $('#icon_dp_activity_' + meta_id).addClass('arrow_drop_up');
                  }, 300);
            });
      }
      $scope.DeleteDpMeta = function(meta_id)
      {
            var msgConfirmacao = confirm("ATENÇÃO\n\n Todas as atividades criadas abaixo desta Meta serão excluídas. Deseja continuar?");
            if (msgConfirmacao == true) {
                  $carreers['delete_dpmeta'](meta_id).then(function(results) {
                        $scope.get_goal_details_by_id($scope.id_dp_objetivo_glob);
                  });
            }            
      }
      $scope.updateactivityDp = function(activity_id, type) {
            $scope.refreshCareerBlock();
            $timeout(function() {
                  if (type == 'name') {
                        var field_id = '#activity_name_added_' + activity_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'date') {
                        var field_id = '#activity_date_added_' + activity_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'situacao') {
                        var field_id = '#activity_situacao_' + activity_id;
                        if ($(field_id).prop('checked') == true) {
                              var data = 1;
                        } else {
                              var data = 0;
                        }
                  }
                  $carreers['update_user_activity_dp'](activity_id, type, data).then(function(results) {
                        
                  });
            }, 200);
      }
      /* MÉTODO PARA ATUALIZAÇÃO DE METAS PDI */
      $scope.updateMetaDp = function(meta_id, type, content) {
            
            $scope.refreshCareerBlock();
            $timeout(function() {
                  if (type == 'name') {
                        var field_id = '#goal_meta_name_' + meta_id;
                        var data = $(field_id).val();
                  }
                  if (type == 'situacao') {
                        var field_id = '#id01_' + meta_id;
                        if ($(field_id).prop('checked') == true) {
                              var data = 1;
                        } else {
                              var data = 0;
                        }
                  }
                  $carreers['update_user_meta_dp'](meta_id, type, data).then(function(results) {
                        if(content != data){
                              toastr.success("Meta salva com sucesso!");
                        }
                  });
            }, 200);
      }
      
      $scope.refreshCareerBlock = function() {
            $timeout(function() {
                  $('#carrier_block_hgt').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  }).resize();
                  $('.career_sidebar_details').niceScroll({
                        cursorcolor: "#3fb0ac",
                        cursorborder: "none"
                  }).resize();
                  $('#crossfeed_status').select2({
                        maximumSelectionSize: 1
                  });
                  $('#crossfeed_time').select2({
                        maximumSelectionSize: 1
                  });
                  $('#crossfeed_type').select2({
                        maximumSelectionSize: 1
                  });
                  $('#ativade_situacao').select2();
                  // $('#ativade_situacao').select2('val','3');
                  $('#ativade_time').select2({
                        maximumSelectionSize: 1
                  });
            }, 400);
      }

      $scope.removeCargoAndRefresh = function(ur) {
            $('#cargo_objevio .select2').select2("val", "");
            $scope.removeAddedCargo(ur);
      };
      $scope.removeCargoAndRefreshFilter = function(ur) {
            $('#cargo_objevio_filter .select2').select2("val", "");
            $scope.removeAddedCargoFilter(ur);
      };
      $scope.Development_list = function() {
            $scope.showViewModel = false;
            $scope.carreerTab();
      }
      $scope.datafunction = function() {
            $timeout(function() {
                  if ($.isFunction($.fn.datepicker)) {
                        $(".data").each(function(i, el) {
                              var $this = $(this),
                                    opts = {
                                          format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                                          startDate: attrDefault($this, 'startDate', ''),
                                          endDate: attrDefault($this, 'endDate', ''),
                                          daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                                          startView: attrDefault($this, 'startView', 0),
                                          language: 'pt-BR',
                                          rtl: rtl()
                                    },
                                    $n = $this.next(),
                                    $p = $this.prev();
                              $this.datepicker(opts);
                              if ($n.is('.input-group-addon') && $n.has('a')) {
                                    $n.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                              if ($p.is('.input-group-addon') && $p.has('a')) {
                                    $p.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                        });
                  }
            }, 100);
      }
      $scope.NewDevelopment = function($id) {
            $scope.refreshCareerBlock();
            delete $scope.development_updates;
            delete $scope.feedbacktouser;
            delete $scope.feedback_description;
            delete $scope.feedback_deadline;
            delete $scope.feedback_deadline_date;
            $timeout(function() {
                  $("#form-new-development #feedbacktouser_cross").select2();
                  $scope.datafunction();
                  $scope.showViewModel = false;
            }, 100);
            $carreers['getUserDevQuestions']().then(function(response) {
                  $scope.devQuestions = response;
            });
            $scope.viewFullCrossfeed = false;
            $scope.addCrossfeedMode = true;
            $scope.editCrossfeedMode = false;
      }
      $scope.returnToMainCareerCrossfeed = function() {
            $scope.viewFullCrossfeed = true;
            $scope.addCrossfeedMode = false;
            $scope.editCrossfeedMode = false;
      }
      $scope.submitNewDevelopmentUpdate = function() {
            
            $('#form-new-development').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        feedbacktouser: 'required',
                        feedbacktouser: {
                              valueNotEquals: "? undefined:undefined ?"
                        },
                        feedback_description: 'required',
                        feedback_deadline: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#form-new-development .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#form-new-development .error-message').addClass('hide');
                        $('#form-new-development .salvar').button('loading');
                        var $data = $("#form-new-development").serialize();
                        $carreers['save_user_development_update_profile']($data).then(function(response) {
                              if (!response.error_message) {
                                    toastr.success('Adicionado com sucesso.');
                              } else {
                                    toastr.error(response.error_message);
                              }
                              $timeout(function() {
                                    $scope.carreerTab()
                              }, 500);
                        });
                        $('#form-new-development .salvar').button('reset');
                        $('#form-new-development')[0].reset();
                  }
            });
      }
      $scope.replyNewDevelopmentUpdate = function() {
            $('#form-reply-development').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        feedbacktouser: 'required',
                        feedbacktouser: {
                              valueNotEquals: "? undefined:undefined ?"
                        },
                        feedback_description: 'required',
                        feedback_deadline: 'required'
                  },
                  success: function(label, element) {
                        
                        $(element).parent('div').removeClass('validate-has-error');
                        
                        /* enviar form de crossfeed */
                        $('#form-reply-development .save').button('loading');
                        var $data = $("#form-reply-development").serialize();
                        $carreers['reply_user_development_update_profile']($data).then(function(response) {
                              if (!response.error_message) {
                                    toastr.success('Adicionado com sucesso.');
                              } else {
                                    toastr.error(response.error_message);
                              }
                              $timeout(function() {
                                    $scope.carreerTab()
                              }, 200);
                        }); 
                        $('#form-reply-development .save').button('reset');
                        $('#form-reply-development')[0].reset();
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#form-new-development .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#form-new-development .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#form-reply-development .error-message').addClass('hide');
                        $('#form-reply-development .salvar').button('loading');
                        var $data = $("#form-reply-development").serialize();
                        $carreers['reply_user_development_update_profile']($data).then(function(response) {
                              if (!response.error_message) {
                                    toastr.success('Adicionado com sucesso.');
                              } else {
                                    toastr.error(response.error_message);
                              }
                              $timeout(function() {
                                    $scope.carreerTab()
                              }, 200);
                        }); 
                        $('#form-reply-development .salvar').button('reset');
                        $('#form-reply-development')[0].reset();
                  }
                  
            });
      }
      $scope.showDevelopmentUpdate = function($id_feedback, feedback_type = '') {
            $scope.refreshCareerBlock();
            $scope.feedback_type = feedback_type;

            $scope.feedback_justificativa_div = true;
            $scope.feedback_rejeitado = false;
            
            $timeout(function() {
                  $scope.showViewModel = true;
                  $('#form-reply-development #feedbacktouser_cross').prop('disabled', true);
                  $('#form-reply-development #feedback_description_cross').prop('disabled', true);
                  $('#form-reply-development #feedback_deadline_cross').prop('disabled', true);
                  $scope.datafunction();
            }, 300);
            $carreers['get_development_questionerios_profile']($id_feedback).then(function(response) {
                  $scope.viewDevUpdates = false;
                  $scope.dev_data = response;
                  $scope.destination_user = response[0].destination_user;
                  $scope.user_response = response[0].user_response;
                  $scope.user_justificativa = response[0].user_justificativa;
                  $scope.devquestions = response[0].questions;
                  $scope.id_questionario_dev = response[1];
                  $scope.id_feedback_dev = response[0].id;
                  $scope.id_feedback_destino = response[0].id_usuario_solicitante;
                  $scope.feedbacktouser = response[0].id_usuario_destino;
                  $scope.feedback_description = response[0].response;
                  $scope.feedback_deadline = response[0].feedback_deadline;
                  $scope.feedback_deadline_date = response[0].feedback_deadline_date;
                  $scope.feedback_description = response[0].response;
                  $scope.posted_date = response[0].posted_date;
                  if (response[0].situacao == 1) {
                        $carreers['get_user_development_update_by_id']($id_feedback).then(function(response) {
                              $scope.viewDevUpdates = true;
                              $scope.view_questions = response.questions;
                              // console.log($scope.view_questions);
                        });
                  }
                  if ($scope.dev_data[0].id_usuario_destino == $scope.user.id) {
                        $scope.devAuthorised = true;
                  } else {
                        $scope.devAuthorised = false;
                  }
            })
            $scope.viewFullCrossfeed = false;
            $scope.addCrossfeedMode = false;
            $scope.editCrossfeedMode = true;
      }
      $scope.updateFeedbackDeadline = function(id_feedback) {
            var updated_date = $('#feedback_deadline_date').val();
            $carreers['update_feedback_deadline'](id_feedback, updated_date).then(function() {
                  $scope.showDevelopmentUpdate(id_feedback, $scope.feedback_type);
                  toastr.success("Updated successfully");
                  $timeout(function() {
                        $scope.carreerTab();
                  }, 300);
            });
      }
      $scope.updateFeedbackPrivacyStatus = function(id_feedback) {
            var feedback_status = $("input[name='crossfeeds_status']:checked").val();
            $carreers['update_feedback_privacy_status'](id_feedback, feedback_status).then(function() {
                  toastr.success("Atualizado com sucesso.");
                  $timeout(function() {
                        $scope.carreerTab();
                  }, 300);
            });
      }
      $scope.activity_details_career = function(activity_id) {
            $scope.refreshCareerBlock();
            $users['activity_detail_career'](activity_id).then(function(res) {
                  $scope.activity_detail = res;
            });
            $scope.viewFullActivity = false;
            $scope.activityViewDetail = true;
      }
      $scope.returnToMainCareerActivity = function() {
            $scope.viewFullActivity = true;
            $scope.activityViewDetail = false;
      }
      $scope.openTypeCommentsUnread = function() {
            $.each($scope.eloslist, function(index, value) {
                  if ($scope.eloslist[index].tipo == "comment" && $scope.eloslist[index].lido == 0) {
                        console.log("loadMore");
                        $scope.loadMoreComments($scope.eloslist[index]);
                        $scope.eloslist[index].showComments = true;
                        setTimeout(function() {
                              $('.form-elo-comment textarea').each(function(index, value) {
                                    $scope.setMentionFeature($(this));
                              });
                        }, 200);
                  }
            });
      }
});
elofy.controller('tagsCtrl', function globalCtrl($scope, $timeout, $tags, $translate) {
      $scope.tag = tag;
      $('#results a').click(function(e) {
            e.preventDefault();
            $(this).tab('show');
      });
      $tags['search']($scope.tag).then(function(response) {
            $scope.results = response;
            $timeout(function() {
                  $("span.pie").peity("pie");
            });
      });
});
elofy.controller('taticCtrl', function globalCtrl($scope, $routeParams, $window, $timeout, $interval, $sce, $filter, $tatics, $key, $activities, $tags, $users, $teams, $cycles, $integration, $translate, $globals) {
      $('#general_select_team').select2('destroy');
      $('#general_select_team').addClass('visible');
      $('#general_select_team_status').select2('destroy');
      $('#general_select_team_status').addClass('visible');
      $('#general_select_team_selected').select2('destroy');
      $('#general_select_team_selected').addClass('visible');
      $('.general_select').select2();

      /* import key result */
      $scope.addKeyResult = function() {
            var addingMode = $('#cmbAddObj').val();
            if (addingMode == 0 && addingMode != '') {
                  $scope.modalKey(0);
            } else if(addingMode == 1 && addingMode != '') {
                  $scope.showImportModal();
            }
      }
      $scope.showImportModal = function() {
            $('#query_keyresult').val("");
            if ($scope.user.empresa.contrato_metas == 1) {
                  $tatics['getImportIndicadors']().then(function(response) {
                        angular.forEach(response, function(item, key) {
                              if (item.minimo != null && item.minimo != 'undefined')
                                    item.inferior = formatPattern(item.minimo, item.pattern);
                              if (item.maximo != null && item.maximo != 'undefined')
                                    item.superior = formatPattern(item.maximo, item.pattern);
                              if (item.target != null && item.target != 'undefined')
                                    item.target = formatPattern(item.target, item.pattern);
                        });
                        $scope.importKeyResults = response;
                        $scope.$apply();
                  });
            } else {
                  $tatics['getImportKeyResults']().then(function(response) {
                        $scope.importKeyResults = response;
                        $scope.$apply();
                  });
            }
            $('#modal-key-import').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.selectImportObj = function(keyresult) {
            angular.forEach($scope.importKeyResults, function(item, key) {
                  if (item.key_id != keyresult.key_id) {
                        item.status = 0;
                  }
            });
      }
      $scope.importKeyResult = function() {
            var selectedCount = 0;
            var selectedItem;
            angular.forEach($scope.importKeyResults, function(item, key) {
                  if (item.status == 1) {
                        selectedCount++;
                        selectedItem = item;
                        return;
                  }
            });
            if (selectedCount == 0) { alert("Selecione um resultado chave para importar");}
            else {
                  var data = {
                        key_id: selectedItem.key_id,
                        tatic_id: $scope.id,
                        nomeRChave: selectedItem.nomeRChave,
                        descricao: selectedItem.descricao,
                        frequencia: selectedItem.frequencia,
                        unidade_meta: selectedItem.unidade_meta,
                        ponto_partida: selectedItem.ponto_partida,
                        meta_final_prevista: selectedItem.meta_final_prevista,
                        tipo_calculo: selectedItem.tipo_calculo,
                        type: selectedItem.type,
                        direcao: selectedItem.direcao,
                        id_integracao: selectedItem.id_integracao,
                        frequencia_int: selectedItem.frequencia_int,
                        manutencao: selectedItem.manutencao,
                        periodicidade: selectedItem.periodicidade,
                        medicao: selectedItem.medicao,
                        medicao_projetada: selectedItem.medicao_projetada,
                        desempenho: selectedItem.desempenho,
                        progresso: selectedItem.progresso,
                        progresso_projetado: selectedItem.progresso_projetado,
                        progresso_ajustado: selectedItem.progresso_ajustado,
                        peso: 1
                  }
                  if ($scope.user.empresa.contrato_metas == 1) {
                        data.limite_inferior = selectedItem.minimo;
                        data.limite_superior = selectedItem.maximo;
                        data.meta_final_prevista = selectedItem.target;
                        data.class_medicao = selectedItem.class_medicao;
                        data.pattern = selectedItem.pattern;
                        data.id_kr_sistema_origem = selectedItem.id_kr_sistema_origem;
                        data.forma_atualizacao = selectedItem.forma_atualizacao;
                        data.peso = selectedItem.peso;
                  }
                  $('#form-key-import .salvar').button('loading');
                  $key['import'](data).then(function(response) {
                        if (response.error == false) {
                              $scope.loadTatics();
                        }
                        $('#form-key-import .salvar').button('reset');
                        $('#modal-key-import').modal('hide');
                  });
            }
      }
      $('#modal-key-import').on('hidden.bs.modal', function () {
          $scope.query = '';
          var cmbAdd = $('#cmbAddObj');
          cmbAdd.val('');
          $scope.addMode = '';
          cmbAdd.trigger("change");
      })
      $('#modal-key').on('hidden.bs.modal', function () {
          var cmbAdd = $('#cmbAddObj');
          cmbAdd.val('');
          $scope.addMode = '';
          cmbAdd.trigger("change");
      })
      /* import key result end */

      $scope.selectedYear = new Date().getFullYear();
      $scope.id = $routeParams.taticId;
      $scope.keyId = $routeParams.keyId;
      $scope.activityId = $routeParams.activityId;
      $scope.first = false;

      $scope.divideKeyGloabls = function() {
            if ($scope.user.empresa.contrato_metas == 1) {
                  $scope.tatic.keyGlobals = [];
                  $scope.tatic.keyNotGloabls = [];
                  angular.forEach($scope.tatic.keys, function(item, key) {
                        if (item.global == 1) $scope.tatic.keyGlobals.push(item);
                        else if (item.global == 0) $scope.tatic.keyNotGloabls.push(item);
                  });
            }
      }

      $scope.$watch('user', function(newValue, oldValue) {
            if (typeof newValue.empresa != 'undefined') {
                  if ($scope.tatic) {
                        $scope.divideKeyGloabls();
                  } else {
                        $scope.$watch('tatic', function(newValue) {
                              if (newValue != null) $scope.divideKeyGloabls();
                        });
                  }
            }
      });

      $scope.loadTatics = function() {
            $tatics['details']($scope.id).then(function(response) {
                  $scope.tatic = response;
                  var $keys = $scope.tatic.keys;
                  $keys.map(function(v) {
                        v.open = true
                  });
                  angular.forEach($keys, function(item, key) {
                        item.inferior = formatPattern(item.inferior, item.pattern);
                        item.goal = formatPattern(item.goal, item.pattern);
                        item.superior = formatPattern(item.superior, item.pattern);
                        item.atual = formatPattern(item.atual, item.pattern);

                        item.de = formatPattern(item.de, item.pattern);
                        item.para = formatPattern(item.para, item.pattern);

                        if (item.pattern == 0) {
                              item.de = formatPercent(item.de);
                              item.para = formatPercent(item.para);
                              item.atual = formatPercent(item.atual);
                        }
                  });
                  console.log("tatics:", $scope.tatic);
                  $scope.$parent.tags = response.tags;
                  var tagsNames = new Bloodhound({
                        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                        queryTokenizer: Bloodhound.tokenizers.whitespace,
                        local: $scope.$parent.tags
                  });
                  tagsNames.initialize();
                  $('#form-obj .input-tags-key-objective').tagsinput({
                        typeaheadjs: {
                              name: 'tagnames',
                              displayKey: 'name',
                              valueKey: 'name',
                              source: tagsNames.ttAdapter()
                        }
                  });
                  $('#form-obj').on('keyup keypress', function(e) {
                        var keyCode = e.keyCode || e.which;
                        if (keyCode === 13) {
                              e.preventDefault();
                              return false;
                        }
                  });
                  $('#form-obj .input-tags-key-objective').on('itemAdded', function(event) {
                        var tag = event.item;
                  });
                  for (var i = 0; i < response.tags.length; i++) {
                        $('#form-obj .input-tags-key-objective').tagsinput('add', response.tags[i].name);
                  };
                  $tatics['get_parent_objectives']($scope.selectedYear, $scope.id).then(function(response) {
                        $('#parent_objectives').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                        $scope.parentgoals = response;
                  });
                  $tatics['get_child_objectives']($scope.selectedYear, $scope.id).then(function(response) {
                        $('#child_objectives').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                        $scope.childgoals = response;
                  });
                  $scope.percentageValue = 0;
                  if ($scope.tatic.percentage != '0') {
                        var interval = $interval(function() {
                              $scope.percentageValue = $scope.percentageValue + 1;
                              if ($scope.percentageValue == $scope.tatic.percentage) {
                                    $interval.cancel(interval);
                              }
                        }, 10);
                  }
                  $cycles['get']($scope.tatic.id).then(function(response) {
                        $scope.cycles = response;
                        $scope.cyclesId = [];
                        for (var i = 0; i < $scope.tatic.cycles.length; i++) {
                              $scope.cyclesId.push($scope.tatic.cycles[i].id);
                        };
                        $timeout(function() {
                              $('.multiple.cycles').select2();
                        }, 10);
                  });
                  $teams['getAllTeams']().then(function(response) {
                        $scope.teams = response;
                  });
                  $users['get']().then(function(response) {
                        $scope.users = response;
                        $(".scroll").each(function() {
                              var self = $(this);
                              self.mCustomScrollbar({
                                    theme: "minimal",
                                    advanced: {
                                          updateOnBrowserResize: true,
                                          updateOnContentResize: true
                                    }
                              });
                        });
                        $scope.checkId = function(id) {
                              var test = false;
                              for (var i = 0, length = $scope.tatic.users.length; i < length; i++) {
                                    if (id == $scope.tatic.users[i].id) {
                                          test = true;
                                    }
                              };
                              return test;
                        }
                        $scope.checkCycleId = function(id) {
                              var test = false;
                              for (var i = 0, length = $scope.tatic.cycles.length; i < length; i++) {
                                    if (id == $scope.tatic.cycles[i].id) {
                                          test = true;
                                    }
                              };
                              return test;
                        }
                        $scope.checkTeamId = function(id) {
                              var test = false;
                              for (var i = 0, length = $scope.tatic.shared_teams.length; i < length; i++) {
                                    if (id == $scope.tatic.shared_teams[i].id) {
                                          test = true;
                                    }
                              };
                              return test;
                        }
                  });
                  $tags['get']().then(function(response) {
                        $scope.tags = response;
                        var tagsNames = new Bloodhound({
                              datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                              queryTokenizer: Bloodhound.tokenizers.whitespace,
                              local: $scope.tags
                        });
                        tagsNames.initialize();
                        $('.search-all-tags').typeahead({
                              hint: true,
                              highlight: true,
                              minLength: 1
                        }, {
                              name: 'tagnames',
                              displayKey: 'name',
                              valueKey: 'name',
                              source: tagsNames.ttAdapter()
                        });
                  });
                  $scope.numberLessEdit = function() {
                        var val = $scope.tatic.weight;
                        var newVal = val > 1 ? val - 1 : 1;
                        $scope.tatic.weight = newVal;
                  }
                  $scope.numberMoreEdit = function() {
                        var val = $scope.tatic.weight;
                        var newVal = val < 10 ? val + 1 : 10;
                        $scope.tatic.weight = newVal;
                  }
                  $timeout(function() {
                        $("span.pie").peity("pie");
                        if ($scope.keyId && !$scope.activityId) {
                              $scope.modalKey($scope.keyId);
                        }
                        if ($scope.activityId) {
                              $scope.openActivities($scope.keyId);
                        }
                  }, 10);
                  $scope.getallcomments = function() {
                        $tatics['getObjectivoComments']($scope.tatic.id).then(function(resp) {
                              $scope.obj_comments = resp;
                        });
                  }
                  $scope.getallcomments();
                  $scope.saveNewCommentObjetivo = function(event, comment, origin) {
                        console.log('event', event);
                        console.log('comment', event);
                        console.log('aasdasd',origin);
                        var elem = angular.element(event.currentTarget);
                        var user_comment = elem.find("textarea").val();
                        if (origin){
                              user_comment = "Reprovei este objetivo conforme minha justificativa: " + user_comment;  
                        }
                        if (user_comment == "") {
                              toastr.error("Comentário não pode ser vazio.");
                              elem.parent().find("form textarea").addClass("error");
                              return;
                        }
                        elem.parent().find("form textarea").removeClass("error");
                        var id_objetivo = $scope.tatic.id;
                        var parent_id = 0;
                        $tatics['saveObjectivoComments'](id_objetivo, parent_id, user_comment).then(function(resp) {
                              toastr.success("Comentário adicionado.");
                              $('#form-elo')[0].reset();
                              $scope.comment_listsection = true;
                              $scope.comment_addsection = false;
                              $scope.getallcomments();
                        });
                  }
                  $scope.likeobjetivo = function(event, comment) {
                        // var elem = angular.element(event.currentTarget);
                        // elem.addClass("liked");
                        //*if (comment.i_liked == 0) {
                        //*comment.total_likes++;
                        //*comment.likes = null; // para obrigar o recarregamento do hover com lista de likes
                        $tatics['likeobjetivo'](comment).then(function(response) {
                              // por uma questão de responsividade, é preferível que a interface atualize ao clicar, mesmo que a função não tenha retornado do banco de dados
                              // então não executo nenhuma função.
                              $scope.getallcomments();
                        });
                        //*}
                        comment.i_liked = 1;
                  }
                  $scope.saveNewEmojiObjetivo = function(event, emojitipo, id_objetivo_comentario) {
                        var elem = angular.element(event.currentTarget);
                        var emoji_tipo = emojitipo;
                        var id_objetivo = $scope.tatic.id;
                        //*var parent_id     = 0;
                        $tatics['saveObjectivoEmojiFaces'](id_objetivo, id_objetivo_comentario, emoji_tipo).then(function(resp) {
                              toastr.success("reação adicionada com sucesso!!");
                              $scope.getallcomments();
                        });
                  }
            });
      }

      $scope.loadTatics();
      
      $scope.comment_listsection = true;
      $scope.comment_addsection = false;
      /* tatic favorite */
      $scope.favorite = function(tatic) {
            var strategicValue = (tatic.estrategico == 1) ? 0 : 1;
            $tatics['updateEstrategico'](tatic.id, strategicValue).then(function(response) {
                  toastr.success("Estratégico atualizado");
                  tatic.estrategico = strategicValue;
            });
      }

      /* tatic favorite end */
      /* tatic activity */
      $scope.update_actiivity_id = 0;
      $scope.finishedSituation = 0;
      $scope.cancelledSituation = 0
      $scope.addActivityComment = function() {
            var commentText = $('#comment_content').val();
            if (!commentText.length || commentText == '') {
                  return;
            }
            $activities['addActivityComment']($scope.update_actiivity_id, commentText).then(function(response) {
                  $('#comment_content').val('');
                  var actComment = {};
                  actComment.commentid = response;
                  actComment.activityid = $scope.update_actiivity_id;
                  actComment.comentario = commentText;
                  actComment.commentdate = '0 min(s)';
                  actComment.id_usuario = $scope.user.id;
                  actComment.nome_usuario = $scope.user.name;
                  actComment.url_image = $scope.userDetailImage ? $scope.userDetailImage : $scope.user.md_image;
                  $scope.activityComments.unshift(actComment);
            });
      }
      $scope.updateActivityProgress = function() {
            var updatePercentage = $('#update-percentage').val();
            var updateFinished = $("#check-finished").is(":checked");
            var updateCancelled = $("#check-cancelled").is(":checked");
            var activity_id = $scope.update_actiivity_id;
            $activities['updateActivityProgress'](activity_id, updateFinished, updateCancelled, updatePercentage).then(function(response) {
                  $scope.update_actiivity_id = 0;
                  var flag = updateFinished ? 1 : 0;
                  flag = updateCancelled ? 3 : flag;
                  var message = "Atividade Atualizada";
                  if (flag == 1) message = "Atividade Finalizada";
                  else if (flag == 3) message = "Atividade Cancelada";
                  toastr.success(message);
                  $('#tatic-activity-modal').modal('hide');
                  $scope.update_tactivity.percentage = updatePercentage;
                  $scope.update_tactivity.situacao = flag;
            });
      }
      $scope.changeSituation = function(situation) {
            if (situation == '3' && $scope.cancelledSituation) {
                  $("#check-finished").removeAttr("checked");
                  $scope.finishedSituation = 0;
            }
            if (situation == '1' && $scope.finishedSituation) {
                  $("#check-cancelled").removeAttr("checked");
                  $scope.cancelledSituation = 0;
            }
      }
      $scope.showTaticModal = function(activity, event) {
            console.log("tatic modal!!!!", activity);
            $scope.activityComments = [];
            event.stopPropagation();
            var activity_id = activity.id;
            var activity_percentage = activity.percentage;
            $scope.update_tactivity = activity;
            $scope.update_actiivity_id = activity_id;
            $activities['getActivityComments']($scope.update_actiivity_id).then(function(response) {
                  $scope.activityComments = response;
            });
            $('.update-content').removeClass("disabled-content");
            if (activity.situacao == 1 || activity.situacao == 3 || activity.responsible != $scope.user.id) $('.update-content').addClass("disabled-content");
            $("#update-percentage").val(activity_percentage);
            $("#check-finished").removeAttr("checked");
            $("#check-cancelled").removeAttr("checked");
            $('#tatic-activity-modal').modal('show', {
                  backdrop: 'static'
            });
            $timeout(function() {
                  $(".slider").slider({
                        range: "min",
                        min: 0,
                        max: 100,
                        value: activity_percentage,
                        create: function() {
                              var $handles = $(".slider").find('.ui-slider-handle');
                              $handles.html('<span class="ui-label">' + $(this).slider("value") + '</span>');
                        },
                        slide: function(event, ui) {
                              $("#update-percentage").val(ui.value);
                              var $handles = $(".slider").find('.ui-slider-handle');
                              $handles.html('<span class="ui-label">' + ui.value + '</span>');
                        }
                  });
                  $(".slider .ui-slider-handle .ui-label").text(activity_percentage);
            });
            var startPos = $("#slider").slider("value");
            var endPos = '';
            $(".slider").on("slidestop", function(event, ui) {
                  endPos = ui.value;
                  if (startPos != endPos) {
                        console.log("slider value:", endPos);
                        if (endPos == 100) {
                              $("#check-finished").prop("checked", true);
                              $("#check-cancelled").removeAttr("checked");
                        } else {
                              $("#check-finished").removeAttr("checked");
                        }
                  }
                  startPos = endPos;
            });
      }
      /* tatic activity end */
      $scope.commentObj = function(event, comment) {
            var elem = angular.element(event.currentTarget);
            var user_comment = elem.find("textarea").val();
            if (user_comment == "") {
                  toastr.error("Comment box can't be empty");
                  elem.parent().find("form").addClass("error");
                  return;
            }
            elem.parent().find("form").removeClass("error");
            var id_objetivo = comment.id_objetivo;
            var parent_id = comment.id_objetivo_comentario;
            var form_id = "#subcomment_" + parent_id;
            $tatics['saveObjectivoComments'](id_objetivo, parent_id, user_comment).then(function(resp) {
                  toastr.success("Comentário adicionado.");
                  $scope.comment_listsection = true;
                  $scope.comment_addsection = false;
                  $scope.getallcomments();
                  $timeout(function() {
                        $(form_id).addClass('show');
                  }, 1300);
            });
      }
      $scope.toggleShowComments = function(id_form) {
            var form_id = "#form_" + id_form;
            $(form_id).toggleClass('show');
      }
      $scope.toggleSubComment = function(id_comments) {
            var form_id = "#subcomment_" + id_comments;
            $(form_id).toggleClass('show');
      }
      $scope.newObjectivoComment = function() {
            $scope.comment_listsection = false;
            $scope.comment_addsection = true;
      }
      $scope.cancelnewObjectivoComment = function() {
            $scope.comment_listsection = true;
            $scope.comment_addsection = false;
      }
      $scope.return = function() {
            //$window.history.back();
            window.location = document.referrer;
      }
      $scope.newTitle = '';
      $scope.editingTitle = false;
      $scope.editTitle = function() {
            $scope.editingTitle = true;
      }
      $scope.submitTitle = function() {
            var newTitle = $('#editTitle').val();
            if (newTitle) {
                  $scope.editingTitle = false;
                  $tatics.edit['title']($scope.tatic.id, newTitle).then(function(title) {
                        $scope.tatic.title = title;
                  });
            }
      }
      $scope.statusText = function(value) {
            var items = ['Pendente', 'Finalizado', 'Cancelado', 'Em andamento'];
            return items[value];
      }
      $scope.submitCycles = function() {
            if ($scope.cyclesId.length) {
                  $tatics.edit['cycles']($scope.tatic.id, $scope.cyclesId).then(function(cycles) {
                        $scope.tatic.cycles = cycles;
                  });
            }
      }
      $scope.editTeam = function(teamId) {
            $tatics.edit['team']($scope.tatic.id, teamId).then(function(team) {
                  $scope.tatic.team = team;
            });
      }
      $scope.editUser = function(userId) {
            $tatics.edit['user']($scope.tatic.id, userId).then(function(user) {
                  $scope.tatic.user = user;
            });
      }
      $scope.showRespError = function() {
            alert('Pelo menos um responsável deve ser verificado');
      }
      $scope.showTeamError = function() {
            alert('Pelo menos uma equipe deve ser verificada');
      }
      $scope.removeResponsible = function(userId) {
            if ($scope.tatic.users.length <= 1) {
                  alert('At least 1 responsible is required.');
            } else {
                  $tatics.edit.users['remove']($scope.tatic.id, userId).then(function(users) {
                        $scope.tatic.users = users;
                  });
            }
      }
      $scope.removeCycleTatic = function(id_ciclo) {
            $tatics.edit['removecycle']($scope.tatic.id, id_ciclo).then(function(res) {
                  $scope.tatic.cycles = res.cycles;
            });
      }
      $scope.addCycleTatic = function(id_ciclo) {
            $tatics.edit['addcycle']($scope.tatic.id, id_ciclo).then(function(res) {
                  $scope.tatic.cycles = res.cycles;
            });
      }
      $scope.removeSharedTeam = function(id_time) {
            $tatics.edit['removeshrdteam']($scope.tatic.id, id_time).then(function(res) {
                  $scope.tatic.shared_teams = res.shared_teams;
            });
      }
      $scope.addSharedTeam = function(id_time) {
            $tatics.edit['addteamobj']($scope.tatic.id, id_time).then(function(res) {
                  $scope.tatic.shared_teams = res.shared_teams;
            });
      }
      $scope.changeGoalType = function(type) {
            $tatics.edit['updategoaltype']($scope.tatic.id, type).then(function(res) {
                  $scope.tatic = res.tatic;
                  $scope.tatic.type = res.tipo;
            });
      }
      $scope.changeTaticStatus = function(status) {
            $tatics.edit['updategoalstatus']($scope.tatic.id, status).then(function(res) {
                  $scope.tatic.status = res;
            });
      }
      $scope.editerGoal = function() {
            $scope.editerGoalModel = true;
            if ($scope.tatic.estrategico == 1) {
                  $scope.estrategicotacticomodel = true;
            }
            var link_type = 2;
            if ($scope.tatic.parent.estrategico == 0 && $scope.tatic.parent.parent_id == null) {
                  link_type = 1;
            } else if ($scope.tatic.parent.estrategico == 1) {
                  link_type = 3;
            }
            if (link_type == 1) {
                  $scope.direcionadorperfil = true;
                  $('#direcionador-perfil').prop('checked', true);
            } else if (link_type == 2) {
                  $scope.objetivoperfil = true;
                  $('#objetivo-perfil').prop('checked', true);
            } else if (link_type == 3) {
                  $scope.estrategicoperfil = true;
                  $('#estrategico-perfil').prop('checked', true);
            }
            $timeout(function() {
                  $scope.linkTypePerfil(link_type);
            }, 100);
      }
      $scope.estrategicotacticofun = function() {
            if ($("#estrategicotactico").is(":checked")) {
                  $scope.estrategicotacticomodel = true;
            } else {
                  $scope.estrategicotacticomodel = false;
                  $scope.direcionadorperfil = true;
                  $('#direcionador-perfil').prop('checked', true);
                  $timeout(function() {
                        $scope.linkTypePerfil(1);
                  }, 100);
            }
      }
      $scope.direcionadorperfil = false;
      $scope.estrategicotacticomodel = false;
      $scope.objetivoperfil = false;
      $scope.estrategicoperfil = false;
      $scope.link_text_perfil = 'Direcionador';
      $scope.linkTypePerfil = function($type) {
            if ($("#direcionador-perfil").prop('checked') || $("#objetivo-perfil").prop('checked') || $("#estrategico-perfil").prop('checked')) {
                  if ($type == 1) {
                        $scope.link_text_perfil = 'Direcionador';
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                              $scope.ObjectiveIdPerfil = $scope.tatic.parent_id;
                              $("#okr-objectives-perfil").val($scope.tatic.parent_id);
                              $timeout(function() {
                                    $("#okr-objectives-perfil").select2({
                                          allowClear: true
                                    });
                              }, 100);
                        });
                        delete $scope.objetivoperfil;
                        delete $scope.estrategicoperfil;
                  }
                  if ($type == 2) {
                        $scope.link_text_perfil = 'Objetivo';
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                              $scope.ObjectiveIdPerfil = $scope.tatic.parent_id;
                              $("#okr-objectives-perfil").val($scope.tatic.parent_id);
                              $timeout(function() {
                                    $("#okr-objectives-perfil").select2({
                                          allowClear: true
                                    });
                              }, 100);
                        });
                        delete $scope.direcionadorperfil;
                        delete $scope.estrategicoperfil;
                  }
                  if ($type == 3) {
                        $scope.link_text_perfil = 'Estrategico';
                        $globals['get_objectives']($scope.selectedYear, $type).then(function(response) {
                              $scope.objectives = response;
                              $scope.ObjectiveIdPerfil = $scope.tatic.parent_id;
                              $("#okr-objectives-perfil").val($scope.tatic.parent_id);
                              $timeout(function() {
                                    $("#okr-objectives-perfil").select2({
                                          allowClear: true
                                    });
                              }, 100);
                        });
                        delete $scope.direcionadorperfil;
                        delete $scope.objetivoperfil;
                  }
            } else {
                  $("#okr-objectives-perfil").select2({
                        allowClear: true
                  });
                  $scope.objectives = [];
                  delete $scope.objetivoperfil;
                  delete $scope.direcionadorperfil;
            }
      }
      $scope.editSubmitGoal = function() {
            delete $scope.editerGoalModel;
            $scope.submitParentData();
            $scope.submitDescription();
            $scope.submitTitle();
            var tags = $('#key-tags').val();
            $tatics.edit['updategoaltags']($scope.tatic.id, tags).then(function(res) {
                  $scope.tatic.tags = res;
            });
            toastr.success('Salvo com sucesso.');
      }
      $scope.changeAtivoType = function(ativo) {
            $tatics.edit['updateativotype']($scope.tatic.id, ativo).then(function(res) {
                  $scope.tatic.active = res;
            });
      }
      $scope.changeCorType = function(value) {
            $tatics.edit['updatecortype']($scope.tatic.id, value).then(function(res) {
                  $scope.tatic.color = res;
            });
      }
      $scope.changeAtivoTypeAtivade = function(ativo) {
            if (ativo == 0) {
                  $scope.activity_status = 0;
            } else {
                  $scope.activity_status = 1;
            }
      }
      $scope.addResponsible = function(userId) {
            $tatics.edit.users['add']($scope.tatic.id, userId).then(function(users) {
                  $scope.tatic.users = users;
            });
      }
      $scope.removeTag = function(tagId) {
            $tatics.edit.tags['remove']($scope.tatic.id, tagId).then(function(tags) {
                  $scope.tatic.tags = tags;
            });
      }
      $scope.submitTag = function() {
            var newTag = $('#newTag').val();
            if (newTag) {
                  $tatics.edit.tags['add']($scope.tatic.id, newTag).then(function(tags) {
                        $scope.tatic.tags = tags;
                  });
            }
      }
      $scope.submitWeight = function() {
            var newWeight = $('#newWeight').val();
            if (newWeight) {
                  $tatics.edit['weight']($scope.tatic.id, newWeight).then(function(weight) {
                        $scope.tatic.weight = weight;
                        $('.addWeight.dropdown.open .dropdown-toggle').dropdown('toggle');
                  });
            }
      }
      $scope.truncatToggle = false;
      $scope.truncat = function() {
            $scope.truncatToggle = $scope.truncatToggle ? false : true;
      }
      $scope.testHeight = function() {
            var truncat = $('.text-truncat .truncat').height(),
                  full = $('.text-truncat .full').removeClass('hidden').height();
            $('.text-truncat .full').addClass('hidden');
            return full > truncat ? true : false;
      }
      $scope.editingDescription = false;
      $scope.editDescription = function() {
            $scope.editingDescription = true;
      }
      $scope.submitDescription = function() {
            var newDescription = $('#newDescription').val();
            $scope.editingDescription = false;
            $tatics.edit['description']($scope.tatic.id, newDescription).then(function(description) {
                  $scope.tatic.description = description;
                  $scope.truncatToggle = false;
                  $scope.testHeight();
            });
      }
      $scope.submitParentData = function() {
            var estrategico = 0;
            if ($('#estrategicotactico').is(":checked")) {
                  estrategico = 1;
            }
            var parent_id = $('#okr-objectives-perfil').val();
            /* var link_type    =   0;
             if($("#direcionador-perfil").is(":checked")){
             var link_type   =   1;
             }else if($("#objetivo-perfil").is(":checked")){
             var link_type   =   2;
             }else if($("#estrategico-perfil").is(":checked")){
             var link_type   =   3;
             } */
            $tatics.edit['goalparentdata']($scope.tatic.id, estrategico, parent_id /* , link_type */ ).then(function(goaldata) {
                  $scope.tatic = goaldata;
                  $tatics['get_parent_objectives']($scope.selectedYear, $scope.id).then(function(response) {
                        $('#parent_objectives').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                        $scope.parentgoals = response;
                  });
                  $scope.truncatToggle = false;
                  $scope.testHeight();
            });
      }
      $scope.updatePercentage = function($index) {
            $timeout(function() {
                  var self = $('.item' + $index);
                  self.find('span.pie').peity("pie");
            }, 10);
      }
      $scope.openActivities = function($id) {
            var $index = '';
            for (var i = 0, length = $scope.tatic.keys.length; i < length; i++) {
                  if ($scope.tatic.keys[i].id == $id) {
                        $index = i;
                  } else {
                        if ('open' in $scope.tatic.keys[i]) {
                              $scope.tatic.keys[i].open = false;
                        }
                  }
            };
            if ('open' in $scope.tatic.keys[$index]) {
                  if ($scope.tatic.keys[$index].open) {
                        $scope.tatic.keys[$index].open = false;
                  } else {
                        $scope.tatic.keys[$index].open = true;
                  }
            } else {
                  $key['details']($id).then(function(response) {
                        $scope.tatic.keys[$index] = response;
                        $scope.tatic.keys[$index].open = true;
                        if ($scope.activityId && !$scope.first) {
                              $scope.first = true;
                              $scope.modalActivities($scope.keyId, $scope.activityId);
                        }
                        $timeout(function() {
                              $('#accordion .item' + $id).find('span.pie').peity("pie");
                              $('#accordion .item' + $id).find('table.table').DataTable({
                                    'bDestroy': true,
                                    'paging': false,
                                    'info': false,
                                    'searching': false,
                                    columnDefs: [{
                                          targets: 'no-sort',
                                          orderable: false
                                    }]
                              });
                        }, 10);
                  });
            }
      }

      /* new contributor */
      $scope.usersNotAddedSelectedCon = [];
      $users['get']().then(function(response) {
            console.log("users:", response);
            $scope.defUsersNotAddedCon = response;
            $scope.usersNotAddedCon = JSON.parse(JSON.stringify($scope.defUsersNotAddedCon));
      });
      $('#key-users').change(function(e) {
            $.each($scope.usersNotAddedCon, function(i) {
                  if ($scope.usersNotAddedCon[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.usersNotAddedCon.splice(i, 1)[0];
                        $scope.usersNotAddedSelectedCon.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedUserCon = function(ur, justRemove = true) {
            $.each($scope.usersNotAddedSelectedCon, function(i) {
                  if ($scope.usersNotAddedSelectedCon[i].id === ur.id) {
                        var spliced = $scope.usersNotAddedSelectedCon.splice(i, 1)[0];
                        if (justRemove) $scope.usersNotAddedCon.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshCon = function(ur) {
            $('#key-users .select2').select2("val", "");
            $scope.removeAddedUserCon(ur);
      };
      /* new contributor end */

      $scope.removeKeyResultContratoMetas = function($key_id)
      {
            if (confirm("Tem certeza de que deseja excluir esta linha?")) {
                  $tatics['removeKeyresultContrataMetas']($key_id).then(function(response) {
                        toastr.success('Resultado chave eliminado.');
                        $scope.loadTatics();
                  });
            }
      }

      $scope.okrMedicao = function($key_id)
      {
            location.href = baseurl + 'okr/' + $key_id;
      }

      $('#key-accompan').change(function() {
            if ($scope.user.empresa.contrato_metas != 1) 
                  return;
            if ($(this).val() == 1) {
                  $('#key-measure').val("Data");
                  $('#key-measure').addClass('disable-content');
                  $('#key-pattern').select2('destroy');
                  $('#key-pattern').select2();
                  $('#key-pattern').select2('val', 4);
                  $('#tipo_pattern').addClass('disable-content');
            } else {
                  $('#key-measure').val("");
                  $('#key-measure').removeClass('disable-content');
                  $('#key-pattern').select2('destroy');
                  $('#key-pattern').select2();
                  $('#key-pattern').select2('val', 0);
                  $('#tipo_pattern').removeClass('disable-content');
            }
      });

      $scope.modalIndicador = function() {
            $scope.key_id = 0;
            $scope.keyDetail = false;
            $scope.keyDetailUser = '';
            $scope.keyDetailUsers = [];
            $scope.keyWeight = 1;
            $scope.frequencyKey = 0;
            $scope.chkd_manutencao = false;
            $scope.formas = [{
                        id: '0',
                        name: 'média das linhas preenchidas'
                  },
                  {
                        id: '1',
                        name: 'total proporcional'
                  },
                  {
                        id: '2',
                        name: 'total absoluto e última linha preenchida'
                  }
            ];
            $('#key-forma').select2('destroy');
            $('#key-accompan').select2('destroy');
            $('#key-pattern').select2('destroy');
            $('#tipo_calculo').select2('destroy');
            $('#tipo_calculo').select2();
            $('#key-forma').select2();
            $('#key-forma').select2('val', 2);
            $('#key-accompan').select2();
            $('#key-accompan').select2('val', 0);
            $('#key-pattern').select2();
            $('#key-pattern').select2('val', 1);
            $('#key-users').select2('destroy'); //contributor
            $('#ind_minimo_date').datepicker("destroy");
            $('#ind_minimo_date').datepicker({dateFormat: "dd/mm/yy"});
            $('#ind_target_date').datepicker("destroy");
            $('#ind_target_date').datepicker();
            $('#ind_maximo_date').datepicker("destroy");
            $('#ind_maximo_date').datepicker();

            $scope.usersNotAddedSelectedCon = []; //contributor
            $scope.usersNotAddedCon = JSON.parse(JSON.stringify($scope.defUsersNotAddedCon)); //contributor
            var $user = $('#key-user'),
                  opts = {
                        allowClear: attrDefault($user, 'allowClear', false)
                  };
            $user.select2(opts);
            $user.addClass('visible');
            $users['get']().then(function(response) {
                  $scope.users = response;
                  var $user = $('#modal-key #key-user'),
                        opts = {
                              allowClear: attrDefault($user, 'allowClear', false)
                        };
                  $('#modal-key #key-user').select2('destroy');
                  $user.select2(opts);
                  $user.addClass('visible');
                  $('#key-users').select2(); //contributor
            });
            $tags['get']().then(function(tags) {
                  $scope.$parent.tags = tags;
                  var tagsNames = new Bloodhound({
                        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                        queryTokenizer: Bloodhound.tokenizers.whitespace,
                        local: $scope.$parent.tags
                  });
                  tagsNames.initialize();
                  $('#modal-key #key-tags-rchave').tagsinput({
                        typeaheadjs: {
                              name: 'tagnames',
                              displayKey: 'name',
                              valueKey: 'name',
                              source: tagsNames.ttAdapter()
                        }
                  });
                  $('#form-key').on('keyup keypress', function(e) {
                        var keyCode = e.keyCode || e.which;
                        if (keyCode === 13) {
                              e.preventDefault();
                              return false;
                        }
                  });
                  $('#modal-key #key-tags-rchave').on('itemAdded', function(event) {
                        var tag = event.item;
                  });
            });
            $('#periodicidade').select2('destroy');
            $('#periodicidade').select2();
            $('#periodicidade').select2('val', 't');

            $('#modal-key').modal('show', {
                  backdrop: 'static'
            });
      }

      $scope.modalKey = function($key_id) {
            $scope.key_id = $key_id;
            $scope.keyDetail = false;
            $scope.keyDetailUser = '';
            $scope.keyDetailUsers = [];
            $scope.keyWeight = 1;
            $scope.frequencyKey = 0;
            $scope.chkd_manutencao = false;
            $scope.frequencies = [{
                        id: '0',
                        name: 'Selecione'
                  },
                  {
                        id: '1',
                        name: 'Diário'
                  },
                  {
                        id: '2',
                        name: 'Semanal'
                  },
                  {
                        id: '3',
                        name: 'Mensal'
                  },
                  {
                        id: '4',
                        name: 'Trimestral'
                  },
                  {
                        id: '5',
                        name: 'Anual'
                  }
            ];
            //var selectBox = $('.select-frequency').select2();
            $('#key-frequency').select2('destroy');
            $('#tipo_calculo').select2('destroy');
            if (!$key_id) {
                  $('#tipo_calculo').select2();
                  $('#key-frequency').select2();
            }
            // $('#modal-key .multi-select').multiSelect('destroy');
            // if ($('#modal-key .input-tags-key').prev().is('.bootstrap-tagsinput')) {
            //     $('#modal-key .input-tags-key').tagsinput('removeAll');
            //     $('#modal-key .input-tags-key').tagsinput('destroy');
            // }
            $('#key-users').select2('destroy'); //contributor
            $scope.usersNotAddedSelectedCon = []; //contributor
            $scope.usersNotAddedCon = JSON.parse(JSON.stringify($scope.defUsersNotAddedCon)); //contributor
            var $user = $('#key-user'),
                  opts = {
                        allowClear: attrDefault($user, 'allowClear', false)
                  };
            $user.select2(opts);
            $user.addClass('visible');
            $users['get']().then(function(response) {
                  $scope.users = response;
                  if (!$key_id) {
                        var $user = $('#modal-key #key-user'),
                              opts = {
                                    allowClear: attrDefault($user, 'allowClear', false)
                              };
                        $('#modal-key #key-user').select2('destroy');
                        $user.select2(opts);
                        $user.addClass('visible');
                        //$('.select-frequency').addClass('visible').select2();
                  }
                  $('#key-users').select2(); //contributor
                  // $('.multi-select.users-key').multiSelect();
            });
            $tags['get']().then(function(tags) {
                  $scope.$parent.tags = tags;
                  var tagsNames = new Bloodhound({
                        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                        queryTokenizer: Bloodhound.tokenizers.whitespace,
                        local: $scope.$parent.tags
                  });
                  tagsNames.initialize();
                  $('#modal-key #key-tags-rchave').tagsinput({
                        typeaheadjs: {
                              name: 'tagnames',
                              displayKey: 'name',
                              valueKey: 'name',
                              source: tagsNames.ttAdapter()
                        }
                  });
                  $('#form-key').on('keyup keypress', function(e) {
                        var keyCode = e.keyCode || e.which;
                        if (keyCode === 13) {
                              e.preventDefault();
                              return false;
                        }
                  });
                  $('#modal-key #key-tags-rchave').on('itemAdded', function(event) {
                        var tag = event.item;
                  });
            });
            $('#key-frequency').select2('destroy');
            $('#key-frequency').select2();
            $('#periodicidade').select2('destroy');
            $('#periodicidade').select2();
            $('#periodicidade').select2('val', 't');
            if ($key_id) {
                  $key['details']($key_id).then(function(response) {
                        $scope.keyDetail = response;
                        $scope.keyDetailUser = $scope.keyDetail.user.id;
                        $scope.keyDetailUsers = $scope.keyDetail.users;
                        $scope.keyWeight = $scope.keyDetail.weight;
                        $scope.frequencyKey = $scope.keyDetail.frequency;
                        $scope.patternKey = $scope.keyDetail.pattern;
                        var $user = $('#key-user'),
                              opts = {
                                    allowClear: attrDefault($user, 'allowClear', false)
                              };
                        $('#modal-key #key-user').select2('destroy');
                        $('#modal-key #key-user').val(response.user.id);
                        $user.select2(opts);
                        $user.addClass('visible');
                        $('#key-frequency').val(response.frequency);
                        $('#key-frequency').select2();
                        //$('#key-frequency').addClass('visible').selectBoxIt();
                        $('#tipo_calculo').val(response.tipo_calculo);
                        $('#tipo_calculo').select2();
                        $('#periodicidade').val(response.periodicidade);
                        $('#periodicidade').select2();
                        $('#key-pattern').val(response.pattern);
                        $('#key-pattern').select2();
                        $timeout(function() {
                              if (response.manutencao == 1) {
                                    $(document).find('#chkd_manutencao').prop('checked', true);
                                    $scope.chkd_manutencao = true;
                              } else {
                                    $(document).find('#chkd_manutencao').prop('checked', false);
                                    $scope.chkd_manutencao = false;
                              }
                        }, 300);
                        for (var i = 0; i < $scope.keyDetail.tag.length; i++) {
                              $('#modal-key .input-tags-key').tagsinput('add', $scope.keyDetail.tag[i].name);
                        };
                        var array = [];
                        for (var i = 0; i < $scope.keyDetail.users.length; i++) {
                              // array.push($scope.keyDetail.users[i].id);
                              //contributor
                              for (var j = 0; j < $scope.usersNotAddedCon.length; j++) {
                                    if ($scope.keyDetail.users[i].id == $scope.usersNotAddedCon[j].id) {
                                          var spliced = $scope.usersNotAddedCon.splice(j, 1)[0];
                                          $scope.usersNotAddedSelectedCon.push(spliced);
                                    }
                              }
                        };
                        // $('.multi-select.users-key').multiSelect('select', array);
                        $scope.tipo_calculo = response.type;
                        if (response.type == 2 && response.tipo_calculo == 1) {
                              $('#tipo_calculo').select2('destroy');
                              $('#tipo_calculo').val(response.type);
                              $('#tipo_calculo').select2();
                              $timeout(function() {
                                    $(document).find('#chkd_tipo').prop('checked', true);
                              }, 300);
                        } else if (response.type == 2 && response.tipo_calculo == 0) {
                              $('#tipo_calculo').select2('destroy');
                              $('#tipo_calculo').val(response.type);
                              $('#tipo_calculo').select2();
                              $timeout(function() {
                                    $(document).find('#chkd_tipo').prop('checked', false);
                              }, 300);
                        } else if (response.type == null) {
                              if (response.tipo_calculo == 0 && response.direcao == 0) {
                                    $('#tipo_calculo').select2('destroy');
                                    $('#tipo_calculo').val(0);
                                    $('#tipo_calculo').select2();
                              }
                              if (response.tipo_calculo == 0 && response.direcao == 1) {
                                    $('#tipo_calculo').select2('destroy');
                                    $('#tipo_calculo').val(1);
                                    $('#tipo_calculo').select2();
                              }
                              $timeout(function() {
                                    $(document).find('#chkd_tipo').prop('checked', false);
                              }, 300);
                        } else {
                              $('#tipo_calculo').select2('destroy');
                              $('#tipo_calculo').val(response.type);
                              $('#tipo_calculo').select2();
                              $timeout(function() {
                                    $(document).find('#chkd_tipo').prop('checked', false);
                              }, 300);
                        }
                  });
            }
            $('#modal-key').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.opcoesAvancadas = function() {
            $scope.frequencia = [{
                        id: '0',
                        name: 'Selecione'
                  },
                  {
                        id: '1',
                        name: 'Diário'
                  },
                  {
                        id: '2',
                        name: 'Semanal'
                  },
                  {
                        id: '3',
                        name: 'Mensal'
                  }
            ];
            if ($('#fonte-dados').hasClass('visible')) {
                  var selectBox = $("#fonte-dados").data("selectBox-selectBoxIt");
                  $('#fonte-dados').removeClass('visible');
                  //selectBox.destroy();
            }
            if ($('#frequenci').hasClass('visible')) {
                  var selectBox = $("#frequenci").data("selectBox-selectBoxIt");
                  $('#frequenci').removeClass('visible');
                  // selectBox.destroy();
            }
            $('select.select-fonte').select2({
                  allowClear: true
            }).addClass('visible');
            $('select.select-frequencia').select2({
                  allowClear: true
            }).addClass('visible');
            $('#advanced-options').show();
            if ($scope.keyDetail) {
                  if ($scope.keyDetail.integration.type == 0) {
                        $("#Database").prop('checked', true);
                        $integration['getintegracoestype'](0).then(function(response) {
                              $scope.integracoes = response;
                        });
                  } else if ($scope.keyDetail.integration.type == 1) {
                        $("#WebService").prop('checked', true);
                        $integration['getintegracoestype'](1).then(function(response) {
                              $scope.integracoes = response;
                        });
                  } else if ($scope.keyDetail.tipo_calculo == 2) {
                        $("#Atividades").prop('checked', true);
                        $integration['getintegracoestype'](2).then(function(response) {
                              $scope.integracoes = response;
                        });
                  }
                  $("#frequenci").select2();
                  $scope.selectedFrequenci = $scope.keyDetail.frequencia_int;
                  $("#frequenci").select2('destroy');
                  $("#fonte-dados").select2();
                  $scope.selectedIntegration = $scope.keyDetail.id_integracao;
                  $("#fonte-dados").select2('destroy');
            }
      }
      $scope.hideModalkeyAdvanced = function() {
            $('#advanced-options').hide();
            $('#advanced-options #fonte-dados').select2('destroy');
            $('#advanced-options #frequenci').select2('destroy');
      }
      $scope.selectedOptionWebService = false;
      $scope.selectedOptionDatabase = false;
      $scope.selectedOptionAtividades = false;
      $scope.optionType = function($type) {
            $('select.select-fonte').select2({
                  allowClear: true
            }).addClass('visible');
            $('select.select-frequencia').select2({
                  allowClear: true
            }).addClass('visible');
            if ($("#WebService").prop('checked') || $("#Database").prop('checked')) {
                  if ($type) {
                        $integration['getintegracoestype']($type).then(function(response) {
                              $scope.integracoes = response;
                        });
                  }
            } else {
                  $("#fonte-dados").select2({
                        allowClear: true
                  });
                  $scope.integracoes = [];
            }
      }
      $scope.saveKeyAdvanced = function() {
            $('#fonte-dados').rules("add", 'required');
            $('#frequenci').rules("add", 'required');
            if ($('#form-key').valid()) {
                  $scope.key_type = $scope.selectedOption;
                  $scope.key_fonte = $scope.selectedIntegration;
                  $scope.key_frequancia = $scope.selectedFrequenci;
                  $('#advanced-options').hide();
            }
      }
      $scope.numberLessKey = function() {
            var val = $scope.keyWeight;
            var newVal = val > .1 ? val - .1 : 1;
            $scope.keyWeight = parseFloat(newVal.toFixed(2));
      }
      $scope.numberMoreKey = function() {
            var val = $scope.keyWeight;
            var newVal = val < 100 ? val + .1 : 100;
            $scope.keyWeight = parseFloat(newVal.toFixed(2));
      }
      $('#form-key').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: {
                        required: true,
                        valueNotEquals: "?"
                  },
                  frequencia: {
                        valueNotEquals: "number:0"
                  },
                  tipo_calculo: {
                        required: true,
                        valueNotEquals: "number:0"
                  },
                  peso: 'required',
                  meta: 'required',
                  unidade: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        id_tatic: $scope.tatic.id,
                        id_team: $scope.tatic.team.id,
                        name: $('#key-name').val(),
                        description: $('#key-description').val(),
                        user: $scope.keyDetailUser,
                        frequency: $scope.frequencyKey,
                        weight: $('#key-weight').val(),
                        ponto_partida: $('#ponto_partida').val(),
                        tipo_calculo: $('#tipo_calculo').val(),
                        goal: $('#key-goal').val(),
                        inferior: $('#key-inferior').val(),
                        superior: $('#key-superior').val(),
                        measurement: $('#key-measure').val(),
                        // responsibles: $('#key-users').val(),
                        tags: $('#key-tags-rchave').val(),
                        chkd_tipo: $('#chkd_tipo:checked').val(),
                        chkd_manutencao: $('#chkd_manutencao:checked').val(),
                        periodicidade: $('#periodicidade').val(),
                        pattern: $('#key-pattern').val()
                  }
                  if ($scope.user.empresa.contrato_metas==1) {
                        
                        delete data.chkd_manutencao;
                        delete data.ponto_partida;
                        data.forma = $('#key-forma').val();
                        data.accompan = $('#key-accompan').val();
                        data.pattern = $('#key-pattern').val();
                        if (data.accompan == 1) {
                              data.minimo_date = $('#ind_minimo_date').val();
                              data.target_date = $('#ind_target_date').val();
                              data.maximo_date = $('#ind_maximo_date').val();
                        }
                  }
                  var frequencias = $scope.selectedFrequenci;
                  if ($scope.key_fonte) {
                        data.id_integracao = $scope.key_fonte;
                  } else {
                        data.id_integracao = 0;
                  }
                  if (frequencias) {
                        data.frequencia_int = $scope.key_frequancia;
                  } else {
                        data.frequencia_int = 0;
                  }
                  var type = 'insert';
                  if ($scope.key_id) {
                        data.id = $scope.key_id;
                        type = 'edit';
                  }
                  if ($scope.user.empresa.contrato_metas==1) type = "addIndicador";
                  // contributor
                  data.responsibles = [];
                  $('#form-key input[name^="corresponsaveis"]').each(function() {
                        data.responsibles.push($(this).val());
                  });
                  $('#form-key .salvar').button('loading');
                  $key[type](data).then(function(response) {
                        $scope.loadTatics();
                        // $scope.tatic.keys = response;
                        $timeout(function() {
                              $('#accordion').find('span.pie').each(function(index, el) {
                                    $(this).peity("pie");
                              });
                              delete $scope.key_type;
                              delete $scope.key_fonte;
                              delete $scope.key_frequancia;
                              delete $scope.selectedOption;
                              delete $scope.selectedIntegration;
                              delete $scope.selectedFrequenci;
                        }, 10);
                        $('#form-key')[0].reset();
                        $('#form-key .salvar').button('reset');
                        $('#modal-key').modal('hide');
                  });
                  $('#form-key #key-frequency').select2('destroy');
                  $('#form-key #key-frequency').select2();
                  $('#form-key #key-user').select2('destroy');
                  $('#form-key #tipo_calculo').select2('destroy');
            }
      });
      $('#modal-key').on('hidden.bs.modal', function() {
            delete $scope.key_type;
            delete $scope.key_fonte;
            delete $scope.key_frequancia;
            delete $scope.selectedOption;
            delete $scope.selectedIntegration;
            delete $scope.selectedFrequenci;
            delete $scope.tipo_calculo;
      });
      $('#tipo_calculo').change(function() {
            if ($(this).val() == 2) {
                  $timeout(function() {
                        $(document).find('#chkd_tipo').prop('checked', true);
                  }, 200);
            }
      });
      $scope.modalMeasure = function($key_id) {
            $('#form-measure')[0].reset();
            $scope.inputs = [];
            $scope.key_id = $key_id;
            $scope.measures = false;
            var increment = 0;
            $key['measureList']($scope.key_id).then(function(response) {
                  $scope.measures = response;
            });
            for (var i = 0, leng = $scope.tatic.keys.length; i < leng; i++) {
                  if ($scope.tatic.keys[i].id == $key_id) {
                        $scope.measureText = $scope.tatic.keys[i].title;
                  }
            };
            $scope.incrementInput = function() {
                  increment++;
                  $scope.inputs.push(increment);
            }
            $('#modal-measure').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.deleteKeyResults = function($key_id) {
            $('#delete-key-results').modal('show', {
                  backdrop: 'static'
            });
            $('#deleteKeyAction').click(function() {
                  $key['deleteKeyResultsByid']($key_id).then(function(response) {
                        toastr.success('Resultado chave eliminado.');
                        $tatics['details']($scope.id).then(function(res) {
                              $scope.tatic = res;
                        });
                        $('#delete-key-results').modal('hide');
                  });
            });
      }
      $('#form-measure').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  data: 'required',
                  medicao: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var fileInput = $('#measure-files'),
                        files = fileInput[0].files;
                  var data = {
                        id: $scope.key_id,
                        date: $('#measure-date').val(),
                        value: $('#measure-value').val(),
                        comentary: $('#measure-description').val(),
                  }
                  $scope.form = new FormData();
                  $.each(data, function(key, value) {
                        $scope.form.append(key, value);
                  });
                  for (var i = 0; i < files.length; i++) {
                        $scope.form.append("files[]", files[i]);
                  }
                  $('#form-measure .salvar').button('loading');
                  $key['measure']($scope.form).then(function(response) {
                        $scope.tatic.keys = response.keys;
                        $scope.tatic.percentage = response.rkey_parent_perc;
                        $scope.percentageValue = response.rkey_parent_perc;
                        for (var i = 0, leng = $scope.tatic.keys.length; i < leng; i++) {
                              if ($scope.tatic.keys[i].id === $scope.key_id) {
                                    $scope.tatic.keys[i].percentage = response.rkey_perc;
                              }
                        };
                        $scope.measures = response.medicoes;
                        $('#form-measure')[0].reset();
                        $('#form-measure .salvar').button('reset');
                        //$('#modal-measure').modal('hide');
                  });
            }
      });
      if ($.isFunction($.fn.datepicker)) {
            $(".datepicker").each(function(i, el) {
                  var $this = $(el),
                        opts = {
                              format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                              startDate: attrDefault($this, 'startDate', ''),
                              endDate: attrDefault($this, 'endDate', ''),
                              daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                              startView: attrDefault($this, 'startView', 0),
                              language: 'pt-BR',
                              rtl: rtl()
                        },
                        $n = $this.next(),
                        $p = $this.prev();
                  $this.datepicker(opts);
                  if ($n.is('.input-group-addon') && $n.has('a')) {
                        $n.on('click', function(ev) {
                              ev.preventDefault();
                              $this.datepicker('show');
                        });
                  }
                  if ($p.is('.input-group-addon') && $p.has('a')) {
                        $p.on('click', function(ev) {
                              ev.preventDefault();
                              $this.datepicker('show');
                        });
                  }
            });
      }
      $users['get']().then(function(response) {
            $scope.usersNotAddedAtivade = response;
      });
      $scope.usersNotAddedSelectedAtivade = [];
      $('#activity-users').change(function(e) {
            $.each($scope.usersNotAddedAtivade, function(i) {
                  if ($scope.usersNotAddedAtivade[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.usersNotAddedAtivade.splice(i, 1)[0];
                        $scope.usersNotAddedSelectedAtivade.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedUserAtivade = function(ur, justRemove = true) {
            $.each($scope.usersNotAddedSelectedAtivade, function(i) {
                  if ($scope.usersNotAddedSelectedAtivade[i].id === ur.id) {
                        var spliced = $scope.usersNotAddedSelectedAtivade.splice(i, 1)[0];
                        if (justRemove) $scope.usersNotAddedAtivade.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefreshAtivade = function(ur) {
            $('#activity-users .select2').select2("val", "");
            $scope.removeAddedUserAtivade(ur);
      };
      
      $scope.modalJustifica = function() {
            $('#modal-justificativa').modal('show', {
                  backdrop: 'static'
            });
      };

      $scope.modalActivities = function($key_id, $activity_id) {
            
            delete $scope.selectedUserNotAddedAtivade;
            delete $scope.usersNotAddedSelectedAtivade;
            $scope.activityDetail = false;
            $scope.activityDetailUser = '';
            $scope.activityDetailUsers = [];
            $scope.usersNotAddedAtivade = [];
            $scope.typeActivity = 0;
            $scope.key_id = $key_id;
            $scope.activity_id = $activity_id;
            $scope.selectedUserNotAddedAtivade = [];
            $scope.usersNotAddedSelectedAtivade = [];
            $(".slider").find('.ui-slider-handle .ui-label').text('0');
            $('#modal-activities .select2.usuario-activity').select2('destroy');
            $('#modal-activities .multi-select').multiSelect('destroy');
            if ($('#modal-activities .input-tags-activity').prev().is('.bootstrap-tagsinput')) {
                  $('#modal-activities .input-tags-activity').tagsinput('removeAll');
                  $('#modal-activities .input-tags-activity').tagsinput('destroy');
            }
            $tags['get']().then(function(tags) {
                  $scope.$parent.tags = tags;
                  var tagsNames = new Bloodhound({
                        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                        queryTokenizer: Bloodhound.tokenizers.whitespace,
                        local: $scope.$parent.tags
                  });
                  tagsNames.initialize();
                  $('#modal-activities .input-tags-activity').tagsinput({
                        typeaheadjs: {
                              name: 'tagnames',
                              displayKey: 'name',
                              valueKey: 'name',
                              source: tagsNames.ttAdapter()
                        }
                  });
                  $('#form-activities').on('keyup keypress', function(e) {
                        var keyCode = e.keyCode || e.which;
                        if (keyCode === 13) {
                              e.preventDefault();
                              return false;
                        }
                  });
                  $('#modal-activities .input-tags-activity').on('itemAdded', function(event) {
                        var tag = event.item;
                  });
                  $('#activity-users').select2();
                  $timeout(function() {
                        $users['get']().then(function(response) {
                              $scope.users = response;
                              $scope.usersNotAddedAtivade = response;
                        });
                  }, 100);
                  if ($activity_id) {
                        $activities['details']($activity_id).then(function(response) {
                              $scope.activityDetail = response;
                              $scope.typeActivity = $scope.activityDetail.type;
                              $scope.activityDetailUser = $scope.activityDetail.user.id;
                              $scope.activityDetailUsers = $scope.activityDetail.users;
                              $scope.usersNotAddedSelectedAtivade = $scope.activityDetail.users;
                              $scope.activity_status = response.ativo;
                              $timeout(function() {
                                    $(".slider").slider({
                                          range: "min",
                                          min: 0,
                                          max: 100,
                                          value: $scope.activityDetail.percentage,
                                          create: function() {
                                                var $handles = $(".slider").find('.ui-slider-handle');
                                                $handles.html('<span class="ui-label">' + $(this).slider("value") + '</span>');
                                          },
                                          slide: function(event, ui) {
                                                $("#activity-percentage").val(ui.value);
                                                var $handles = $(".slider").find('.ui-slider-handle');
                                                $handles.html('<span class="ui-label">' + ui.value + '</span>');
                                          }
                                    });
                                    $(".slider .ui-slider-handle .ui-label").text($scope.activityDetail.percentage);
                                    var $this = $('.select2.usuario-activity'),
                                          opts = {
                                                allowClear: attrDefault($this, 'allowClear', false)
                                          };
                                    $this.select2(opts);
                                    $this.addClass('visible');
                                    for (var i = 0; i < $scope.activityDetail.tags.length; i++) {
                                          $('#modal-activities .input-tags-activity').tagsinput('add', $scope.activityDetail.tags[i].name);
                                    };
                                    var array = [];
                                    for (var i = 0; i < $scope.activityDetail.users.length; i++) {
                                          array.push($scope.activityDetail.users[i].id);
                                    };
                                    $('.multi-select.users-activity').multiSelect();
                              });
                        });
                  } else {
                        $scope.activity_status = 1;
                        $timeout(function() {
                              $(".slider").slider({
                                    range: "min",
                                    min: 0,
                                    max: 100,
                                    value: 0,
                                    slide: function(event, ui) {
                                          $("#activity-percentage").val(ui.value);
                                          var $handles = $(".slider").find('.ui-slider-handle');
                                          $handles.html('<span class="ui-label">' + ui.value + '</span>');
                                    }
                              });
                              var $this = $('.select2.usuario-activity'),
                                    opts = {
                                          allowClear: attrDefault($this, 'allowClear', false)
                                    };
                              $this.select2(opts);
                              $this.addClass('visible');
                              $('.multi-select.users-activity').multiSelect();
                              //$('.select-type').addClass('visible').selectBoxIt();
                        }, 10);
                  }
            });
            $('#modal-activities').modal('show', {
                  backdrop: 'static'
            });
      }
      $scope.searchResponsibles = function() {
            $scope.filterResponsibles = $scope.selectedResponsibles;
      }
      $('#form-activities').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  nome: 'required',
                  //descricao: 'required',
                  usuario: {
                        valueNotEquals: "?"
                  },
                  //  horas: 'required',
                  inicio: 'required',
                  fim: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            submitHandler: function(form) {
                  var data = {
                        tatic_id: $scope.tatic.id,
                        key_id: $scope.key_id,
                        name: $('#activity-name').val(),
                        description: $('#activity-description').val(),
                        percentage: $('#activity-percentage').val(),
                        user: $scope.activityDetailUser,
                        init: $('#activity-init').val(),
                        end: $('#activity-end').val(),
                        hour: $('#activity-hours').val(),
                        tags: $('#activity-tags').val(),
                        id_team: $scope.tatic.team.id,
                        status: $scope.activity_status
                  }
                  data.responsibles = [];
                  $('#form-activities input[name^="corresponsaveis"]').each(function() {
                        data.responsibles.push($(this).val());
                  });
                  var type = 'insert';
                  if ($scope.activity_id) {
                        data.id = $scope.activity_id;
                        type = 'edit';
                  }
                  $('#form-activities .salvar').button('loading');
                  $activities[type](data).then(function(response) {
                        for (var i = 0, leng = $scope.tatic.keys.length; i < leng; i++) {
                              if ($scope.tatic.keys[i].id === $scope.key_id) {
                                    $scope.tatic.keys[i].activities = response;
                              }
                        };
                        delete $scope.activity_status;
                        delete $scope.selectedUserNotAddedAtivade;
                        delete $scope.usersNotAddedSelectedAtivade;
                        $tatics['details']($scope.id).then(function(response) {
                              $scope.tatic = response;
                              var $keys = $scope.tatic.keys;
                              $keys.map(function(v) {
                                    v.open = true
                              });
                        });
                        $timeout(function() {
                              $("span.pie").peity("pie");
                              if (!$('table').hasClass('dataTable')) {
                                    $('table.table').DataTable({
                                          "bDestroy": true,
                                          'paging': false,
                                          'info': false,
                                          'searching': false,
                                          columnDefs: [{
                                                targets: 'no-sort',
                                                orderable: false
                                          }]
                                    });
                              }
                        }, 10);
                        $('#form-activities')[0].reset();
                        $('#form-activities .salvar').button('reset');
                        delete $scope.selectedUserNotAddedAtivade;
                        delete $scope.usersNotAddedSelectedAtivade;
                        $('#modal-activities').modal('hide');
                  });
            }
      });
      setTimeout(function() {
            var cmbAdd = $('#cmbAddObj');
            cmbAdd.addClass('visible');
            cmbAdd.selectBoxIt();
      }, 600);
});
elofy.controller('teamsCtrl', function globalCtrl($scope, $timeout, $users, $teams, $skills, $translate, $tags) {
      $scope.usersNotAddedSelected = [];
      $scope.usersNotAdded = [];
      $scope.blockEdition = false;
      $(".fixme").niceScroll({
            cursorcolor: "#3FB9EA"
      });
      var fixmeTop = 80;
      $(window).scroll(function() { // assign scroll event listener
            var currentScroll = $(window).scrollTop(); // get current position
            if (currentScroll >= fixmeTop) { // apply position: fixed if you
                  $('.fixme').css({
                        'position': 'fixed', //
                        'top': '40px',
                        'right': '20px',
                        'overflow-y': 'scroll',
                        'height': 'calc(100% - 40px)',
                  });
            } else { // apply position: static
                  $('.fixme').css({ // if you scroll above it
                        'position': 'absolute',
                        'top': '122px',
                        'height': 'calc(100% - 120px)',
                  });
            }
      });
      $scope.setupMultiselect = function(elem) {
            elem.multiSelect({
                  selectableHeader: "<input type='text' class='search-input select-filter' autocomplete='off' placeholder='filtrar por nome'>",
                  selectionHeader: "<input type='text' class='search-input deselect-filter' autocomplete='off' placeholder='filtrar por nome'>",
                  afterInit: function(ms) {
                        var that = this,
                              $selectableSearch = that.$selectableUl.prev(),
                              $selectionSearch = that.$selectionUl.prev(),
                              selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                              selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';
                        that.qs1 = $selectableSearch.quicksearch(selectableSearchString).on('keydown', function(e) {
                              if (e.which === 40) {
                                    that.$selectableUl.focus();
                                    return false;
                              }
                        });
                        that.qs2 = $selectionSearch.quicksearch(selectionSearchString).on('keydown', function(e) {
                              if (e.which == 40) {
                                    that.$selectionUl.focus();
                                    return false;
                              }
                        });
                  },
                  afterSelect: function() {
                        $(this.qs1).val("");
                        $(this.qs2).val("");
                        this.qs1.search("");
                        this.qs2.search("");
                        this.qs1.cache();
                        this.qs2.cache();
                  },
                  afterDeselect: function() {
                        $(this.qs1).val("");
                        $(this.qs2).val("");
                        this.qs1.search("");
                        this.qs2.search("");
                        this.qs1.cache();
                        this.qs2.cache();
                  }
            });
      }
      $teams['tree']().then(function(response) {
            $scope.teams = response;
      });
      $scope.collapse = function($event) {
            var self = $($event.currentTarget),
                  el = self.closest('.dd-item');
            el.removeClass('open');
      };
      $scope.expand = function($event) {
            var self = $($event.currentTarget),
                  el = self.closest('.dd-item');
            el.addClass('open');
      };
      $scope.q = '';
      $scope.search = function() {
            $scope.q = $scope.query;
      };
      // first users get to fill side-form
      $users['get']().then(function(response) {
            $scope.responibles = response;
      });
      $teams['no_relation'](0).then(function(response) {
            $scope.teamsList = response;
            $timeout(function() {
                  $scope.teamsList.unshift({
                        id: '0',
                        name: 'Nenhum'
                  });
            }, 10);
      });
      $teams['get_members_teams'](null, true).then(function(users) {
            $scope.usersNotAdded = users;
      });
      $('#team-users-side').change(function(e) {
            $.each($scope.usersNotAdded, function(i) {
                  if ($scope.usersNotAdded[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.usersNotAdded.splice(i, 1)[0];
                        $scope.usersNotAddedSelected.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedUser = function(ur, justRemove = true) {
            console.log(ur);
            $.each($scope.usersNotAddedSelected, function(i) {
                  if ($scope.usersNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.usersNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.usersNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefresh = function(ur) {
            $('#form-teams-side .select2').select2("val", "");
            $scope.removeAddedUser(ur);
      };
      if ($('#form-teams-side .key-tags-times').prev().is('.bootstrap-tagsinput')) {
            $('#form-teams-side .key-tags-times').tagsinput('removeAll');
            $('#form-teams-side .key-tags-times').tagsinput('destroy');
      }
      $tags['get']().then(function(tags) {
            $scope.$parent.tags = tags;
            var tagsNames = new Bloodhound({
                  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                  queryTokenizer: Bloodhound.tokenizers.whitespace,
                  local: $scope.$parent.tags
            });
            tagsNames.initialize();
            $('#form-teams-side #key-tags-times').tagsinput({
                  typeaheadjs: {
                        name: 'tagnames',
                        displayKey: 'name',
                        valueKey: 'name',
                        source: tagsNames.ttAdapter()
                  }
            });
            $('#form-teams-side').on('keyup keypress', function(e) {
                  var keyCode = e.keyCode || e.which;
                  if (keyCode === 13) {
                        e.preventDefault();
                        return false;
                  }
            });
            $('#form-teams-side #key-tags-times').on('itemAdded', function(event) {
                  var tag = event.item;
            });
      });
      $scope.callTagsinput = function() {
            $('#form-teams-side .key-tags-times').tagsinput('refresh');
            $('#form-teams-side .key-tags-times').tagsinput('removeAll');
            $timeout(function() {
                  $('#form-teams-side .key-tags-times').tagsinput();
                  $tags['get']().then(function(tags) {
                        $scope.$parent.tags = tags;
                        var tagsNames = new Bloodhound({
                              datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                              queryTokenizer: Bloodhound.tokenizers.whitespace,
                              local: $scope.$parent.tags
                        });
                        tagsNames.initialize();
                        $('#form-teams-side #key-tags-times').tagsinput({
                              typeaheadjs: {
                                    name: 'tagnames',
                                    displayKey: 'name',
                                    valueKey: 'name',
                                    source: tagsNames.ttAdapter()
                              }
                        });
                        $('#form-teams-side').on('keyup keypress', function(e) {
                              var keyCode = e.keyCode || e.which;
                              if (keyCode === 13) {
                                    e.preventDefault();
                                    return false;
                              }
                        });
                        $('#form-teams-side #key-tags-times').on('itemAdded', function(event) {
                              var tag = event.item;
                        });
                  });
            }, 500);
      }
      $scope.changeFormToEditMode = function($team_id) {
            if ($scope.blockEdition) return;
            $scope.blockEdition = true;
            $('#form-teams-side .select2').select2("val", "");
            $scope.usersNotAddedSelected = [];
            $scope.team_id = $team_id;
            $scope.teamDetail = false;
            $scope.teamDetailUser = '';
            $scope.teamDetailUsers = [];
            $scope.responsible = [];
            $scope.teamDetailStatus = true;
            $scope.teamDetailTeam = '0';
            $teams['get_members_teams']($team_id, true).then(function(users) {
                  $scope.users = users;
                  $scope.usersNotAddedSelected = $scope.users;
                  $.each($scope.usersNotAdded, function(i) {
                        $scope.removeAddedUser(this, false);
                  });
                  $scope.responsible = [];
                  for (var i = 0, leng = users.length; i < leng; i++) {
                        $scope.responsible.push(users[i]);
                  };
                  var method = 'get';
                  if ($team_id) method = 'no_relation';
                  $teams[method]($team_id).then(function(response) {
                        $scope.teamsList = response;
                        $timeout(function() {
                              $scope.teamsList.unshift({
                                    id: '0',
                                    name: 'Nenhum'
                              });
                        }, 10);
                        $teams['get_team_users_team']($team_id).then(function(response) {
                              $scope.newusers = response;
                        });
                        if ($team_id) {
                              $('#form-teams-side .key-tags-times').tagsinput('removeAll');
                              $('#form-teams-side .key-tags-times').tagsinput('destroy');
                              var tagsNames = new Bloodhound({
                                    datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                                    local: $scope.$parent.tags
                              });
                              tagsNames.initialize();
                              $('#form-teams-side .key-tags-times').tagsinput({
                                    typeaheadjs: {
                                          name: 'tagnames',
                                          displayKey: 'name',
                                          valueKey: 'name',
                                          source: tagsNames.ttAdapter()
                                    }
                              });
                              $teams['details']($team_id).then(function(response) {
                                    $scope.teamDetail = response;
                                    $scope.teamDetailUser = $scope.teamDetail.user.id;
                                    // $scope.teamDetailUsers = $scope.teamDetail.members;
                                    //$scope.usersNotAdded = $scope.teamDetail.members;
                                    $scope.teamDetailStatus = $scope.teamDetail.active ? 1 : 0;
                                    $scope.teamDetailTeam = $scope.teamDetail.team;
                                    for (var i = 0; i < $scope.teamDetail.tags.length; i++) {
                                          $('#form-teams-side .key-tags-times').tagsinput('add', $scope.teamDetail.tags[i].name);
                                    };
                                    $scope.responsible.unshift($scope.teamDetail.user);
                                    $timeout(function() {
                                          $('#team-user-side').trigger('change')
                                    }, 10);
                                    $timeout(function() {
                                          $('#team-status-side').trigger('change')
                                    }, 10);
                                    $timeout(function() {
                                          $('#team-users-side').trigger('change')
                                    }, 10);
                                    $timeout(function() {
                                          $scope.blockEdition = false;
                                    }, 500);
                              });
                        } else {
                              $scope.teamDetail = {};
                              $scope.blockEdition = false;
                        }
                  });
            });
      };
      $scope.resetSideAddTeamForm = function() {
            $scope.callTagsinput();
            $('#form-teams-side .salvar').button('reset');
            $('#form-teams-side')[0].reset();
            $teams['no_relation'](0).then(function(response) {
                  $scope.teamsList = response;
                  $timeout(function() {
                        $scope.teamsList.unshift({
                              id: '0',
                              name: 'Nenhum'
                        });
                  }, 10);
            });
            $teams['get_members_teams'](null, true).then(function(users) {
                  $('#form-teams-side .select2').select2("val", "");
                  $scope.teamDetailStatus = "1";
                  $scope.usersNotAdded = users;
                  $scope.team_id = null;
                  delete $scope.teamDetail;
                  $scope.usersNotAddedSelected = [];
            });
      };
      $scope.sideTeamValidation = $('#form-teams-side').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  nome: 'required',
                  usuario: {
                        valueNotEquals: "?"
                  }
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            invalidHandler: function() {
                  $('#form-teams-side .error-message').removeClass('hide');
            },
            submitHandler: function(form) {
                  $('#form-teams-side .error-message').addClass('hide');
                  $('#form-teams-side .salvar').button('loading');
                  var data = {
                        id: $scope.team_id,
                        name: $('#team-name-side').val(),
                        user: $scope.teamDetailUser,
                        team: $scope.teamDetailTeam,
                        status: $scope.teamDetailStatus,
                        atualizacao: $('#atualizacao').val(),
                        tags: $('#form-teams-side #key-tags-times').val(),
                  };
                  data.users = [];
                  $('#form-teams-side input[name^="corresponsaveis"]').each(function() {
                        data.users.push($(this).val());
                  });
                  var type = $scope.team_id ? 'edit' : 'insert'
                  $teams[type](data).then(function(response) {
                        $scope.teams = response;
                        $scope.resetSideAddTeamForm();
                        $scope.callTagsinput();
                        if (type == 'edit') {
                              toastr.success('Editado com sucesso.');
                        } else {
                              toastr.success('Adicionado com sucesso.');
                        }
                  });
            }
      });
});
elofy.controller('empressaCtrl', function globalCtrl($scope, $timeout, $users, $empressa, $translate) {
      if ($.isFunction($.fn.datepicker)) {
            $(".data").each(function(i, el) {
                  var $this = $(this),
                        opts = {
                              format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                              startDate: attrDefault($this, 'startDate', ''),
                              endDate: attrDefault($this, 'endDate', ''),
                              daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                              startView: attrDefault($this, 'startView', 0),
                              language: 'pt-BR',
                              rtl: rtl()
                        },
                        $n = $this.next(),
                        $p = $this.prev();
                  $this.datepicker(opts);
                  if ($n.is('.input-group-addon') && $n.has('a')) {
                        $n.on('click', function(ev) {
                              ev.preventDefault();
                              $this.datepicker('show');
                        });
                  }
                  if ($p.is('.input-group-addon') && $p.has('a')) {
                        $p.on('click', function(ev) {
                              ev.preventDefault();
                              $this.datepicker('show');
                        });
                  }
            });
      }
      $(document).on('change', '#ex2', function() {
            var $valueper = $('#ex2').val();
            var $valueper_per = new Array();
            $valueper_per = $valueper.split(",");
            $('#performnace1').text($valueper_per[0] + ' %');
            $('#performnace2').text($valueper_per[1] + ' %');
      });
      $(document).on('change', '#ex3', function() {
            var $valuepot = $('#ex3').val();
            var $valueper_pot = new Array();
            $valueper_pot = $valuepot.split(",");
            $('#potencial1').text($valueper_pot[0] + ' %');
            $('#potencial2').text($valueper_pot[1] + ' %');
      });
      $scope.getEmpressaDetail = function() {
            $empressa['getEmpressaDetail']().then(function(response) {
                  $scope.empressa = response;
                  $scope.nome_empresa = response.nome_empresa;
                  $scope.nome_usuario = response.nome_usuario;
                  $scope.email_usuario = response.email_usuario;
                  $scope.planejamento = response.planejamento;
                  $scope.workflow = response.workflow;
                  if ($scope.workflow == 1) {
                        $('#workflow').prop('checked', true);
                  }
                  $scope.missao = response.missao;
                  $scope.visao = response.visao;
                  $scope.proposito = response.proposito;
                  $scope.numero_colab = response.numero_colaboradores;
                  $scope.numero_licencas = response.numero_licencas;
                  $scope.data_vencimento = response.data_vencimento;
                  $scope.eixox_nine = response.eixox_nine;
                  $scope.eixoy_nine = response.eixoy_nine;
                  $scope.performance_prim_limite = response.performance_primeiro_limite;
                  $scope.performance_segundo_limite = response.performance_segundo_limite;
                  $scope.potencial_primeiro_lim = response.potencial_primeiro_limite;
                  $scope.potencial_segundo_lim = response.potencial_segundo_limite;
                  $scope.desempenho = response.desempenho;
                  $scope.potential = response.potencial;
                  $scope.competencias = response.competencias;
                  $scope.pdi = response.pdi;
                  $scope.performace = response.performance;
                  $scope.desempenho_peso = response.desempenho_peso;
                  $scope.potencial_peso = response.potencital_peso;
                  $scope.competencias_peso = response.competencias_peso;
                  $scope.label_desempenho = response.label_desempenho;
                  $scope.label_potential = response.label_potencial;
                  $scope.label_competencias = response.label_competencias;
                  $scope.label_pdi = response.label_pdi;
                  $scope.label_performace = response.label_performance;
                  $scope.individual = response.individual;
                  $scope.team = response.team;
                  $scope.shared = response.shared;
                  $scope.label_individual = response.label_individual;
                  $scope.label_team = response.label_team;
                  $scope.label_shared = response.label_shared;
                  $scope.elo = response.elo;
                  $scope.atualizacao = response.atualizacao;
                  $scope.label_carreer = response.label_carreer;
                  $scope.my_carreer = response.my_carreer;
                  $scope.elos = response.elos;
                  $scope.feedback = response.feedback;
                  $scope.okr = response.okr;
                  $scope.crossfeed = response.crossfeed;
                  $scope.activities = response.activities;
                  $scope.performance_pessoal = response.performance_pessoal;
                  $scope.userDetailImage = response.imagem_header_email;
                  if ($scope.userDetailImage) $scope.userDetailImage = baseurl + 'assets/img/' + response.id_empresa + '/' + $scope.userDetailImage;
                  $scope.empresaFooterImage = response.url_image_footer;
                  if ($scope.empresaFooterImage) $scope.empresaFooterImage = baseurl + 'assets/img/' + response.id_empresa + '/' + $scope.empresaFooterImage;
                  $scope.ldap_enable = response.ldap_enabled;
                  if ($scope.ldap_enable == 1) {
                        $('#ldap_enable').prop('checked', true);
                  } else {
                        $('#ldap_enable').prop('checked', false);
                  }
                  $scope.maf = response.maf;
                  if ($scope.maf == 1) {
                        $('#maf').prop('checked', true);
                  } else {
                        $('#maf').prop('checked', false);
                  }

                  $scope.ldap_server = response.ldap_server;
                  $scope.ldap_port = response.ldap_port;
                  $scope.ldap_bind_dn = response.ldap_bind_dn;
                  $scope.nineBox1 = response.nineBox1;
                  $scope.nineBox1desc = response.nineBox1desc;
                  $scope.nineBox2 = response.nineBox2;
                  $scope.nineBox2desc = response.nineBox2desc;
                  $scope.nineBox3 = response.nineBox3;
                  $scope.nineBox3desc = response.nineBox3desc;
                  $scope.nineBox4 = response.nineBox4;
                  $scope.nineBox4desc = response.nineBox4desc;
                  $scope.nineBox5 = response.nineBox5;
                  $scope.nineBox5desc = response.nineBox5desc;
                  $scope.nineBox6 = response.nineBox6;
                  $scope.nineBox6desc = response.nineBox6desc;
                  $scope.nineBox7 = response.nineBox7;
                  $scope.nineBox7desc = response.nineBox7desc;
                  $scope.nineBox8 = response.nineBox8;
                  $scope.nineBox8desc = response.nineBox8desc;
                  $scope.nineBox9 = response.nineBox9;
                  $scope.nineBox9desc = response.nineBox9desc;
                  // $scope.ldap_bind_pass = response.ldap_bind_pass;
                  $scope.ldap_base_dn = response.ldap_base_dn;
                  var $value1 = $scope.performance_prim_limite + ',' + $scope.performance_segundo_limite;
                  var $value2 = $scope.potencial_primeiro_lim + ',' + $scope.potencial_segundo_lim;
                  $('#ex2').val($value1);
                  $('#ex3').val($value2);
                  $('#performnace1').text($scope.performance_prim_limite + ' %');
                  $('#performnace2').text($scope.performance_segundo_limite + ' %');
                  $('#potencial1').text($scope.potencial_primeiro_lim + ' %');
                  $('#potencial2').text($scope.potencial_segundo_lim + ' %');
                  if ($scope.individual == 1) {
                        //alert($scope.individual);
                        $('#topper  #individual').prop('checked', true);
                        //$('#topper #individual').attr('checked','checked');
                        $("#label_individual").removeAttr('readonly');
                  }
                  if ($scope.team == 1) {
                        $('#team').prop('checked', true);
                        $("#label_team").removeAttr('readonly');
                  }
                  if ($scope.shared == 1) {
                        $('#shared').prop('checked', true);
                        $("#label_shared").removeAttr('readonly');
                  }
                  if ($scope.desempenho == 1) {
                        $('#desempenho').prop('checked', true);
                        $("#label_desempenho").removeAttr('readonly');
                        $("#desempenho_peso").removeAttr('readonly');
                  }
                  if ($scope.potential == 1) {
                        $('#potential').prop('checked', true);
                        $("#label_potential").removeAttr('readonly');
                        $("#potential_peso").removeAttr('readonly');
                  }
                  if ($scope.competencias == 1) {
                        $('#competencias').prop('checked', true);
                        $("#label_competencias").removeAttr('readonly');
                        $("#competencias_peso").removeAttr('readonly');
                  }
                  if ($scope.pdi == 1) {
                        $('#pdi').prop('checked', true);
                        $("#label_pdi").removeAttr('readonly');
                  }
                  if ($scope.performace == 1) {
                        $('#performace').prop('checked', true);
                        $("#label_performace").removeAttr('readonly');
                  }
                  if ($scope.my_carreer == 1) {
                        $('#my_carreer').prop('checked', true);
                        $("#label_carreer").removeAttr('readonly');
                  }
                  if ($scope.elos == 1) {
                        $('#elos').prop('checked', true);
                  }
                  if ($scope.feedback == 1) {
                        $('#feedback').prop('checked', true);
                  }
                  if ($scope.okr == 1) {
                        $('#okr').prop('checked', true);
                  }
                  if ($scope.crossfeed == 1) {
                        $('#crossfeed').prop('checked', true);
                  }
                  if ($scope.activities == 1) {
                        $('#activities').prop('checked', true);
                  }
                  if ($scope.performance_pessoal == 1) {
                        $('#performance_pessoal').prop('checked', true);
                  }
                  $("#planejamento").select2('destroy');
                  $("#planejamento option[value='" + response.planejamento + "']").attr('selected', 'selected');
                  $("#planejamento").select2();
                  $("#eixox_nine").select2('destroy');
                  $("#eixox_nine option[value='" + response.eixox_nine + "']").attr('selected', 'selected');
                  $("#eixox_nine").select2();
                  $("#eixoy_nine").select2('destroy');
                  $("#eixoy_nine option[value='" + response.eixoy_nine + "']").attr('selected', 'selected');
                  $("#eixoy_nine").select2();
            });
      }
      $scope.getEmpressaDetail();
      $("#desempenho, #potential, #competencias, #pdi, #performace, #individual, #team, #shared, #my_carreer, #elos").click(function() {
            var $id = $(this).attr('id');
            if ($(this).is(':checked')) {
                  $("#label_" + $id).removeAttr('readonly');
                  $("#" + $id + "_peso").removeAttr('readonly');
                  $(this).attr('checked', 'checked');
            } else {
                  $("#label_" + $id).attr('readonly', 'readonly');
                  $(this).removeAttr('checked');
            }
      });
      $('.upload.emp_imagem').click(function() {
            $('#user-image').trigger('click');
      });
      $('.upload.emp_footer').click(function() {
            $('#footer-image').trigger('click');
      });
      $scope.userDetailImage = false;
      $('#user-image').change(function(event) {
            var tmppath = URL.createObjectURL(event.target.files[0]);
            $timeout(function() {
                  $scope.userDetailImage = tmppath;
            });
      });
      $scope.empresaFooterImage = false;
      $('#footer-image').change(function(event) {
            var tmppath = URL.createObjectURL(event.target.files[0]);
            $timeout(function() {
                  $scope.empresaFooterImage = tmppath;
            });
      });
      $scope.saveEmpressa = function() {
            $('#form-save-empressa .error-message').addClass('hide');
            var footerInput = $('#footer-image'),
                  files_footer = footerInput[0].files;
            var imageInput = $('#user-image'),
                  files = imageInput[0].files;
            var data = {
                  nome_empresa: $("#nome_empresa").val(),
                  nome_usuario: $("#nome_usuario").val(),
                  email_usuario: $("#email_usuario").val(),
                  planejamento: $scope.planejamento,
                  workflow: $("#workflow").is(":checked") ? 1 : 0,
                  missao: $("#missao").val(),
                  visao: $("#visao").val(),
                  proposito: $("#proposito").val(),
                  numero_colab: $("#numero_colab").val() ? $("#numero_colab").val() : 0,
                  numero_licencas: $("#numero_licencas").val() ? $("#numero_licencas").val() : 0,
                  data_vencimento: $("#data_vencimento").val(),
                  individual: $("#topper #individual").is(":checked") ? 1 : 0,
                  team: $("#team").is(":checked") ? 1 : 0,
                  shared: $("#shared").is(":checked") ? 1 : 0,
                  label_individual: $("#label_individual").val(),
                  label_team: $("#label_team").val(),
                  label_shared: $("#label_shared").val(),
                  elo: $("#elo").val(),
                  my_carreer: $("#my_carreer").is(":checked") ? 1 : 0,
                  label_carreer: $("#label_carreer").val(),
                  elos: $("#elos").is(":checked") ? 1 : 0,
                  feedback: $("#feedback").is(":checked") ? 1 : 0,
                  okr: $("#okr").is(":checked") ? 1 : 0,
                  crossfeed: $("#crossfeed").is(":checked") ? 1 : 0,
                  activities: $("#activities").is(":checked") ? 1 : 0,
                  performance_pessoal: $("#performance_pessoal").is(":checked") ? 1 : 0,
                  // ldap server
                  ldap_enable: $("#ldap_enable").is(":checked") ? 1 : 0,
                  maf: $("#maf").is(":checked") ? 1 : 0,
                  ldap_server: $("#ldap_server").val(),
                  ldap_port: $("#ldap_port").val(),
                  ldap_bind_dn: $("#ldap_bind_dn").val(),
                  // ldap_bind_pass: $("#ldap_bind_pass").val(),
                  ldap_base_dn: $("#ldap_base_dn").val(),
                  imagem: files ? files[0] : '',
                  footer: files_footer ? files_footer[0] : '',
                  nineBox1: $("#nineBox1").val(),
                  nineBox1desc: $("#nineBox1desc").val(),
                  nineBox2: $("#nineBox2").val(),
                  nineBox2desc: $("#nineBox2desc").val(),
                  nineBox3: $("#nineBox3").val(),
                  nineBox3desc: $("#nineBox3desc").val(),
                  nineBox4: $("#nineBox4").val(),
                  nineBox4desc: $("#nineBox4desc").val(),
                  nineBox5: $("#nineBox5").val(),
                  nineBox5desc: $("#nineBox5desc").val(),
                  nineBox6: $("#nineBox6").val(),
                  nineBox6desc: $("#nineBox6desc").val(),
                  nineBox7: $("#nineBox7").val(),
                  nineBox7desc: $("#nineBox7desc").val(),
                  nineBox8: $("#nineBox8").val(),
                  nineBox8desc: $("#nineBox8desc").val(),
                  nineBox9: $("#nineBox9").val(),
                  nineBox9desc: $("#nineBox9desc").val()
            }


            // var formData = new FormData($("#form-save-empressa")[0]);

            var fd = new FormData();
            $.each(data, function(key, value) {
                  fd.append(key, value);
            });
            $empressa['saveEmpressa'](fd).then(function(savedEmpressia) {
                  // $empressa['saveEmpressaImage'](formData).then(function(imageUrl) {
                  //     $('#wlcm_img').attr('src', imageUrl);
                  // });
                  toastr.success('Salvo com sucesso.');
                  location.reload(true);
                  // $scope.getEmpressaDetail();
            });
      }
      $empressa['getallvalores']().then(function(response) {
            $scope.valores = response;
      });
      $scope.getValores = function($id) {
            $scope.method = 'editValore';
            $empressa['getvalorebyId']($id).then(function(response) {
                  $scope.type_value = response.name;
                  $scope.type_description = response.description;
                  $scope.value_id = response.id;
            });
      }
      $scope.addNewValores = function() {
            $('#form-valores').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
                  rules: {
                        type_value: 'required',
                        type_description: 'required'
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('#form-save-empressa .error-message').removeClass('hide');
                  },
                  submitHandler: function() {
                        $('#form-valores .error-message').addClass('hide');
                        var method = 'saveValores';
                        if ($scope.value_id) {
                              method = 'editValore';
                              var data = {
                                    type_id: $scope.value_id,
                                    type_value: $("#type_value").val(),
                                    type_description: $scope.type_description,
                              }
                        } else {
                              var data = {
                                    type_value: $("#type_value").val(),
                                    type_description: $scope.type_description,
                              }
                        }
                        $scope.method = 'saveValores';
                        $empressa[method](data).then(function(savedEmpressia) {
                              if (method == 'editValore') {
                                    toastr.success('Atualizados.');
                              } else {
                                    toastr.success('Adicionados.');
                              }
                              delete $scope.type_value;
                              delete $scope.type_description;
                              delete $scope.value_id;
                              delete $scope.method;
                              $empressa['getallvalores']().then(function(response) {
                                    $scope.valores = response;
                              });
                        });
                  }
            });
      }
      $scope.resetValores = function() {
            delete $scope.type_value;
            delete $scope.type_description;
            delete $scope.value_id;
            delete $scope.method;
      }
      $scope.deleteValore = function($id) {
            $empressa['deleteValorebyId']($id).then(function(savedEmpressia) {
                  toastr.success('Removidos.');
                  $empressa['getallvalores']().then(function(response) {
                        $scope.valores = response;
                  });
                  delete $scope.type_value;
                  delete $scope.type_description;
                  delete $scope.value_id;
                  delete $scope.method;
            });
      }
      // setTimeout(function(){
      //   var toolbarOptions = [
      //     [{ 'list': 'ordered'}, { 'list': 'bullet' }],
      //     ['clean']                                         // remove formatting button
      //   ];
      //   var quill = new Quill('#editor', {
      //     modules: {
      //       toolbar: toolbarOptions
      //     },
      //     theme: 'snow'
      //   });
      // }, 200);
});
elofy.controller('cargosCtrl', function globalCtrl($scope, $timeout, $users, $cargo, $skills, $translate) {
      $cargo['cargos']().then(function(response) {
            $scope.comensiaCargo = false;
            $scope.questionerioCargo = false;
            $scope.statusCargo = false;
            $skills['getbycompanyprofile']().then(function(response) {
                  $scope.skills = response;
            });
            $scope.activetab = 1;
            $("#searchskills").select2();
            $("#selected_skills").select2();
            $("#selected_question").select2();
            $scope.cargos = response;
      });
      $("#searchskills").change(function() {
            var $this_value = $(this).val();
            var $this_text = $("#searchskills option:selected").text();
            $(this).val('');
            if ($("#selected_skills option[value='" + $this_value + "']").length < 1) {
                  $("#selected_skills").append('<option value="' + $this_value + '">' + $this_text + '</option>');
            }
            $("#selected_skills option[value='" + $this_value + "']").prop('selected', true);
            // $scope.comensiaCargo = $("#selected_skills").val();
            $("#selected_skills").select2('destroy');
            $("#selected_skills").select2();
            $(".select2-container").off('click');
            $(".select2-search-field").hide();
            $(".select2-choices").css('cursor', 'default');
            $(this).select2();
      });
      $scope.Cargos = function() {
            $scope.comensiaCargo = false;
            $scope.activetab = 1;
      }
      $scope.addCargoSkill = function() {
            $scope.new_skill = $scope.new_skill;
            if ($scope.new_skill != undefined) {
                  $skills['addskillwithoutgeral']($scope.new_skill).then(function(response) {
                        toastr.success('Skill Successfully added.');
                        $("#selected_skills").select2('destroy');
                        if ($("#selected_skills option[value='" + response.id + "']").length < 1) {
                              $("#selected_skills").append('<option selected="selected" value="' + response.id + '">' + response.name + '</option>');
                        } else {
                              $("#selected_skills option[value='" + response.id + "']").attr('selected', 'selected');
                        }
                        $("#selected_skills").select2();
                        $scope.activetab = 2;
                        $('#new_skill').val('');
                        $scope.comensiaCargo = $("#selected_skills").val();
                        $(".select2-container").off('click');
                        $(".select2-search-field").hide();
                        $(".select2-choices").css('cursor', 'default');
                  });
            } else {
                  toastr.error('Digite primeiro o nome da habilidade.');
                  $(".select2-container").off('click');
                  $(".select2-search-field").hide();
                  $(".select2-choices").css('cursor', 'default');
            }
      }
      $scope.q = '';
      $scope.search = function() {
            $scope.q = $scope.query;
      }
      $scope.NewCargos = function($cargo_id) {
            $scope.cargoDetail = '';
            $scope.nomeCargo = '';
            $scope.descricaoCargo = '';
            $scope.criticoCargo = '';
            $scope.tempoVega = '';
            $scope.comensiaCargo = [];
            $scope.questionerioCargo = '';
            $scope.questionerioCargoid = '';
            $scope.statusCargo = '';
            $("#selected_skills").select2('destroy');
            $("#selected_question").select2('destroy');
            $("#selected-status").select2('destroy');
            $("#selected_question").val('');
            $("#selected_skills option").removeAttr('selected');
            $('#form-new-cargos')[0].reset();
            $scope.activetab = 2;
            $scope.cargo_id = $cargo_id;
            $('#new_cargo_add .error-message').addClass('hide');
            if ($scope.cargoValidation) {
                  $scope.cargoValidation.resetForm();
                  $('.validate-has-error').each(function() {
                        $(this).removeClass('validate-has-error');
                  });
            }
            $("#new_skill").on('keypress', function(e) {
                  var keyCode = e.keyCode || e.which;
                  if (keyCode === 13) {
                        e.preventDefault();
                        $scope.addCargoSkill();
                  }
            });
            if ($('.select-status').hasClass('visible')) {
                  var selectBox = $(".select-status").data("selectBox-selectBoxIt");
                  $('.select-status').removeClass('visible');
                  selectBox.destroy();
            }
            $('#form-new-cargos .multi-select').multiSelect('destroy');
            $timeout(function() {
                  $('.select-status').addClass('visible').selectBoxIt();
            }, 10);
            if ($cargo_id) {
                  $cargo['cargodetails']($cargo_id).then(function(cargodetails) {
                        $scope.cargoDetail = cargodetails;
                        $scope.nomeCargo = $scope.cargoDetail.name;
                        $scope.descricaoCargo = $scope.cargoDetail.description;
                        $scope.criticoCargo = $scope.cargoDetail.critical;
                        $scope.statusCargo = $scope.cargoDetail.active;
                        $scope.tempoVega = $scope.cargoDetail.completion_time;
                        $scope.questionerioCargo = $scope.cargoDetail.questionario;
                        $scope.questionerioCargoid = $scope.cargoDetail.questionario.id;
                        var selected_question = new Array();
                        for (var i = 0, skills = cargodetails.comptensia.length; i < skills; i++) {
                              if ($("#selected_skills option[value='" + cargodetails.comptensia[i].id + "']").length < 1) {
                                    $("#selected_skills").append('<option value="' + cargodetails.comptensia[i].id + '">' + cargodetails.comptensia[i].name + '</option>');
                              }
                              selected_question.push(cargodetails.comptensia[i].id);
                        };
                        $scope.comensiaCargo = selected_question;
                        $("#selected_skills").val(selected_question);
                        $("#selected_question").val($scope.questionerioCargoid);
                        $(".select2-choices").css('cursor', 'default');
                        $timeout(function() {
                              $("#selected_skills").select2();
                              $("#selected_question").select2();
                              $(".select2-container").off('click');
                              $(".select2-search-field").hide();
                        }, 100);
                  });
            } else {
                  $scope.comensiaCargo = [];
                  $scope.questionerioCargo = false;
                  $('#form-new-cargos')[0].reset();
                  $("#selected_skills").select2();
                  $("#selected_question").select2();
                  $(".select2-container").off('click');
                  $(".select2-search-field").hide();
                  $(".select2-choices").css('cursor', 'default');
            }
            $cargo['competencias_cargo']().then(function(response) {
                  $scope.competencias = response;
                  console.log($scope.competencias);
            });
            $cargo['questionario_cargo']().then(function(response) {
                  $scope.questionario = response;
            });
      }
      $scope.cargoValidation = $('#form-new-cargos').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  nomecargo: 'required',
                  descricaocargo: 'required',
                  criticaocargo: 'required',
                  tempovega: {
                        required: true,
                        number: "true"
                  },
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            invalidHandler: function() {
                  $('#new_cargo_add .error-message').removeClass('hide');
            },
            submitHandler: function() {
                  $('#new_cargo_add .error-message').addClass('hide');
                  $('#form-new-cargos .salvar').button('loading');
                  var data = {
                        name: $scope.nomeCargo,
                        descricao: $scope.descricaoCargo,
                        critico: $scope.criticoCargo,
                        status: $scope.statusCargo,
                        tempo: $scope.tempoVega,
                        comensia: $("#selected_skills").val(),
                        questionerio: $("#selected_question").val(),
                  }
                  var method = 'insertcargo';
                  if ($scope.cargo_id) {
                        method = 'editcargo';
                        data.id = $scope.cargo_id;
                  }
                  $cargo[method](data).then(function(response) {
                        $scope.activetab = 1;
                        if (method == 'editcargo') {
                              toastr.success('Atualizado com sucesso.');
                        } else {
                              toastr.success('Adicionado com sucesso.');
                        }
                        $scope.cargo_status = response;
                        $cargo['cargos']().then(function(response) {
                              $scope.cargos = response;
                        });
                        $('#new_cargo_add .salvar').button('reset');
                        $('#form-new-cargos')[0].reset();
                        $scope.comensiaCargo = false;
                        $scope.questionerioCargo = false;
                  });
            }
      });
});
elofy.controller('usersCtrl', function globalCtrl($scope, $timeout, $users, $cargos, $translate) {
      /*-- NÍVEL DE RESPONSABILIDADE - USUÁRIOS --*/
      $scope.nivels = [];
      for (var i = 0; i < 20; i++) {
            var nivelVal = {
                  "id": i + 1,
                  "label": i + 1
            };
            $scope.nivels.push(nivelVal);
      }
      $scope.selectedNivel = 1;
      $timeout(function() {
            $('.select-nivel').addClass('visible');
            $('.select-nivel').selectBoxIt();
      }, 10);
      /*-- new feature end --*/

      /* -- disable login, loginadfs --*/
      $scope.$parent.$watch('user', function(newValue) {
            if (newValue.empresa) {
                  if (newValue.empresa.ldap_enabled == 1) {
                        $('#login-name').removeAttr("disabled");
                        $('#login-adfs').removeAttr("disabled");
                        $('#login-name-div').removeClass("disable-content");
                        $('#login-adfs-div').removeClass("disable-content");
                  }
            }
      });
      /* -- disable login, loginadfs end --*/

      /* --filter-- */
      $scope.initializeCompoptionsFilter = function() {
            $timeout(function() {
                  $('#search_team').select2();
                  $('#search_gestor').select2();
                  $('#search_tipo_cargo').select2();
                  $('#search_projeto').select2();
                  $('#search_team').select2("val", "");
                  $('#search_gestor').select2("val", "");
                  $('#search_projeto').select2("val", "");
                  $('#search_tipo_cargo').select2("val", "");
            }, 200);
      }

      $scope.initializeCompoptionsFilter();
      $scope.filter = function() {
            var search_nome = $('#search_name').val();
            var search_team = $('#search_team').val();
            var search_gestor = $('#search_gestor').val();
            var search_tipo_cargo = $('#search_tipo_cargo').val();
            var search_projeto = $('#search_projeto').val();
            $scope.users = [];
            angular.forEach($scope.originUsers, function(item, key) {
                  var filtered = 0;
                  if (item.name.toUpperCase().includes(search_nome.toUpperCase())) {
                        filtered++;
                  }
                  if (search_team == '' || item.team == search_team) {
                        filtered++;
                  }
                  if (search_gestor == '' || item.gestor == search_gestor) {
                        filtered++;
                  }
                  if (search_tipo_cargo == '' || item.tipo_cargo == search_tipo_cargo) {
                        filtered++;
                  }
                  if (search_projeto == '' || item.nome_matriz == search_projeto) {
                        filtered++;
                  }
                  if ((($scope.search_status == 1) && (item.active == "true")) || (($scope.search_status == 0) && (item.active == "false"))) {
                        filtered++;
                  }
                  if (filtered == 6) $scope.users.push(item);
            });
            console.log("filtered:", $scope.search_status, $scope.users.length);
      }

      $scope.resetFilter = function() {
            $scope.filterOnlyActiveUsers();
            $('#search_team').select2('destroy');
            $('#search_gestor').select2('destroy');
            $('#search_tipo_cargo').select2('destroy');
            $('#search_projeto').select2('destroy');
            $('#search_name').val('');
            $scope.initializeCompoptionsFilter();
      }
      $scope.filterOnlyActiveUsers = function() {
            $scope.users = [];
            $scope.search_status = 1;
            angular.forEach($scope.originUsers, function(item, key) {
                  if (item.active == "true") $scope.users.push(item);
            });
      }
      /* --filter end-- */

      /* --add/edit panel-- */
      $scope.showEditPanel = false;
      $scope.dismissPanel = function() {
            $scope.modalUser(0);
            $scope.showEditPanel = false;
      }
      $scope.addPanel = function() {
            if ($scope.showEditPanel) {
                  return;
            }
            $scope.showEditPanel = true;
      }
      /* --add/edit panel end-- */
      $scope.usersNotAddedSelected = [];
      $scope.usersNotAdded = [];
      $scope.defaultUsersNotAdded = [];
      $scope.defaultUsersNotAddedSelected = [];
      $users['get_affordable_users'](null).then(function(users) {
            $scope.defaultUsersNotAdded = users.ts;
            $scope.defaultUsersNotAddedSelected = users.as;
            $scope.usersNotAdded = JSON.parse(JSON.stringify($scope.defaultUsersNotAdded));
            $scope.usersNotAddedSelected = JSON.parse(JSON.stringify($scope.defaultUsersNotAddedSelected));
      });
      $('#user-afford').change(function(e) {
            $.each($scope.usersNotAdded, function(i) {
                  if ($scope.usersNotAdded[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.usersNotAdded.splice(i, 1)[0];
                        $scope.usersNotAddedSelected.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAffordableAddedUser = function(ur, justRemove = true) {
            $.each($scope.usersNotAddedSelected, function(i) {
                  if ($scope.usersNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.usersNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.usersNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeAffordableUserAndRefresh = function(ur) {
            $('#form-user #user-afford').select2("val", "");
            $scope.removeAffordableAddedUser(ur);
      };

      $scope.matrizProjects = [];
      $users['getMatrizProjectsForCompany']().then(function(response) {
            $scope.matrizProjects = response;
            console.log("matrizProjects:", response);
      });

      $scope.teamsNotAddedSelected = [];
      $scope.teamsNotAdded = [];
      $scope.defaultTeamsNotAdded = [];
      $scope.defaultTeamsNotAddedSelected = [];
      $users['get_affordable_teams'](null, true).then(function(users) {
            $scope.defaultTeamsNotAdded = users.ts;
            $scope.defaultTeamsNotAddedSelected = users.as;
            $scope.teamsNotAdded = JSON.parse(JSON.stringify($scope.defaultTeamsNotAdded));
            $scope.teamsNotAddedSelected = JSON.parse(JSON.stringify($scope.defaultTeamsNotAddedSelected));
      });
      $('#team-afford').change(function(e) {
            $.each($scope.teamsNotAdded, function(i) {
                  if ($scope.teamsNotAdded[i].id === $(e.currentTarget).val()) {
                        var spliced = $scope.teamsNotAdded.splice(i, 1)[0];
                        $scope.teamsNotAddedSelected.push(spliced);
                        return false;
                  }
            });
      });
      $scope.removeAddedUser = function(ur, justRemove = true) {
            $.each($scope.teamsNotAddedSelected, function(i) {
                  if ($scope.teamsNotAddedSelected[i].id === ur.id) {
                        var spliced = $scope.teamsNotAddedSelected.splice(i, 1)[0];
                        if (justRemove) $scope.teamsNotAdded.push(spliced);
                        return false;
                  }
            });
      }
      $scope.removeUserAndRefresh = function(ur) {
            $('#form-user #team-afford').select2("val", "");
            $scope.removeAddedUser(ur);
      };

      $scope.getusers = function() {
            $users['getAllUserForCompanyId']().then(function(response) {
                  console.log("origin users:", response);
                  $scope.originUsers = response;
                  $scope.filterOnlyActiveUsers();
            });
      }
      $scope.getusers();
      $users['getGestors']().then(function(response) {
            $scope.gestors = response;
      });
      /*$("#side-form").niceScroll({
       'cursorcolor': "#3FB9EA"
       });*/
      // $scope.q = '';   //original search
      $scope.normal_user = 1;
      $scope.userDetailStatus = "true";
      // $scope.search = function() {   //original search
      //     $scope.q = $scope.query;
      //     console.log("eteu o search");
      //     $timeout(function() {
      //         $(".fixme").getNiceScroll().resize();
      //     }, 1000);
      // }
      $scope.scroollToTop = function() {
            $("html, body").animate({
                  scrollTop: 0
            }, "slow");
      }
      if ($.isFunction($.fn.datepicker)) {
            $(".data").each(function(i, el) {
                  var $this = $(this),
                        opts = {
                              format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                              startDate: attrDefault($this, 'startDate', ''),
                              endDate: attrDefault($this, 'endDate', ''),
                              daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                              startView: attrDefault($this, 'startView', 0),
                              language: 'pt-BR',
                              rtl: rtl()
                        },
                        $n = $this.next(),
                        $p = $this.prev();
                  $this.datepicker(opts);
                  if ($n.is('.input-group-addon') && $n.has('a')) {
                        $n.on('click', function(ev) {
                              ev.preventDefault();
                              $this.datepicker('show');
                        });
                  }
                  if ($p.is('.input-group-addon') && $p.has('a')) {
                        $p.on('click', function(ev) {
                              ev.preventDefault();
                              $this.datepicker('show');
                        });
                  }
            });
      }
      $('#usuarios #side-form .upload').click(function() {
            $('#user-image').trigger('click');
      });
      var fixmeTop = 134; // get initial position of the element
      $(window).scroll(function() { // assign scroll event listener
            var currentScroll = $(window).scrollTop(); // get current position
            //console.log(currentScroll, fixmeTop, currentScroll >= fixmeTop);
            if (currentScroll >= fixmeTop) { // apply position: fixed if you
                  $('.fixme').css({ // scroll to that element or below it
                        'position': 'fixed',
                        'top': '60px',
                        'overflow-y': 'scroll',
                        'height': 'calc(100% - 40px)',
                  });
            } else { // apply position: static
                  $('.fixme').css({ // if you scroll above it
                        'position': 'absolute',
                        'top': fixmeTop,
                        'height': 'calc(100% - 120px)',
                  });
            }
      });
      $timeout(function() {
            $('#user-status').select2();
            $('#userTeam').select2();
            $('#userGestor').select2();
            $('#userTipoCargo').select2();
            $('#matriz_projeto').select2();
      }, 300);
      $scope.setuptaginput = function() {
            $('#user-cargo').tagsinput('destroy');
            $timeout(function() {
                  $cargos['get']().then(function(response) {
                        var cargoNames = new Bloodhound({
                              datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                              queryTokenizer: Bloodhound.tokenizers.whitespace,
                              local: response
                        });
                        cargoNames.initialize();
                        $('#user-cargo').tagsinput({
                              typeaheadjs: {
                                    name: 'tagnames',
                                    displayKey: 'name',
                                    valueKey: 'name',
                                    source: cargoNames.ttAdapter()
                              },
                              maxTags: 1
                        });
                        $(".tt-input").on('keyup keypress', function(e) {
                              var keyCode = e.keyCode || e.which;
                              if (keyCode === 13) {
                                    $(this).val();
                              }
                        });
                        $('#form-user').on('keyup keypress', function(e) {
                              var keyCode = e.keyCode || e.which;
                              if (keyCode === 13) {
                                    e.preventDefault();
                                    return false;
                              }
                        });
                        $('#user-cargo').on('itemAdded', function(event) {
                              var cargo = event.item;
                        });
                        if ($scope.userDetail) $('#user-cargo').tagsinput('add', $scope.userDetail.cargo);
                  });
            }, 10);
      }
      $scope.setuptaginput();
      $scope.modalUser = function($user_id) {
            $scope.showEditPanel = true; //add/edit panel
            $scope.admin = false;
            $scope.normal_user = true;
            $scope.goal_register = false;
            $scope.maintenance_user = false;
            $scope.user_id = $user_id;
            $scope.userDetail = {};
            $scope.userDetailStatus = true;
            $scope.userDetailImage = '';
            $scope.user_reviewer = false;
            $scope.user_pesquisas = false;
            $scope.userTeam = false;
            $scope.userGestor = false;
            $scope.userTipoCargo = false;
            $scope.chk_tipo_cargo = false;
            $scope.chk_global = false;
            $scope.access_crossfeeds = false;
            $scope.access_delete_direcionar = false;
            $scope.control_usuario = false;
            /*add user times */
            $scope.usersNotAdded = [];
            $scope.usersNotAddedSelected = [];
            $scope.teamsNotAdded = [];
            $scope.teamsNotAddedSelected = [];

            // $scope.cleanMatrizProjeto();
            $scope.selectedProjeto = false;

            $('#user-image').val('');
            $('.data').datepicker('update', '');
            $('.data').val('');
            $('#side-form .error-message').addClass('hide');
            if ($scope.userValidation) {
                  $scope.userValidation.resetForm();
                  $('.validate-has-error').each(function() {
                        $(this).removeClass('validate-has-error');
                  });
            }
            $timeout(function() {
                  $('#user-status').select2();
                  $('#userTeam').select2();
                  $('#userGestor').select2();
                  $('#userTipoCargo').select2();
                  $('#matriz_projeto').select2();
            }, 400);
            $scope.userDetailImage = false;
            $('#user-image').change(function(event) {
                  var tmppath = URL.createObjectURL(event.target.files[0]);
                  $timeout(function() {
                        $scope.userDetailImage = tmppath;
                  });
            });
            $scope.setuptaginput = function() {
                  $('#user-cargo').tagsinput('destroy');
                  $timeout(function() {
                        $cargos['get']().then(function(response) {
                              var cargoNames = new Bloodhound({
                                    datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                                    queryTokenizer: Bloodhound.tokenizers.whitespace,
                                    local: response
                              });
                              cargoNames.initialize();
                              $('#user-cargo').tagsinput({
                                    typeaheadjs: {
                                          name: 'tagnames',
                                          displayKey: 'name',
                                          valueKey: 'name',
                                          source: cargoNames.ttAdapter()
                                    },
                                    maxTags: 1
                              });
                              $(".tt-input").on('keyup keypress', function(e) {
                                    var keyCode = e.keyCode || e.which;
                                    if (keyCode === 13) {
                                          $(this).val();
                                    }
                              });
                              $('#form-user').on('keyup keypress', function(e) {
                                    var keyCode = e.keyCode || e.which;
                                    if (keyCode === 13) {
                                          e.preventDefault();
                                          return false;
                                    }
                              });
                              $('#user-cargo').on('itemAdded', function(event) {
                                    var cargo = event.item;
                              });
                              if ($scope.userDetail) $('#user-cargo').val('');
                              $('#user-cargo').tagsinput('removeAll');
                              $('.tagsinput .tag').remove();
                              $timeout(function() {
                                    $('#user-cargo').tagsinput('add', $scope.userDetail.cargo);
                              }, 400);
                        });
                  }, 10);
            }
            if ($user_id) {
                  $('#user-status').select2('val', '');
                  $('#userTeam').select2('val', '');
                  $('#userGestor').select2('val', '');
                  $('#userTipoCargo').select2('val', '');
                  $('#matriz_projeto').select2('val', '');
                  var selectBoxNivel = $('.select-nivel').data("selectBox-selectBoxIt");
                  $('.select-nivel').removeClass('visible');
                  if (selectBoxNivel) selectBoxNivel.destroy();
                  $users['details']($user_id).then(function(response) {
                        $scope.userDetail = response;
                        $scope.userDetailStatus = $scope.userDetail.active;
                        $scope.userDetailImage = $scope.userDetail.image;
                        $scope.userDetail.cargo = $scope.userDetail.cargo;
                        $scope.userDetail.id_cargo = $scope.userDetail.id_cargo;
                        $scope.normal_user = !!+$scope.userDetail.normal_user;
                        $scope.goal_register = !!+$scope.userDetail.goal_register;
                        $scope.maintenance_user = !!+$scope.userDetail.maintenance_user;
                        $scope.user_reviewer = !!+$scope.userDetail.user_reviewer;
                        $scope.user_pesquisas = !!+$scope.userDetail.user_pesquisas;
                        $scope.admin = $scope.userDetail.admin == "true" ? true : false;
                        $scope.userTeam = $scope.userDetail.id_time;
                        $scope.userGestor = $scope.userDetail.id_gestor;
                        $scope.userTipoCargo = $scope.userDetail.tipo_cargo;
                        $scope.chk_tipo_cargo = !!+$scope.userDetail.chk_tipo_cargo;
                        $scope.chk_global = !!+$scope.userDetail.chk_global;
                        $scope.access_crossfeeds = !!+$scope.userDetail.access_crossfeeds;
                        $scope.access_delete_direcionar = !!+$scope.userDetail.access_delete_direcionar;
                        $scope.control_usuario = !!+$scope.userDetail.control_usuario;
                        $users['get_affordable_users']($user_id).then(function(users) {
                              $scope.usersNotAdded = users.ts;
                              $scope.usersNotAddedSelected = users.as;
                        });
                        $users['get_affordable_teams']($user_id, true).then(function(users) {
                              $scope.teamsNotAdded = users.ts;
                              $scope.teamsNotAddedSelected = users.as;
                        });
                        // $users['getMatrizProjectsForUser']($user_id).then(function(response) {
                        //       $scope.setMatrizProjetoValue(response);
                        // });
                        $scope.selectedProjeto = $scope.userDetail.id_projeto;
                        $scope.userDetail.login = $scope.userDetail.login;
                        $scope.userDetail.login_adfs = $scope.userDetail.login_adfs;
                        $scope.selectedNivel = parseInt($scope.userDetail.nivel);
                        $timeout(function() {
                              $('#user-status').select2();
                              $('#userTeam').select2();
                              $('#userGestor').select2();
                              $('#userTipoCargo').select2();
                              $('#matriz_projeto').select2();
                              $('.select-nivel').addClass('visible');
                              $('.select-nivel').selectBoxIt();
                        }, 400);
                        $('#user-birthday').val(($scope.userDetail.birthday != false) ? $scope.userDetail.birthday : '');
                        $('#user-birthday').datepicker('update', $scope.userDetail.birthday);
                        $('#user-dismissal').val(($scope.userDetail.dismissal != false) ? $scope.userDetail.dismissal : '');
                        $('#user-dismissal').datepicker('update', $scope.userDetail.dismissal);
                        $('#user-name').val($scope.userDetail.name);
                        $('#user-email').val($scope.userDetail.email);
                        $('#login-adfs').val($scope.userDetail.login_adfs);
                        $('#login-name').val($scope.userDetail.login);
                        $('#faixa_atual').val($scope.userDetail.faixa_atual);
                        $scope.setuptaginput();
                  });
            } else {
                  
                  $scope.inclusao = 1;
                  $scope.userDetail = {};
                  $scope.setuptaginput();
                  $scope.normal_user = true;
                  $scope.goal_register = false;
                  $scope.maintenance_user = false;
                  $scope.admin = false;
                  $scope.userDetailStatus = "true";
                  $scope.usersNotAdded = JSON.parse(JSON.stringify($scope.defaultUsersNotAdded));
                  $scope.usersNotAddedSelected = JSON.parse(JSON.stringify($scope.defaultUsersNotAddedSelected));
                  $scope.teamsNotAdded = JSON.parse(JSON.stringify($scope.defaultTeamsNotAdded));
                  $scope.teamsNotAddedSelected = JSON.parse(JSON.stringify($scope.defaultTeamsNotAddedSelected));
                  $('#form-user .select2').select2("val", "");
                  var selectBoxNivel = $('.select-nivel').data("selectBox-selectBoxIt");
                  $('.select-nivel').removeClass('visible');
                  if (selectBoxNivel) selectBoxNivel.destroy();
                  $scope.selectedNivel = 1;
                  $timeout(function() {
                        $('.select-nivel').addClass('visible');
                        $('.select-nivel').selectBoxIt();
                  }, 400);
                  $('#user-name').val('');
                  $('#user-birthday').val('');
                  $('#user-dismissal').val('');
                  $('#user-email').val('');
                  $('#login-adfs').val('');
                  $('#login-name').val('');
                  $('#faixa_atual').val('');
            }
      }
      $.validator.addMethod("checkTags", function(value) { //add custom method
            //Tags input plugin converts input into div having id #YOURINPUTID_tagsinput
            //now you can count no of tags
            return ($('#user-cargo').parent().find(".tag").length > 0);
      });
      $scope.userValidation = $('#form-user').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  nome: 'required',
                  // 'user-cargo': 'checkTags',
                  email: {
                        required: true,
                        email: true
                  },
                  // login: {
                  //       required: true,
                  //       email: true
                  // },
                  userTeam: {
                        required: true,
                        valueNotEquals: "? undefined:undefined ?"
                  },
                  imagem: {
                        required: function() {
                              return $('#user-image').val() ? true : false;
                        },
                        extension: "png|jpe?g|gif"
                  }
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
                  if ($(element).is('#user-image')) {
                        $('#user-image').parent().find('p').remove();
                  };
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
                  if ($(element).is('#user-image') && $(element).parent().hasClass('validate-has-error') && $(element).parent().find('p').length == 0) {
                        $('#user-image').parent().append('<p class="text-danger">Por favor insira uma imagem.</p>')
                  };
            },
            invalidHandler: function() {
                  $('#side-form .error-message').removeClass('hide');
            },
            submitHandler: function(form) {

                  $('#side-form .error-message').addClass('hide');
                  $('#form-user .salvar').button('loading');
                  var imageInput = $('#user-image'),
                        files = imageInput[0].files;
                  var data = {
                        nome: $('#user-name').val(),
                        imagem: files ? files[0] : '',
                        admin: $scope.admin,
                        birthday: $('#user-birthday').val(),
                        dismissal: $('#user-dismissal').val(),
                        cargo: $('#user-cargo').val(),
                        normal_user: $("#normal_user").prop('checked'),
                        goal_register: $("#goal_register").prop('checked'),
                        maintenance_user: $("#maintenance_user").prop('checked'),
                        user_reviewer: $("#user_reviewer").prop('checked'),
                        user_pesquisas: $("#user_pesquisas").prop('checked'),
                        team: $('#userTeam').val(),
                        gestor: $('#userGestor').val(),
                        email: $('#user-email').val(),
                        tipo_cargo: $('#userTipoCargo').val(),
                        chk_tipo_cargo: $("#chk_tipo_cargo").prop('checked'),
                        chk_global: $("#chk_global").prop('checked'),
                        access_crossfeeds: $("#access_crossfeeds").prop('checked'),
                        access_delete_direcionar: $("#access_delete_direcionar").prop('checked'),
                        control_usuario: $("#control_usuario").prop('checked'),
                        status: $scope.userDetailStatus,
                        login_adfs: $('#login-adfs').val(),
                        login: $('#login-name').val(),
                        faixa_atual: $('#faixa_atual').val(),
                        nivel: $scope.selectedNivel,
                        projeto: $('#matriz_projeto').val()
                  }
                  
                  var method = 'insert';
                  if ($scope.user_id) {
                        method = 'edit';
                        data.id = $scope.user_id;
                  }
                  data.affordTeams = [];
                  data.affordUsers = [];
                  // data.matrizProjetos = $scope.makeProjetoIdList();
                  $('#form-user input[name^="corresponsaveis"]').each(function() {
                        data.affordTeams.push($(this).val());
                  });
                  $('#form-user input[name^="affordable_users"]').each(function() {
                        data.affordUsers.push($(this).val());
                  });                 
                  console.log("data1:", data); 
                  $scope.form = new FormData();
                  $.each(data, function(key, value) {
                        $scope.form.append(key, value);
                  });
                  console.log('1');
                  $users[method]($scope.form).then(function(response) {
                        if (method == 'edit') {
                              for (var i = 0, leng = $scope.users.length; i < leng; i++) {
                                    if ($scope.users[i].id == response.id) {
                                          $scope.users[i].active = response.active;
                                          $scope.users[i].gerado_integracao = response.gerado_integracao;
                                          $scope.users[i].admin = response.admin;
                                          $scope.users[i].appraiser = response.appraiser;
                                          $scope.users[i].normal_user = response.normal_user;
                                          $scope.users[i].goal_register = response.goal_register;
                                          $scope.users[i].maintenance_user = response.maintenance_user;
                                          $scope.users[i].user_reviewer = response.user_reviewer;
                                          $scope.users[i].user_pesquisas = response.user_pesquisas;
                                          $scope.users[i].image = response.image;
                                          $scope.users[i].xs_image = response.xs_image;
                                          $scope.users[i].md_image = response.md_image;
                                          $scope.users[i].name = response.name;
                                          $scope.users[i].team = response.team;
                                          $scope.users[i].gestor = response.gestor;
                                          $scope.users[i].email = response.email;
                                          $scope.users[i].tipo_cargo = response.tipo_cargo;
                                          $scope.users[i].chk_tipo_cargo = response.chk_tipo_cargo;
                                          $scope.users[i].chk_global = response.chk_global;
                                          $scope.users[i].access_crossfeeds = response.access_crossfeeds;
                                          $scope.users[i].access_delete_direcionar = response.access_delete_direcionar;
                                          $scope.users[i].control_usuario = response.control_usuario;
                                    }
                              };
                              if (response.id == $scope.$parent.user.id) {
                                    $scope.$parent.user.active = response.active;
                                    $scope.$parent.user.admin = response.admin;
                                    $scope.$parent.user.appraiser = response.appraiser;
                                    $scope.$parent.user.normal_user = response.normal_user;
                                    $scope.$parent.user.goal_register = response.goal_register;
                                    $scope.$parent.user.maintenance_user = response.maintenance_user;
                                    $scope.$parent.user.user_reviewer = response.user_reviewer;
                                    $scope.$parent.user.user_pesquisas = response.user_pesquisas;
                                    $scope.$parent.user.image = response.image;
                                    $scope.$parent.user.xs_image = response.xs_image;
                                    $scope.$parent.user.md_image = response.md_image;
                                    $scope.$parent.user.name = response.name;
                                    $scope.$parent.user.team = response.team;
                                    $scope.$parent.user.gestor = response.gestor;
                                    $scope.$parent.user.tipo_cargo = response.tipo_cargo;
                                    $scope.$parent.user.chk_tipo_cargo = response.chk_tipo_cargo;
                                    $scope.$parent.user.chk_global = response.chk_global;
                                    $scope.$parent.user.access_crossfeeds = response.access_crossfeeds;
                                    $scope.$parent.user.access_delete_direcionar = response.access_delete_direcionar;
                                    $scope.$parent.user.control_usuario = response.control_usuario;
                              }
                        } else {
                              console.log('3');
                              $scope.users = response;
                              $('#form-user .salvar').button('reset');
                              $('#form-user')[0].reset();
                              $scope.modalUser();
                        }
                        console.log('insert com sucesso.');
                        $('#form-user #user-status').select2('destroy');
                        $('#form-user #userTeam').select2('destroy');
                        $('#form-user #userGestor').select2('destroy');
                        $('#form-user #userTipoCargo').select2('destroy');
                        $('#form-user #matriz_projeto').select2('destroy');
                        $timeout(function() {
                              $('#form-user #user-status').select2();
                              $('#form-user #userTeam').select2();
                              $('#form-user #userGestor').select2();
                              $('#form-user #userTipoCargo').select2();
                              $('#form-user #matriz_projeto').select2();
                        }, 400);
                       
                        if (method == 'edit') {
                              if (response.message_error == 1) {
                                    toastr.error(response.message);
                              } else {
                                    //toastr.success(response.message);
                                    toastr.success('Adicionado com sucesso!');
                              }
                        } else {
                              toastr.success('Adicionado com sucesso.');
                        }
                        
                        $('#form-user .salvar').button('reset');
                        $('#form-user')[0].reset();
                        $scope.setuptaginput();
                        $scope.dismissPanel(); //  add/edit panel
                  });
                  
            }
      });
});
elofy.controller('integrationCtrl', function globalCtrl($scope, $timeout, $users, $integration, $translate) {
      $integration['getAll']().then(function(response) {
            $scope.integrations = response;
      });
      $scope.Integration = function() {
            $scope.activetab = 1;
      }
      $scope.NewIntegration = function($integration_id) {
            $scope.nomeIntegration = '';
            $scope.typeIntegration = 0;
            $scope.hostIntegration = '';
            $scope.nomeIntegration = '';
            $scope.portIntegration = '';
            $scope.databaseIntegration = '';
            $scope.sqlIntegration = '';
            $scope.soapIntegration = '';
            $scope.namespaceIntegration = '';
            $scope.medirKeyresultIntegration = '';
            $scope.parameterIntegration = '';
            $('#form-new-integration')[0].reset();
            $scope.activetab = 2;
            $scope.integration_id = $integration_id;
            $('#new_integration_add .error-message').addClass('hide');
            if ($scope.integrationValidation) {
                  $scope.integrationValidation.resetForm();
                  $('.validate-has-error').each(function() {
                        $(this).removeClass('validate-has-error');
                  });
            }
            if ($integration_id) {
                  $integration['integration_details']($integration_id).then(function(response) {
                        if (response.type == 1) {
                              $scope.typeIntegration = 1;
                              $scope.soapIntegration = response.soap_address;
                              $scope.namespaceIntegration = response.name_space;
                              $scope.medirKeyresultIntegration = response.metodo;
                              $scope.parameterIntegration = response.parametrows;
                        }
                        $scope.nomeIntegration = response.name;
                        $scope.typeIntegration = response.type;
                        $scope.hostIntegration = response.host;
                        $scope.portIntegration = parseInt(response.port);
                        $scope.databaseIntegration = response.database;
                        $scope.sqlIntegration = response.sql_command;
                        $scope.usernameIntegration = response.username;
                        $scope.passwordIntegration = response.password;
                        $scope.statusIntegration = response.active;
                  });
            }
      }
      $scope.testconnection = function() {
            $('#nomeIntegration').rules("remove");
            $('#sqlIntegration').rules("remove");
            $('#passwordIntegration').rules("remove");
            if ($('#form-new-integration').valid()) {
                  var data = {
                        host: $('#hostIntegration').val(),
                        port: $('#portIntegration').val(),
                        uname: $('#usernameIntegration').val(),
                        password: $('#passwordIntegration').val(),
                        database: $('#databaseIntegration').val(),
                  }
                  $integration['testconnection'](data).then(function(response) {
                        if (response.error) {
                              toastr.error(response.message);
                        } else {
                              toastr.success(response.message);
                        }
                  });
            }
            $('#nomeIntegration').rules("add", 'required');
            $('#sqlIntegration').rules("add", 'required');
      }
      $scope.testsqlquery = function() {
            $('#nomeIntegration').rules("remove");
            $('#passwordIntegration').rules("remove");
            if ($('#form-new-integration').valid()) {
                  var data = {
                        host: $('#hostIntegration').val(),
                        port: $('#portIntegration').val(),
                        uname: $('#usernameIntegration').val(),
                        password: $('#passwordIntegration').val(),
                        database: $('#databaseIntegration').val(),
                        sql: $('#sqlIntegration').val(),
                  }
                  $integration['testsqlquery'](data).then(function(response) {
                        $scope.sqlResult = JSON.stringify(response.message);
                  });
            }
            $('#nomeIntegration').rules("add", 'required');
      }
      $scope.integrationValidation = $('#form-new-integration').validate({
            ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags-edit, .times-edit',
            rules: {
                  nomeIntegration: 'required',
                  hostIntegration: 'required',
                  usernameIntegration: 'required',
                  databaseIntegration: 'required',
                  portIntegration: 'required',
                  sqlIntegration: 'required'
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            invalidHandler: function() {
                  $('#new_integration_add .error-message').removeClass('hide');
            },
            submitHandler: function() {
                  $('#new_integration_add .error-message').addClass('hide');
                  $('#form-new-integration .salvar').button('loading');
                  var status = $('#statusIntegration').val();
                  if (status == '? undefined:undefined ?' || status == '') {
                        var status = 1
                  } else {
                        var status = $('#statusIntegration').val();
                  }
                  var data = {
                        name: $('#nomeIntegration').val(),
                        type: $scope.typeIntegration,
                        host: $('#hostIntegration').val(),
                        port: $('#portIntegration').val(),
                        uname: $('#usernameIntegration').val(),
                        password: $('#passwordIntegration').val(),
                        database: $('#databaseIntegration').val(),
                        sql: $('#sqlIntegration').val(),
                        ativo: status,
                        soap: $('#soapIntegration').val(),
                        namespace: $('#namespaceIntegration').val(),
                        keyresult: $('#medirKeyresultIntegration').val(),
                        parameter: $('#parameterIntegration').val(),
                  }
                  var method = 'saveintegration';
                  if ($scope.integration_id) {
                        method = 'editintegration';
                        data.id = $scope.integration_id;
                  }
                  $integration[method](data).then(function(response) {
                        $scope.activetab = 1;
                        if (method == 'editintegration') {
                              toastr.success('Atualizada com sucesso.');
                        } else {
                              toastr.success('Adicionada com sucesso.');
                        }
                        delete $scope.soapIntegration;
                        delete $scope.namespaceIntegration;
                        delete $scope.medirKeyresultIntegration;
                        delete $scope.parameterIntegration;
                        $integration['getAll']().then(function(integrations) {
                              $scope.integrations = integrations;
                        });
                        $('#new_integration_add .salvar').button('reset');
                        $('#form-new-integration')[0].reset();
                  });
            }
      });
});
elofy.controller('peopledevelopmentCtrl', function globalCtrl($scope, $timeout, $years, $cycles, $users, $tags, $skills, $tatics, $globals, $empressa, $elos, timeAgo, nowTime, $dashboard, $carreers, $cargo, $surveys, $pesquisaquestion, $teams, $pesquisaseditor, $translate) {
      $scope.contentLoading = 0;
      $scope.datafunction = function() {
            $timeout(function() {
                  if ($.isFunction($.fn.datepicker)) {
                        $(".data").each(function(i, el) {
                              var $this = $(this),
                                    opts = {
                                          format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                                          startDate: attrDefault($this, 'startDate', ''),
                                          endDate: attrDefault($this, 'endDate', ''),
                                          daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                                          startView: attrDefault($this, 'startView', 0),
                                          language: 'pt-BR',
                                          rtl: rtl()
                                    },
                                    $n = $this.next(),
                                    $p = $this.prev();
                              $this.datepicker(opts);
                              if ($n.is('.input-group-addon') && $n.has('a')) {
                                    $n.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                              if ($p.is('.input-group-addon') && $p.has('a')) {
                                    $p.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                        });
                  }
            }, 100);
      }
      $scope.datafunction();
      $timeout(function() {
            $('.selectd_survey').hide();
            $('.selectd_tags').hide();
            $('#selectd_teams').hide();
            $('#selectd_gestors').hide();
            $('#selectd_users').hide();
      }, 300);
      $scope.detail = false;
      $(document).on('click', '#carreertab .dropdown-menu', function(e) {
            $scope.datafunction();
            e.stopPropagation();
      });
      $users['me']().then(function(response) {
            $scope.user = response;
            $scope.contentLoading++;
            $pesquisaquestion['getAllSurveyPesquisa'](2).then(function(res) {
                  // $('.selectd_survey').select2('destroy');
                  $scope.surveys = res;
                  $scope.contentLoading--;
                  // $timeout(function(){
                  // $('#selectd_survey').show();
                  // $('#selectd_survey').select2();
                  // },200);
            });
            $scope.contentLoading++;
            $pesquisaquestion['getAllTagsPesquisa']().then(function(res) {
                  // $('.selectd_tags').select2('destroy');
                  $scope.tags = res;
                  $scope.contentLoading--;
                  // $timeout(function(){
                  //         $('#selectd_tags').show();
                  //         $('#selectd_tags').select2();
                  // },200);
            });
            $scope.contentLoading++;
            $pesquisaquestion['getAllTeamsPesquisa']().then(function(res) {
                  // $('.selectd_teams').select2('destroy');
                  $scope.teams = res;
                  $scope.contentLoading--;
                  // $timeout(function(){
                  //       $('#selectd_teams').show();
                  //       $('#selectd_teams').select2();
                  // },200);
            });
            $scope.contentLoading++;
            $pesquisaquestion['getAllGestor']().then(function(res) {
                  // $('#selectd_gestors').select2('destroy');
                  $scope.gestors = res;
                  $scope.contentLoading--;
                  // $timeout(function(){
                  //       $('#selectd_gestors').show();
                  //       $('#selectd_gestors').select2();
                  // },200);
            });
            $scope.contentLoading++;
            $users['get']().then(function(users) {
                  $scope.users = users;
                  $scope.contentLoading--;
                  // $('#selectd_users').select2('destroy');
                  // $timeout(function(){
                  //       $('#selectd_users').show();
                  //       $('#selectd_users').select2();
                  // },200);
            });
            $('#selectd_survey').change(function() {
                  var selectd_survey = $(this).val();
                  var strSurvey = '';
                  if (selectd_survey != null) {
                        var strSurvey = selectd_survey.join(",");
                  }
                  $scope.id_surveys = strSurvey;
            });
            $('#selectd_tags').change(function() {
                  var selectd_tags = $(this).val();
                  var strTags = '';
                  if (selectd_tags != null) {
                        var strTags = selectd_tags.join(",");
                  }
                  $scope.id_tags = strTags;
                  $("#selectd_teams").select2("val", "");
                  var select_val = new Array();
                  $pesquisaquestion['getAllTeamsPesquisa'](strTags).then(function(response) {
                        $scope.teams = response;
                        if (!response) {
                              console.log("nenhum time encontrado");
                              return;
                        }
                        if (response.length > 0) {
                              for (var i = 0; i < response.length; i++) {
                                    select_val.push(response[i].id);
                              }
                        }
                        var teamsId = '';
                        $timeout(function() {
                              if (selectd_tags.length > 0) {
                                    $('#selectd_teams').select2('val', select_val);
                                    teamsId = select_val.join(",");
                                    $scope.id_teams = teamsId;
                              }
                        }, 100);
                  });
            });
            $('#selectd_gestors').change(function() {
                  var selectd_gestors = $(this).val();
                  var strGest = '';
                  if (selectd_gestors != null) {
                        var strGest = selectd_gestors.join(",");
                  }
                  $scope.id_gest = strGest;
            });
            $('#selectd_users').change(function() {
                  var selectd_users = $(this).val();
                  var strUsers = '';
                  if (selectd_users != null) {
                        var strUsers = selectd_users.join(",");
                  }
                  $scope.id_users = strUsers;
            });
            $('#selectd_teams').change(function() {
                  var selectd_teams = $(this).val();
                  var strTeams = '';
                  if (selectd_teams != null) {
                        var strTeams = selectd_teams.join(",");
                  }
                  $scope.id_teams = strTeams;
            });
            $('#filter_start_date').change(function() {
                  $scope.start_time = $(this).val();
            });
            $scope.contentLoading++;
            $pesquisaquestion['getPeopleDevelopement']().then(function(response) {
                  $scope.peoplesfordevelopements = response;
                  $scope.contentLoading--;
            });
            $scope.resetFilterBox = function() {
                  $timeout(function() {
                        $("#selectd_survey").select2({
                              placeholder: "Choose survey"
                        });
                        $("#selectd_tags").select2({
                              placeholder: "Choose tag"
                        });
                        $("#selectd_teams").select2({
                              placeholder: "Choose team"
                        });
                        $("#selectd_gestors").select2({
                              placeholder: "Choose Gestor"
                        });
                        $("#selectd_users").select2({
                              placeholder: "Choose User"
                        });
                  }, 100);
                  //       $('#filter_btn').addClass('open');
                  //       $('.open > .dropdown-menu').css('display','block');
            }
            $scope.resetFilterBox();
            $scope.filterPeopleDevlopment = function() {
                  var id_surveys = $scope.id_surveys;
                  var id_tags = $scope.id_tags;
                  var id_teams = $scope.id_teams;
                  var id_gestors = $scope.id_gest;
                  var id_users = $scope.id_users;
                  var start_time = $('#filter_start_date').val();
                  // $('#filter_btn').removeClass('open');
                  // $('#filter_btn .dropdown-menu').css('display','none');
                  $scope.contentLoading++;
                  $pesquisaquestion['getPeopleDevelopement'](id_surveys, id_tags, id_teams, id_gestors, id_users, start_time).then(function(response) {
                        $scope.peoplesfordevelopements = response;
                        $scope.contentLoading--;
                  });
            }
            $scope.clearfilterPeopleDevlopment = function() {
                  $("#selectd_survey").select2("val", "");
                  $("#selectd_tags").select2("val", "");
                  $("#selectd_teams").select2("val", "");
                  $("#selectd_gestors").select2("val", "");
                  $("#selectd_users").select2("val", "");
                  $("#filter_start_date").val("");
                  $scope.id_surveys = null;
                  $scope.id_tags = null;
                  $scope.id_teams = null;
                  $scope.id_gest = null;
                  $scope.id_users = null;
                  $pesquisaquestion['getPeopleDevelopement']().then(function(response) {
                        $scope.peoplesfordevelopements = response;
                  });
            }
            $scope.refreshFilters = function() {
                  $timeout(function() {
                        $("#selectd_survey").select2({
                              placeholder: "Choose survey"
                        });
                        $("#selectd_tags").select2({
                              placeholder: "Choose tag"
                        });
                        $("#selectd_teams").select2({
                              placeholder: "Choose team"
                        });
                        $("#selectd_gestors").select2({
                              placeholder: "Choose Gestor"
                        });
                        $("#selectd_users").select2({
                              placeholder: "Choose User"
                        });
                  }, 500);
            }
            $scope.peopledevelopementdetails = function(surveyid, userid) {
                  $scope.detail_id = surveyid;
                  $scope.questions = [];
                  $scope.contentLoading++;
                  $users['details'](userid).then(function(userdetail) {
                        $scope.userdetail = userdetail;
                        $scope.contentLoading--;
                  });
                  $scope.contentLoading++;
                  $pesquisaquestion['getSurveyDetailsForDevelopement'](surveyid, userid).then(function(response) {
                        $scope.pesquisasdetail = response;
                        $scope.contentLoading--;
                  });
                  $scope.detail = true;
                  $scope.contentLoading++;
                  $pesquisaquestion['getAllQuestionsPeopleDevelopement']($scope.detail_id, userid).then(function(response) {
                        $scope.questions = response;
                        $scope.contentLoading--;
                  });
            }
            $scope.returnBacktoPeopleDev = function() {
                  $scope.detail = false;
                  $scope.resetFilterBox();
            }
      });
});
/**
 * Controller for CycleConfiguration.
 *
 * @param many Factories
 *
 */
elofy.controller('cycleConfigurationCtrl', function globalCtrl($scope, $timeout, $years, $cycles, $cycleConfiguration, $users, $teams, $tags, $skills, $tatics, $globals, $empressa, $elos, timeAgo, nowTime, $dashboard, $carreers, $cargo, $surveys, $translate, $routeParams, $filter, $key) {
      $scope.baseUrl = baseurl;
      $scope.loggeduser_details = $scope.$parent.user;
      $scope.saveExtraUsersCycle = function() {
            var cycle_id = $scope.avalicao_cycles;
            var id_usuario_avaliado = "";
            var users = $('#saveExtraUsers').val();
            if (!users) {
                  toastr.warning('Por favor selecione pelo menos 1 usuário!');
            } else {
                  $cycleConfiguration['saveCycleUsers'](cycle_id, users, id_usuario_avaliado, 1).then(function(response) {
                        toastr.success('User de salva!');
                        $("#saveExtraUsers").select2('destroy');
                        $users['getUsersNotInGivenCycle']($scope.avalicao_cycles, 1).then(function(response) {
                              $scope.remaininUsers = response;
                              $scope.filterAvailicaoUsersByCycleSelection();
                              $timeout(function() {
                                    $("#saveExtraUsers").select2();
                              }, 100);
                        });
                  });
            }
      }
      $scope.filterAvailicaoUsersByCycleSelection = function() {
            $cycleConfiguration['getCycleConfigUsersByCycleId']($scope.avalicao_cycles).then(function(response) {
                  $scope.cycleUsers = response.records;
                  $scope.checkrespond = response.checkrespondido;
                  $scope.complete_reviews_per = response.complete_reviews_per;
                  $scope.completed_reviews = response.completed_reviews;
                  $scope.no_answer_reviews_per = response.no_answer_reviews_per;
                  $scope.no_answer_reviews = response.no_answer_reviews;
                  $scope.not_started_reviews_per = response.not_started_reviews_per;
                  $scope.not_started_reviews = response.not_started_reviews;
                  $cycleConfiguration['getCycleByCycleIdProfileBanner']($scope.id).then(function(response) {
                  if (response == 1) {
                        $cycleConfiguration['getCycleByCycleId']($scope.avalicao_cycles).then(function(response) {
                        $scope.cycle_detail = response;
                  });
                  }
                  });      

                  $users['getUsersNotInGivenCycle']($scope.avalicao_cycles, 1).then(function(response) {
                        $scope.remaininUsers = response;
                        $timeout(function() {
                              $("#saveExtraUsers").select2();
                        }, 10);
                  });
                  $('#search_by_status').val('');
                  $('#select_team_filter').val('');
                  $('#search_by_status').select2('destroy');
                  $('#select_team_filter').select2('destroy');
                  $timeout(function() {
                        $('#search_by_status').select2();
                        $('#select_team_filter').select2();
                  }, 100);
            });
      }
      $scope.currenttabreview = 1;
      $scope.myCycleReview = function() {
            $scope.currenttabreview = 1;
            delete $scope.detailstab;
            $scope.profiletab = 3;
            $scope.reviewtab = 1;
            $timeout(function() {
                  $('.filter_availicao_user').select2();
                  $('#competenciasTb').niceScroll({
                        cursorcolor: "#03a9f4",
                        cursorborder: "none"
                  });
            }, 10);
            $scope.avalicao_cycles = $scope.id;
            $scope.filterAvailicaoUsersByCycleSelection();
            $scope.teams = $scope.$parent.teams;
            $timeout(function() {
                  $('.avalicao_cycles').select2();
                  $('#search_by_status').select2();
                  $('#select_team_filter').select2();
            }, 100);
      }
      $scope.getreviewers = function() {
            $scope.currenttabreview = 2;
            $cycleConfiguration['getCycleReviewers']($scope.avalicao_cycles, $('#search_by_name').val(), $('#search_by_status').val(), $('#select_team_filter').val()).then(function(response) {
                  $scope.cycleUsers = response.records;
                  $scope.complete_reviews_per = response.complete_reviews_per;
                  $scope.completed_reviews = response.completed_reviews;
                  $scope.no_answer_reviews_per = response.no_answer_reviews_per;
                  $scope.no_answer_reviews = response.no_answer_reviews;
                  $scope.not_started_reviews_per = response.not_started_reviews_per;
                  $scope.not_started_reviews = response.not_started_reviews;
            });
      }
      $scope.getreviewes = function() {
            $scope.currenttabreview = 1;
            $scope.filterAvailicaoUsers();
      }
      $scope.getStarValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getHeartValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getDevStarValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.getDevHeartValue = function(id_pergunta, id) {
            for (var i = 1; i <= 10; i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).removeClass('also-checked');
            }
            for (var i = 1; i <= parseInt(id); i++) {
                  var check_id = '.span_' + id_pergunta + '_' + i;
                  $(check_id).addClass('also-checked');
            }
      }
      $scope.showHideQuestionCategories = function($event, $id) {
            $($event.currentTarget).parent().toggleClass("open_question");
      }
      $scope.mailsending = false;
      $scope.sendEmail = function(id_revisao_ciclo, id_usuario = null) {
            var id_us = id_usuario;
            if (!id_usuario) {
                  id_us = [];
                  angular.forEach($scope.cycleUsers, function(item, key) {
                        // adiciona somente para envio se pendente!
                        if (item['complete_status'] == 1) id_us.push(item['id_usuario']);
                  });
            }
            if (!$scope.mailsending) {
                  if (id_us.constructor !== Array) {
                        $("#send_email_" + id_revisao_ciclo + "_" + id_us).html('<span style="line-height: 26px;">Enviando</span>');
                        $("#send_email_" + id_revisao_ciclo + "_" + id_us).attr('disabled', true);
                  } else {
                        $("#send_email_all").text('Enviando..');
                        $("#send_email_all").attr('disabled', true);
                  }
                  $cycleConfiguration['sendCycleReviewEmail'](id_revisao_ciclo, id_us).then(function(response) {

                        if (id_us.constructor !== Array) {
                              toastr.success('E-mail enviado.');
                              $("#send_email_all").html('<span style="line-height: 26px;">Enviar e-mail para todos</span>');
                              $("#send_email_all").attr('disabled', false);
                        } else {
                              toastr.success('E-mails enviados.');
                              $("#send_email_all").text('Enviar E-mail');
                              $("#send_email_all").attr('disabled', false);
                        }
                        $scope.mailsending = true;
                  });
            }
      }
      $scope.updateRevisaoUsersAutorizado = function() {
            if ($(".row_checkbox:checked").length > 0) {
                  var formData = $('#ravisao_availicao_table_form').serializeArray();
                  $cycleConfiguration['updateRevisaoUsersAutorizado'](formData, $scope.cycle_detail.id_revisao_ciclo).then(function(response) {
                        if (response == 1) {
                              $scope.filterAvailicaoUsersByCycleSelection();
                              toastr.success('Salvo!');
                        }
                  });
            } else {
                  alert('Please select at least one user!');
            }
      }
      $scope.openSkillsSideBarMenu = false;
      $scope.openGoalsFeedbackSidebar = function() {
            if ($scope.openSkillsSideBarMenu == true) {
                  $scope.openSkillsSideBarMenu = false;
            } else {
                  $scope.openSkillsSideBarMenu = true;
            }
      }
      $scope.closeSkillsSidebar = function() {
            $scope.openSkillsSideBarMenu = false;
      }
      $scope.goals_section = true;
      $scope.ChooseGoalsAndFeedbacks = function(key) {
            if (key == 'goals_section') {
                  $scope.goals_section = true;
                  $scope.feedback_section = false;
            } else if (key == 'feedback_section') {
                  $scope.feedback_section = true;
                  $scope.goals_section = false;
            } else {
                  $scope.goals_section = false;
                  $scope.feedback_section = false;
            }
      }
      $scope.filterAvailicaoUsers = function() {
            if ($scope.currenttabreview == 1) {
                  $cycleConfiguration['getCycleConfigUsersByFilter']($scope.avalicao_cycles, $('#search_by_name').val(), $('#search_by_status').val(), $('#select_team_filter').val()).then(function(response) {
                        $scope.cycleUsers = response.records;
                        $scope.complete_reviews_per = response.complete_reviews_per;
                        $scope.completed_reviews = response.completed_reviews;
                        $scope.no_answer_reviews_per = response.no_answer_reviews_per;
                        $scope.no_answer_reviews = response.no_answer_reviews;
                        $scope.not_started_reviews_per = response.not_started_reviews_per;
                        $scope.not_started_reviews = response.not_started_reviews;
                  });
            } else {
                  $cycleConfiguration['getCycleReviewers']($scope.avalicao_cycles, $('#search_by_name').val(), $('#search_by_status').val(), $('#select_team_filter').val()).then(function(response) {
                        $scope.cycleUsers = response.records;
                        $scope.complete_reviews_per = response.complete_reviews_per;
                        $scope.completed_reviews = response.completed_reviews;
                        $scope.no_answer_reviews_per = response.no_answer_reviews_per;
                        $scope.no_answer_reviews = response.no_answer_reviews;
                        $scope.not_started_reviews_per = response.not_started_reviews_per;
                        $scope.not_started_reviews = response.not_started_reviews;
                  });
            }
      }
      $scope.addGestorsAndParesForCycle = function() {
            var $Gestors = [];
            var $Equipes = [];
            var $Pares = [];
            if ($scope.SelectedGestors) {
                  $.each($scope.SelectedGestors, function(index, value) {
                        delete value.$$hashKey;
                        $Gestors.push(value.id);
                  });
            }
            if ($scope.SelectedEquipes) {
                  $.each($scope.SelectedEquipes, function(index, value) {
                        delete value.$$hashKey;
                        $Equipes.push(value.id);
                  });
            }
            if ($scope.SelectedPares) {
                  $.each($scope.SelectedPares, function(index, value) {
                        delete value.$$hashKey;
                        $Pares.push(value.id);
                  });
            }
            $cycleConfiguration['addUpdateCycleUsers']($scope.cycle_detail.id_revisao_ciclo, $scope.selectedUserId, $Gestors, $Pares, $Equipes).then(function(response) {
                  if (response == 1) {
                        $scope.closeSidebar();
                        $scope.avalicao_cycles = $scope.cycle_detail.id_revisao_ciclo;
                        toastr.success('Salvo!');
                        $scope.filterAvailicaoUsersByCycleSelection();
                  }
            });
      }
      $scope.getcyclereviewuserforprofile = function() {
            $cycleConfiguration['getCycleByCycleIdProfileBanner']($scope.id).then(function(response) {
                  if (response == 1) {
                        $scope.nocycleavailable = "nenhum usuário disponível neste ciclo!!";
                  } else {
                        $scope.cycle_detail = response;
                        console.log(response.scale_object);
                        $cycleConfiguration['getCycleConfigUsersByTypeValidation']($scope.id).then(function(response) {
                              if (response == 0) {
                                    $scope.nocycleavailable = "nenhum usuário disponível neste ciclo!!";
                              } else {
                                    $scope.users_teams = response;
                              }
                        });
                  }
            });
      }
      
      if ($routeParams.cycleid) {
            $scope.id = $routeParams.cycleid;
            $scope.tabtype = $routeParams.type;
            if ($scope.tabtype == "CycleConfig") {
                  $scope.myCycleReview();
            } else {
                  if ($scope.tabtype == "CycleReviews") {
                        $scope.BackUrl = $scope.baseUrl + 'perfil';
                  } else {
                        $scope.BackUrl = $scope.baseUrl + 'cycleconfiguration';
                  }
                  $scope.reviewtab = 1;
                  $scope.getcyclereviewuserforprofile();
            }
            // $scope.sidebarheight           =     0;
            $scope.openSidebar = function(cycleId, UserId, totalReviews, inCompleteReviews) {
                  $scope.managerSectionEdit = false;
                  // $scope.sidebarheight           =     $(window).height()-280;
                  $scope.reviwersSectionEdit = false;
                  $scope.equipeSectionEdit = false;
                  $scope.selfReviewSectionEdit = false;
                  $scope.all_users = [];
                  $scope.userData = [];
                  $scope.gestors = [];
                  $scope.SelectedGestors = [];
                  $scope.SelectedEquipes = [];
                  $scope.select_gestor = [];
                  $scope.select_equipe = [];
                  $scope.SelectedPares = [];
                  $scope.select_pares = [];
                  $scope.totalReviews = totalReviews;
                  $scope.inCompleteReviews = inCompleteReviews;
                  $scope.currentCycle = cycleId;
                  $scope.selectedUserId = UserId;
                  $scope.openSideBarMenu = true;
                  $users['getGestors']().then(function(response) {
                        $scope.gestors = response;
                        $timeout(function() {
                              $("#cycle_config_gestor").select2();
                        }, 500);
                  });
                  $users['all']().then(function(response) {
                        $scope.all_users = response;
                        $timeout(function() {
                              $('#all_users').select2();
                        }, 500);
                  });
                  $users['details'](UserId).then(function(response) {
                        $scope.userData = response;
                  });
                  $cycleConfiguration['getById'](cycleId).then(function(response) {
                        $scope.cycle_details = response.ravisao_ciclo;
                  });
                  $timeout(function() {
                        $cycleConfiguration['getCycleUserByType'](cycleId, UserId, 2).then(function(response) {
                              var select_gestor = [];
                              $scope.SelectedGestors = response;
                              console.log($scope.SelectedGestors);
                              if ($scope.SelectedGestors) {
                                    $.each($scope.SelectedGestors, function(index, value) {
                                          select_gestor.push(value.id_usuario_avaliador);
                                    });
                                    $scope.select_gestor = select_gestor;
                              }
                        });
                        $cycleConfiguration['getCycleUserByType'](cycleId, UserId, 3).then(function(response) {
                              $scope.SelectedPares = response;
                              var select_pares = [];
                              if ($scope.SelectedPares) {
                                    $.each($scope.SelectedPares, function(index, value) {
                                          select_pares.push(value.id_usuario_avaliador);
                                    });
                              }
                              $scope.select_pares = select_pares;
                        });
                        $cycleConfiguration['getCycleUserByType'](cycleId, UserId, 4).then(function(response) {
                              $scope.SelectedEquipes = response;
                              var select_equipe = [];
                              if ($scope.SelectedEquipes) {
                                    $.each($scope.SelectedEquipes, function(index, value) {
                                          select_equipe.push(value.id_usuario);
                                    });
                              }
                              console.log($scope.select_equipe);
                              $scope.select_equipe = select_equipe;
                        });
                  }, 500);
            }
            $scope.openSidebarReviewers = function(cycleId, UserId, totalReviews, inCompleteReviews, id_tipo_avalicao) {
                  // $scope.sidebarheight           =     $(window).height()-280;
                  $scope.selfviewAvalicao = id_tipo_avalicao;
                  $scope.managerSectionEdit = false;
                  $scope.reviwersSectionEdit = false;
                  $scope.equipeSectionEdit = false;
                  $scope.selfReviewSectionEdit = false;
                  $scope.all_users = [];
                  $scope.userData = [];
                  $scope.gestors = [];
                  $scope.SelectedGestors = [];
                  $scope.SelectedEquipes = [];
                  $scope.SelectedPares = [];
                  $scope.select_gestor = [];
                  $scope.select_equipe = [];
                  $scope.select_pares = [];
                  $scope.totalReviews = totalReviews;
                  $scope.inCompleteReviews = inCompleteReviews;
                  $scope.currentCycle = cycleId;
                  $scope.selectedUserId = UserId;
                  $scope.openSideBarMenu = true;
                  $users['getGestors']().then(function(response) {
                        $scope.gestors = response;
                        $timeout(function() {
                              $('#cycle_config_gestor').select2();
                        }, 500);
                  });
                  $users['all']().then(function(response) {
                        $scope.all_users = response;
                        $timeout(function() {
                              $('#all_users').select2();
                        }, 500);
                  });
                  $users['details'](UserId).then(function(response) {
                        $scope.userData = response;
                  });
                  $cycleConfiguration['getById'](cycleId).then(function(response) {
                        $scope.cycle_details = response.ravisao_ciclo;
                  });
                  $cycleConfiguration['getuseriamgestororpeer'](cycleId, UserId, 1).then(function(response) {
                        $scope.self_apprisial = response[0];
                  });
                  $cycleConfiguration['getuseriamgestororpeer'](cycleId, UserId, 2).then(function(response) {
                        var select_gestor = [];
                        $scope.SelectedGestors = response;
                        if ($scope.SelectedGestors) {
                              $.each($scope.SelectedGestors, function(index, value) {
                                    select_gestor.push(value.id_usuario_avaliador);
                              });
                              $scope.select_gestor = select_gestor;
                        }
                  });
                  $cycleConfiguration['getuseriamgestororpeer'](cycleId, UserId, 3).then(function(response) {
                        $scope.SelectedPares = response;
                        var select_pares = [];
                        if ($scope.SelectedPares) {
                              $.each($scope.SelectedPares, function(index, value) {
                                    select_pares.push(value.id_usuario_avaliador);
                              });
                              $scope.select_pares = select_pares;
                        }
                  });
                  $cycleConfiguration['getuseriamgestororpeer'](cycleId, UserId, 4).then(function(response) {
                        $scope.SelectedEquipes = response;
                        var select_equipe = [];
                        if ($scope.SelectedEquipes) {
                              $.each($scope.SelectedEquipes, function(index, value) {
                                    select_equipe.push(value.id_usuario_avaliador);
                              });
                              $scope.select_equipe = select_equipe;
                        }
                  });
                  $timeout(function() {
                        $(document).on('change', "#all_users", function() {
                              $scope.selectPares();
                        });
                  }, 1000);
            }
            $scope.selectGestors = function(item) {
                  $scope.select_gestor = item;
                  $users['detailsByIds']($scope.select_gestor).then(function(response) {
                        $scope.SelectedGestors = response;
                        $(".self-review-wrapper").scrollTop($(".self-review-wrapper")[0].scrollHeight);
                  });
            }
            $scope.selectEquipes = function(item) {
                  $scope.select_equipe = item;
                  $users['detailsByIds']($scope.select_equipe).then(function(response) {
                        $scope.SelectedEquipes = response;
                        $(".self-review-wrapper").scrollTop($(".self-review-wrapper")[0].scrollHeight);
                  });
            }
            $scope.selectPares = function(item) {
                  $scope.select_pares = item;
                  $users['detailsByIds']($scope.select_pares).then(function(response) {
                        $scope.SelectedPares = response;
                        $(".self-review-wrapper").scrollTop($(".self-review-wrapper")[0].scrollHeight);
                  });
            }
            $scope.closeSidebar = function() {
                  $scope.openSideBarMenu = false;
            }
            $scope.editManagers = function() {
                  $scope.managerSectionEdit = true;
                  $timeout(function() {
                        $('#cycle_config_gestor').select2();
                  }, 1);
            }
            $scope.closeEditManagers = function() {
                  $scope.managerSectionEdit = false;
            }
            $scope.editEquipes = function() {
                  $scope.equipeSectionEdit = true;
                  $timeout(function() {
                        $('#cycle_config_equipe').select2();
                  }, 1);
            }
            $scope.closeEditEquipes = function() {
                  $scope.equipeSectionEdit = false;
            }
            $scope.editReviewers = function() {
                  $scope.reviwersSectionEdit = true;
            }
            $scope.closeEditReviewers = function() {
                  $scope.reviwersSectionEdit = false;
            }
            $scope.editSelfReview = function() {
                  $scope.selfReviewSectionEdit = true;
            }
            $scope.closeSelfReview = function() {
                  $scope.selfReviewSectionEdit = false;
            }
            $scope.removePares = function(index, id) {
                  delete $scope.SelectedPares.splice(index, 1);
                  delete $scope.select_pares.splice(index, 1);
                  $("#all_users").select2('destroy');
                  $timeout(function() {
                        $('#all_users').select2();
                  }, 10);
            }
            $scope.removeGestor = function(index, id) {
                  delete $scope.SelectedGestors.splice(index, 1);
                  delete $scope.select_gestor.splice(index, 1);
                  $("#cycle_config_gestor").select2('destroy');
                  $timeout(function() {
                        $('#cycle_config_gestor').select2();
                  }, 10);
            }
            $scope.removeEquipe = function(index, id) {
                  delete $scope.SelectedEquipes.splice(index, 1);
                  delete $scope.select_equipe.splice(index, 1);
                  $("#cycle_config_equipe").select2('destroy');
                  $timeout(function() {
                        $('#cycle_config_equipe').select2();
                  }, 10);
            }
            $scope.checkall = false;
            $scope.selectAll = function() {
                  if (!$scope.checkall) {
                        $scope.checkall = true;
                  } else {
                        $scope.checkall = false;
                  }
            }
            $scope.reguaSelect = function(questionerio, scale_step) {
                  if ($scope.cycledetails.scale_object[0].valor != 1) {
                        return;
                  }
                  var reguaField = $('#regua_apprisial_' + questionerio.id_pergunta);
                  reguaField.unbind('focusout');
                  if (!(parseFloat(reguaField.val()) >= parseFloat(scale_step.limite_inicial) && parseFloat(reguaField.val()) <= parseFloat(scale_step.limite_final)))
                        reguaField.val(scale_step.limite_inicial);
                  reguaField.bind('focusout', function() { 
                      var value = $(this).val();
                      if (value !== '') {
                          var newVal = Math.max(Math.min(value, scale_step.limite_final), scale_step.limite_inicial);
                          console.log("came here:", value, newVal);
                          $(this).val(newVal);
                      }
                  });
            }
            $scope.reguaFocus = function(questionerio) {
                  var reguaField = $('#regua_apprisial_' + questionerio.id_pergunta)[0];
                  var event = $._data( reguaField, "events" ).focusout;
                  if (!(event === undefined || event.length === 0)) {
                        return;
                  }
                  angular.forEach($scope.cycledetails.scale_object[0].values, function(scale_object, key) {
                        if (parseFloat(questionerio.score) <= parseFloat(scale_object.limite_final) && parseFloat(questionerio.score) >= parseFloat(scale_object.limite_inicial)) {
                              $scope.reguaSelect(questionerio, scale_object);
                        }
                  });
            }
            $scope.reverceTab1 = function() {
                  $scope.reviewtab = 1;
            }
            $scope.shadeColors = function(color, index, options) {
                  var p = (index + 1) / options.length;
                  var fromcolor = '#9ad7f3';
                  var tocolor = '#1490c8';
                  if (typeof(p) != "number" || p < -1 || p > 1 || typeof(fromcolor) != "string" || (fromcolor[0] != 'r' && fromcolor[0] != '#') || (tocolor && typeof(tocolor) != "string")) return null; //ErrorCheck
                  if (!this.sbcRip) this.sbcRip = (d) => {
                        let l = d.length,
                              RGB = {};
                        if (l > 9) {
                              d = d.split(",");
                              if (d.length < 3 || d.length > 4) return null; //ErrorCheck
                              RGB[0] = i(d[0].split("(")[1]), RGB[1] = i(d[1]), RGB[2] = i(d[2]), RGB[3] = d[3] ? parseFloat(d[3]) : -1;
                        } else {
                              if (l == 8 || l == 6 || l < 4) return null; //ErrorCheck
                              if (l < 6) d = "#" + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (l > 4 ? d[4] + "" + d[4] : ""); //3 or 4 digit
                              d = i(d.slice(1), 16), RGB[0] = d >> 16 & 255, RGB[1] = d >> 8 & 255, RGB[2] = d & 255, RGB[3] = -1;
                              if (l == 9 || l == 5) RGB[3] = r((RGB[2] / 255) * 10000) / 10000, RGB[2] = RGB[1], RGB[1] = RGB[0], RGB[0] = d >> 24 & 255;
                        }
                        return RGB;
                  }
                  var i = parseInt,
                        r = Math.round,
                        h = fromcolor.length > 9,
                        h = typeof(tocolor) == "string" ? tocolor.length > 9 ? true : tocolor == "c" ? !h : false : h,
                        b = p < 0,
                        p = b ? p * -1 : p,
                        tocolor = tocolor && tocolor != "c" ? tocolor : b ? "#000000" : "#FFFFFF",
                        f = this.sbcRip(fromcolor),
                        t = this.sbcRip(tocolor);
                  if (!f || !t) return null; //ErrorCheck
                  if (h) return "rgb" + (f[3] > -1 || t[3] > -1 ? "a(" : "(") + r((t[0] - f[0]) * p + f[0]) + "," + r((t[1] - f[1]) * p + f[1]) + "," + r((t[2] - f[2]) * p + f[2]) + (f[3] < 0 && t[3] < 0 ? ")" : "," + (f[3] > -1 && t[3] > -1 ? r(((t[3] - f[3]) * p + f[3]) * 10000) / 10000 : t[3] < 0 ? f[3] : t[3]) + ")");
                  else return "#" + (0x100000000 + r((t[0] - f[0]) * p + f[0]) * 0x1000000 + r((t[1] - f[1]) * p + f[1]) * 0x10000 + r((t[2] - f[2]) * p + f[2]) * 0x100 + (f[3] > -1 && t[3] > -1 ? r(((t[3] - f[3]) * p + f[3]) * 255) : t[3] > -1 ? r(t[3] * 255) : f[3] > -1 ? r(f[3] * 255) : 255)).toString(16).slice(1, f[3] > -1 || t[3] > -1 ? undefined : -2);
            }
            $scope.reviewTab2JsControls = function(user_id, avalicao_id) {
                  $('#slideControl1').slideControl({
                        speed: 600,
                        lowerBound: 0,
                        upperBound: 5,
                  });
                  $('#GoalsNew').niceScroll({
                        cursorcolor: "#03a9f4",
                        cursorborder: "none"
                  });
                  $('#FeedbackNew').niceScroll({
                        cursorcolor: "#03a9f4",
                        cursorborder: "none"
                  });
                  $('#eqlTab2').niceScroll({
                        cursorcolor: "#03a9f4",
                        cursorborder: "none"
                  });
                  $timeout(function() {
                        $('#slideControl1').trigger('change');
                  }, 200);
            }
            $scope.reviewTab2 = function(user_id, avalicao_id, cycle_id, userType, numero_pares, flagSelf) {
                  $scope.flagSelf = flagSelf;
                  delete $scope.goal_details;
                  $scope.detailstab = 0;
                  $scope.reviewtab = 2;
                  $scope.resultotab = 2;
                  $scope.searchuser_id = user_id;
                  $scope.avalicao_id = avalicao_id;
                  $scope.cycleUserType = userType;
                  $scope.numero_pares = numero_pares;
                  $scope.searchUserId = user_id;
                  $cycleConfiguration['get_fases_details_for_user'](user_id, avalicao_id).then(function(response) {
                        $scope.$step = -1;
                        $scope.avaliacoescycledetails = response.avaliacoescycledetails;
                        $scope.cycledetails = response.cycledetails;
                        $scope.fasesData = response.fasesData;
                        $scope.reviewTab2JsControls();
                        /* $tatics['user_goals_for_review'](user_id,$scope.cycledetails.id_janela,$scope.cycledetails.id_ciclo_ini,$scope.cycledetails.Id_ciclo_fim).then(function(response) {
                         $scope.usergoals = response;
                         }); */
                        $users['details'](user_id).then(function(response) {
                              $scope.searchuser = response;
                              // initialize first phase index 0
                              $scope.nextTab(-1);
                        });
                  });
                  $users['getUserGoalsByCycleId'](user_id, cycle_id).then(function(response) {
                        $scope.usergoals = response;
                  });
                  $users['getUserFeedbacksByCycleId'](user_id, cycle_id).then(function(feedbacks) {
                        $scope.feedback_recieved_apprasel = feedbacks;
                  });
                  $users['getUsersNotInGivenCycle'](cycle_id, 3).then(function(response) {
                        $scope.remaininUsers = response;
                        $timeout(function() {
                              $cycleConfiguration['getSelfAddedCycleUsersByTypeId'](cycle_id, 3).then(function(response) {
                                    $scope.selectedParesUsers = response;
                                    $("#addExtraPares").select2();
                              });
                        }, 100);
                  });
                  $scope.saveParesUsers = function(id_usuario_avaliado) {
                        var users = $('#addExtraPares').val();
                        $cycleConfiguration['addCycleParesUsers'](cycle_id, users, id_usuario_avaliado).then(function(response) {
                              toastr.success('Par salvo.');
                              $("#addExtraPares").select2('destroy');
                        });
                  }
                  $scope.saveExtraPares = function(id_usuario_avaliado) {
                        $cycleConfiguration['getSelfAddedCycleUsersByTypeId'](cycle_id, 3).then(function(response) {
                              $scope.selectedParesUsers = response;
                              if (parseInt(Object.keys($scope.selectedParesUsers).length) < parseInt($scope.numero_pares)) {
                                    $scope.saveParesUsers(id_usuario_avaliado);
                                    $timeout(function() {
                                          $users['getUsersNotInGivenCycle'](cycle_id, 3).then(function(response) {
                                                $scope.remaininUsers = response;
                                                $timeout(function() {
                                                      $cycleConfiguration['getSelfAddedCycleUsersByTypeId'](cycle_id, 3).then(function(response) {
                                                            $scope.selectedParesUsers = response;
                                                            $("#addExtraPares").select2();
                                                      });
                                                }, 100);
                                          });
                                    }, 200);
                              } else {
                                    toastr.warning('Pares cannot saves more than ' + $scope.numero_pares);
                                    $timeout(function() {
                                          $("#addExtraPares").select2();
                                    }, 100);
                              }
                              var limitSelection = $scope.numero_pares;
                              $("#addExtraPares").select2({
                                    maximumSelectionSize: limitSelection
                              });
                        });
                  }
            }
            
            $scope.reverceTab2 = function(user_id, cycle, avalicao_id) {
                  $scope.resultotab = 2;
                  $timeout(function() {
                        $users['get_avalicao_detail_ciclo'](user_id, cycle, avalicao_id).then(function(avalicao) {
                              $scope.avalicao = avalicao;
                              $('#slideControl1').slideControl({
                                    speed: 600,
                                    lowerBound: 0,
                                    upperBound: 5,
                              });
                              $('#GoalsNew').niceScroll({
                                    cursorcolor: "#03a9f4",
                                    cursorborder: "none"
                              });
                              $('#FeedbackNew').niceScroll({
                                    cursorcolor: "#03a9f4",
                                    cursorborder: "none"
                              });
                              $('#eqlTab2').niceScroll({
                                    cursorcolor: "#03a9f4",
                                    cursorborder: "none"
                              });
                              $('#slideControl1').val($scope.avalicao.desempenho);
                              $timeout(function() {
                                    $('#slideControl1').trigger('change');
                              }, 200);
                        });
                  }, 10);
            }
            $scope.profileGoalDetail = function(goal_id, user_id, cycle, year) {
                  $scope.resultotab = 2;
                  $scope.detailstab = 1;
                  $users['get_profile_goal_detail'](goal_id, user_id, cycle).then(function(response) {
                        $scope.goal_details = response;
                  });
                  $users['avalicao_details_by_id'](user_id, year, cycle).then(function(response) {
                        $scope.usergoals = response;
                  });
            }
            $scope.reviewTab3 = function(user_id, year, cycle, cycle_name) {
                  $scope.resultotab = 3;
                  var desempenho_value = $('#slideControl1').val();
                  if (desempenho_value) {
                        $users['update_desmpenho_by_id'](user_id, cycle, desempenho_value).then(function(response) {
                              $scope.desempenho_value = desempenho_value;
                        });
                  }
                  $users['userskillsforreview'](user_id).then(function(skills) {
                        $scope.skills = skills;
                        $('#competenciasTb3').niceScroll({
                              cursorcolor: "#03a9f4",
                              cursorborder: "none"
                        });
                        $timeout(function() {
                              $('.slideControl').slideControl({
                                    speed: 600,
                                    lowerBound: 0,
                                    upperBound: 5,
                              });
                              $(".slideControl").trigger('change');
                        }, 100);
                  });
                  $users['uservaloresforreview'](user_id).then(function(response) {
                        $scope.uservalores = response;
                        $timeout(function() {
                              $('.slideControl').slideControl({
                                    speed: 600,
                                    lowerBound: 0,
                                    upperBound: 5,
                              });
                              $(".slideControl").trigger('change');
                        }, 100);
                  });
            }

            $scope.nextTab = function(index) {
                  if ($scope.savefasedata()) {
                        if ($scope.$step < $scope.fasesData.length - 1) {
                              var newIndex = parseInt(index) + 1;
                              $scope.$step = newIndex;
                              clearInterval($scope.autoInterval);
                              $scope.autoInterval = setInterval($scope.autoSavefasedata, 30000);
                              $scope.getcomponentdata($scope.fasesData[newIndex]);
                        } else {
                              clearInterval($scope.autoInterval);
                              $timeout(function() {
                                    var $save_data = {};
                                    $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
                                    $cycleConfiguration['save_apprisial_finish']($save_data).then(function() {
                                          $scope.myCycleReview();
                                          $scope.getcyclereviewuserforprofile();
                                    });
                              }, 500);
                        }
                  }
                  else {
                        toastr.error('Preencha os campos obrigatórios')
                  }
            }
            $scope.validateapprisialform = function($form, obrigatorio, comentario) {
                  var all_questions = [];
                  $form.find("[name^='apprisialanswers[rating_answer]']").each(function() {
                        var $question_id = $(this).attr('name').replace('apprisialanswers[rating_answer][', '');
                        $question_id = $question_id.replace('][value]', '');
                        if ($.inArray($question_id, all_questions) < 0) {
                              all_questions.push($question_id);
                        }
                  });
                  var $is_valid = true;
                  $.each(all_questions, function(index, question) {
                        $form.find("[name='apprisialanswers[rating_answer][" + question + "][value]']").parents('.allquestions').find('.error_message').addClass('hide');
                        if (!$form.find("[name='apprisialanswers[rating_answer][" + question + "][value]']:checked").val()) {
                              $is_valid = false;
                              $form.find("[name='apprisialanswers[rating_answer][" + question + "][value]']").parents('.allquestions').find('.error_message').removeClass('hide');
                        }
                  });
                  if (obrigatorio == 1) {
                        if (comentario == 0) {
                              return $is_valid;
                        }
                        $.each(all_questions, function(index, question) {
                              var textField = $("textarea[name='description[" + question + "]']");
                              var textValue = textField.val();
                              if (textValue == '') {
                                    $is_valid = false;
                                    $form.find("[name='apprisialanswers[rating_answer][" + question + "][value]']").parents('.allquestions').find('.error_message').removeClass('hide');
                              }
                        });
                  }
                  return $is_valid;
            }
            $scope.funsaveorksandfeedback = function(savefase, autoFlag = false) {
                  var $form_data = $("#resaltados_form").serialize();
                  var $is_valid = true;
                  if (!autoFlag)
                        $is_valid = $scope.validateapprisialform($("#resaltados_form"), savefase.comentario_obrigatorio, savefase.comentario);
                  if ($is_valid) {
                        var $save_data = {};
                        $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
                        $save_data.form_data = $form_data;
                        $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
                        $save_data.field_type = 'resultados';
                        $cycleConfiguration['save_apprisial_fase_data']($save_data).then(function() {
                              if (!autoFlag) 
                                    toastr.success('Salvo');
                        });
                        return true;
                  }
                  return false;
            }
            $scope.funsavedepares = function(savefase, autoFlag = false) {
                  var $save_data = {};
                  $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
                  $save_data.paresAdded = [];
                  $.each($scope.paresAdded, function(index, user) {
                        $save_data.paresAdded.push(user.id);
                  });
                  var $is_valid = true;
                  if (!autoFlag)
                        $is_valid = $scope.validateapprisialform($("#pares_skills"), savefase.comentario_obrigatorio, savefase.comentario);
                  if ($is_valid) {
                        $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
                        $save_data.field_type = 'pares';
                        $cycleConfiguration['save_apprisial_fase_pares_data']($save_data).then(function() {
                              if (!autoFlag) 
                                    toastr.success('Salvo');
                        });
                        return true;
                  }
                  return false;
            }
            $scope.funsavecompetencias = function(savefase, autoFlag = false) {
                  var $form_data = $("#competencias_skills").serialize();
                  var $save_data = {};
                  var $is_valid = true;
                  if (!autoFlag)
                        $is_valid = $scope.validateapprisialform($("#competencias_skills"), savefase.comentario_obrigatorio, savefase.comentario);
                  if ($is_valid) {
                        $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
                        $save_data.form_data = $form_data;
                        $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
                        $save_data.field_type = 'competencias';
                        $cycleConfiguration['save_apprisial_fase_competencias_data']($save_data).then(function() {
                              if (!autoFlag) 
                                    toastr.success('Salvo');
                        });
                        return true;
                  }
                  return false;
            }
            $scope.funsavepotencials = function(savefase, autoFlag = false) {
                  var $form_data = $("#potencial_form").serialize();
                  var $save_data = {};
                  var $is_valid = true;
                  if (!autoFlag)
                        $is_valid = $scope.validateapprisialform($("#potencial_form"), savefase.comentario_obrigatorio, savefase.comentario);
                  if ($is_valid) {
                        $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
                        $save_data.form_data = $form_data;
                        $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
                        $save_data.field_type = 'potencial';
                        $cycleConfiguration['save_apprisial_fase_data']($save_data).then(function() {
                              if (!autoFlag) 
                                    toastr.success('Salvo');
                        });
                        return true;
                  }
                  return false;
            }
            $scope.funsavesurvey = function(savefase, autoFlag = false) {
                  var $form_data = $("#apprisialsurvey_form").serialize();
                  var $save_data = {};
                  var $is_valid = true;
                  if (!autoFlag)
                        $is_valid = $scope.validateapprisialform($("#apprisialsurvey_form"), savefase.comentario_obrigatorio, savefase.comentario);
                  if ($is_valid) {
                        $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
                        $save_data.form_data = $form_data;
                        $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
                        $save_data.field_type = 'survey';
                        $cycleConfiguration['save_apprisial_fase_data']($save_data).then(function() {
                              if (!autoFlag) 
                                    toastr.success('Salvo');
                        });
                        return true;
                  }
                  return false;
            }
            $scope.funsavevalores = function(savefase, autoFlag = false) {
                  var $form_data = $("#values_skills").serialize();
                  var $save_data = {};
                  $save_data.id_revisao_ciclo_fases = savefase.id_revisao_ciclo_fases;
                  var $is_valid = true;
                  if (!autoFlag)
                        $is_valid = $scope.validateapprisialform($("#values_skills"), savefase.comentario_obrigatorio, savefase.comentario);
                  if ($is_valid) {
                        $save_data.form_data = $form_data;
                        $save_data.id_revisao_ciclo_avaliacoes = $scope.avalicao_id;
                        $save_data.field_type = 'valores';
                        $cycleConfiguration['save_apprisial_fase_valores_data']($save_data).then(function() {
                              if (!autoFlag) 
                                    toastr.success('Salvo');
                        });
                        return true;
                  }
                  return false;
            }
            $scope.savefasedata = function() {
                  var previousstep = $scope.$step;
                  if (previousstep > -1) {
                        var save_fase = $scope.fasesData[previousstep];
                        var type = save_fase['componente'];
                        switch (type) {
                              case 'O':
                                    return $scope.funsaveorksandfeedback(save_fase);
                                    break;
                              case 'P':
                                    return $scope.funsavedepares(save_fase);
                                    break;
                              case 'C':
                                    return $scope.funsavecompetencias(save_fase);
                                    break;
                              case 'T':
                                    return $scope.funsavepotencials(save_fase);
                                    break;
                              case 'S':
                                    return $scope.funsavesurvey(save_fase);
                                    break;
                              case 'V':
                                    return $scope.funsavevalores(save_fase);
                                    break;
                        }
                  }
                  return true;
            }
            $scope.autoSavefasedata = function() {                   
                  var previousstep = $scope.$step;
                  console.log("auto save:", previousstep);
                  var save_fase = $scope.fasesData[previousstep];
                  var type = save_fase['componente'];
                  switch (type) {
                        case 'O':
                              return $scope.funsaveorksandfeedback(save_fase, true);
                              break;
                        case 'P':
                              return $scope.funsavedepares(save_fase, true);
                              break;
                        case 'C':
                              return $scope.funsavecompetencias(save_fase, true);
                              break;
                        case 'T':
                              return $scope.funsavepotencials(save_fase, true);
                              break;
                        case 'S':
                              return $scope.funsavesurvey(save_fase, true);
                              break;
                        case 'V':
                              return $scope.funsavevalores(save_fase, true);
                              break;
                  }
            }
            $scope.getcomponentdata = function(currentfase) {
                  if (currentfase != null) {
                        var type = currentfase['componente'];
                        $scope.activecomponent = currentfase.componente;
                        $scope.currentfase = currentfase;
                        switch (type) {
                              case 'O':
                                    $scope.funorksandfeedback(currentfase);
                                    break;
                              case 'P':
                                    $scope.fundepares(currentfase);
                                    break;
                              case 'C':
                                    $scope.funcompetencias(currentfase);
                                    break;
                              case 'T':
                                    $scope.funpotencials(currentfase);
                                    break;
                              case 'S':
                                    $scope.funsurvey(currentfase);
                                    break;
                              case 'V':
                                    $scope.funvalores(currentfase);
                                    break;
                        }
                  }
            }
            $scope.paresAdded = [];
            $scope.excludedUserPairs = [];
            $scope.checkIfNotMeOrGestor = function(possiblePair) {
                  return !$scope.excludedUserPairs.includes(possiblePair.id);
            }
            $scope.changepares = function(ur) {
                  $('.pares_block').removeClass("error");
                  $.each($scope.$parent.users, function(i) {
                        if ($scope.$parent.users[i].id === $('#pares-select').val()) {
                              var obj = $filter('filter')($scope.paresAdded, {
                                    id: $scope.$parent.users[i].id
                              }, true)[0];
                              if (!obj) $scope.paresAdded.push($scope.$parent.users[i]);
                              return false;
                        }
                  });
                  $('#pares-select').select2("val", "");
            }
            $scope.removeAddedUser = function(ur) {
                  $.each($scope.paresAdded, function(i) {
                        if ($scope.paresAdded[i].id === ur.id) {
                              var spliced = $scope.paresAdded.splice(i, 1)[0];
                              return false;
                        }
                  });
            }
            $scope.removeUserAndRefresh = function(ur) {
                  $('#pares-select').select2("val", "");
                  $scope.removeAddedUser(ur);
            };
            $scope.downloadContrato = function(contratoData) {
                  window.open(contratoData.anexoFull, '_blank');
            }
            $scope.organizeContratoData = function(contratosData) {
                  angular.forEach(contratosData, function(item,key) {
                        var validFlag = false;
                        if (item.data != null) {
                              validFlag = true;
                        }
                        if (item.description != null && item.description != '') {
                              validFlag = true;
                        }
                        if (item.anexo != null) {
                              validFlag = true;
                        }
                        if (validFlag) {
                              if (item.anexo != null) item.anexoFull = baseurl + 'assets/empresa/' + $scope.user.empresa.id_empresa + '/keys/' + item.id + '/historica/' + item.anexo;
                              $scope.contratosData.push(item);
                        } 
                  });

                  console.log("data:", $scope.contratosData);
            }

            $scope.resetContratosData = function(contratoData, anxeosData) {
                  $scope.contratosData = [];
                  var contratosData = [];
                  if (!contratoData.length) {
                        return;
                  }
                  contratoData = contratoData[0];
                  var tmp;
                  for (var i = 1; i <= 15; i++) {
                        tmp = {};

                        var valorStr = "valor_" + i + "_date";
                        var descStr = "descricao_" + i;
                        tmp.id = contratoData.id_resultado_chave;
                        tmp.data = contratoData[valorStr];
                        tmp.description = contratoData[descStr];
                        angular.forEach(anxeosData, function(item, key) {
                              if (item.category_num == i) {
                                    tmp.anexo = item.anexo;
                              }
                        });
                        if (tmp.anexo == undefined) tmp.anexo = null;
                        contratosData.push(tmp);
                  }

                  $scope.organizeContratoData(contratosData);
            }

            $scope.modalHistoric = function(keyresult_id) {

                  $key['getContratosByIdKey'](keyresult_id).then(function(response) {
                        var contratoData = response[0];
                        var anxeosData = response[1];
                        $scope.resetContratosData(contratoData, anxeosData);
                        $timeout(function() {
                              $('#modal-key-history').modal('show', {
                                    backdrop: 'static'
                              });
                        }, 100);
                  });
            }
            $scope.funorksandfeedback = function(currentfase) {
                  $users['get_question_data_profile'](currentfase.questionario, $scope.searchuser_id, currentfase.id_revisao_ciclo_fases).then(function(response) {
                        var questions = response[0];
                        $scope.selfResultados = response[1];
                        for (var i = 0; i < questions.length; i++) {
                              var category = questions[i];
                              for (var j = 0; j < category.questions.length; j++) {
                                    var questionerio = category.questions[j];
                                    var selfData = $scope.selfResultados[i].questions[j];
                                    questionerio.selfScore = selfData.score;
                                    questionerio.selfDescricao = selfData.descricao;
                                    if (questionerio.type == 'a') {
                                          questionerio.score = parseInt(questionerio.score);
                                          questionerio.selfScore = parseInt(questionerio.selfScore);
                                    }
                              }
                        }
                        $scope.apprisialquestion = questions;
                        angular.forEach($scope.apprisialquestion, function(item, key) {
                              angular.forEach(item.questions, function(question, key1) {
                                    if (question.pattern != 4) {
                                          question.inferior = formatPattern(question.inferior, question.pattern);
                                          question.goal = formatPattern(question.goal, question.pattern);
                                          question.superior = formatPattern(question.superior, question.pattern);
                                          question.atual = formatPattern(question.atual, question.pattern);
                                    }
                              });
                        });
                  });
            }
            $scope.fundepares = function(currentfase) {
                  $scope.$parent.$watch('users', function(newValue) {
                        $scope.possiblePair = newValue;
                        if ($scope.possiblePair) {
                              $scope.possiblePair = $scope.possiblePair.filter($scope.checkIfNotMeOrGestor);
                        }
                        setTimeout(function() {
                              $('#pares-select').select2();
                        }, 200);
                  });
            }
            $scope.funcompetencias = function(currentfase) {
                  $users['get_competencias_data_profile'](currentfase.id_revisao_ciclo_fases, $scope.searchuser.id_time, $scope.searchUserId).then(function(response) {
                        var competencias = response[0];
                        $scope.selfCompentencia = response[1];
                        for (var i = 0; i < competencias.length; i++) {
                              var competencias_row = competencias[i];
                              for (var j = 0; j < competencias_row.categorywisedata.length; j++) {
                                    var categorywisedata_row = competencias_row.categorywisedata[j];
                                    for (var k = 0; k < categorywisedata_row.competencias.length; k++) {
                                          var competencia = categorywisedata_row.competencias[k];
                                          var selfData = $scope.selfCompentencia[i].categorywisedata[j].competencias[k];
                                          competencia.selfScore = selfData.score;
                                          competencia.selfDescricao = selfData.descricao;
                                    } 
                              }
                        }
                        $scope.apprisialcompetencias = competencias;
                        $scope.questionerio = {};
                        $scope.questionerio.id_pergunta = 1;
                        $scope.questionerio.id_questionario = 1;
                  });
            }
            $scope.funpotencials = function(currentfase) {
                  $users['get_question_data_profile'](currentfase.questionario, $scope.searchuser_id, currentfase.id_revisao_ciclo_fases).then(function(response) {
                        var questions = response[0];
                        $scope.selfPotencial = response[1];
                        for (var i = 0; i < questions.length; i++) {
                              var category = questions[i];
                              for (var j = 0; j < category.questions.length; j++) {
                                    var questionerio = category.questions[j];
                                    var selfData = $scope.selfPotencial[i].questions[j];
                                    questionerio.selfScore = selfData.score;
                                    questionerio.selfDescricao = selfData.descricao;
                                    if (questionerio.type == 'a') {
                                          questionerio.score = parseInt(questionerio.score);
                                          questionerio.selfScore = parseInt(questionerio.selfScore);
                                    }
                              }
                        }
                        $scope.apprisialpotencialsquestion = questions;
                  });
            }
            $scope.funsurvey = function(currentfase) {
                  $users['get_question_data_profile'](currentfase.questionario, $scope.searchuser_id, currentfase.id_revisao_ciclo_fases).then(function(response) {
                        var questions = response[0];
                        $scope.selfFeedback = response[1];
                        for (var i = 0; i < questions.length; i++) {
                              var category = questions[i];
                              for (var j = 0; j < category.questions.length; j++) {
                                    var questionerio = category.questions[j];
                                    var selfData = $scope.selfFeedback[i].questions[j];
                                    questionerio.selfScore = selfData.score;
                                    questionerio.selfDescricao = selfData.descricao;
                                    if (questionerio.type == 'a') {
                                          questionerio.score = parseInt(questionerio.score);
                                          questionerio.selfScore = parseInt(questionerio.selfScore);
                                    }
                              }
                        }
                        $scope.apprisialsurveysquestion = questions;
                  });
            }
            $scope.funvalores = function(currentfase) {
                  $users['getallapprisialvalores'](currentfase.id_revisao_ciclo_fases).then(function(response) {
                        $scope.apprisialvalores = response[0];
                        $scope.selfValores = response[1];
                        for (var i = 0; i < $scope.apprisialvalores.length; i++) {
                              var valore = $scope.apprisialvalores[i];
                              var selfData = $scope.selfValores[i];
                              valore.selfScore = selfData.score;
                              valore.selfDescricao = selfData.descricao;
                        }
                        $scope.questionerio = {};
                        $scope.questionerio.id_pergunta = 1;
                        $scope.questionerio.id_questionario = 1;
                  });
            }
            $scope.prevTab = function(index) {
                  $scope.activecomponent ="";
                  var newIndex = parseInt(index) - 1;
                  $scope.$step = newIndex;
                  clearInterval($scope.autoInterval);
                  $scope.autoInterval = setInterval($scope.autoSavefasedata, 30000);
                  if (newIndex < 0) {
                        clearInterval($scope.autoInterval);
                        $scope.getcyclereviewuserforprofile();
                        $scope.myCycleReview();
                  } else {
                        $scope.getcomponentdata($scope.fasesData[newIndex]);
                  }
            }
            $scope.reverceTab3 = function(user_id, cycle, avalicao_id) {
                  $scope.resultotab = 3;
            }
            $scope.calculatePerformance = function() {
                  performance_value = 0;
                  if ($scope.empresadetails.desempenho != 1) {
                        var valore_value = $('#valorefinal').val();
                        var desempnho_value = 0;
                        var performance_value = parseFloat(valore_value);
                  } else {
                        var valore_value = $('#valorefinal').val();
                        var desempnho_value = $('#desempenhofinal').val();
                        var performance_value = (parseFloat(valore_value) + parseFloat(desempnho_value)) / 2;
                  }
                  $("#final_performance .final-figure").html(performance_value.toFixed(2));
            }
            //----save cycle users---//

            $scope.openCompentenciaDetails = function(competencia) {
                  if (competencia.detailOpened) {
                        competencia.detailOpened = false;
                  } else {
                        competencia.detailOpened = true;
                  }
            }

            $scope.competenciaValue = function(competencia){
                  if (competencia.atitudes_positivas || competencia.atitudes_negativas || competencia.comportamento_esperado){
                        return true;
                  }
                  return false;
            }

            $scope.loadAddUserCycleSection = function() {
                  $users['getIdRevisaoCycleById'](curCyleId).then(function(response) {
                        console.log("revisaos:", response);
                        $scope.revisaos = response;
                        if ($scope.revisaos.length) {
                              $scope.maxUsersCount = $scope.revisaos[0].numero_pares_maximo;
                              $scope.minUsersCount = $scope.revisaos[0].numero_pares;
                              $users['getUsersForPeerSelection'](curCyleId).then(function(response) {
                                    $scope.usersToAdd = response;
                                    $timeout(function() {
                                          $("#addUsersForCycle").select2();
                                    }, 100);
                              });
                              var cycles = [];
                              angular.forEach($scope.revisaos, function(item, key) {
                                    cycles.push(item.id_revisao_ciclo);
                              });
                              $cycleConfiguration['getAlreadyAddedUsersByCycleId'](cycles).then(function(response) {
                                    $scope.selectedUsersForCycle = response;
                                    $scope.disableIndex = response.length - $scope.minUsersCount;
                              });
                        }
                  });
            }

            $scope.tempVar = 0;
            $scope.onChangeUserForCycle = function() {
                  if ($scope.tempVar == 1) {
                        $scope.tempVar = 0;
                        return;
                  }
                  var availableAdds = $scope.maxUsersCount - $scope.selectedUsersForCycle.length;
                  var addedToCombo = 0;
                  angular.forEach($scope.usersToAdd, function(result, key) {
                        if (result.added) { addedToCombo++; }
                  });
                  console.log("changed:", $('#addUsersForCycle').val(), ":", availableAdds, ":", addedToCombo);
                  $scope.tempVar = 1;
                  if (availableAdds <= addedToCombo) {
                        $scope.tempVar = 0;
                        toastr.warning('Pares cannot saves more than ' + $scope.maxUsersCount);
                        return;
                  }
                  angular.forEach($scope.usersToAdd, function(result, key) {
                        if (result['id'] == $('#addUsersForCycle').val()) result.added = true;
                  });
            }

            $scope.makeIdListForUsers = function() {
                  var idList = [];
                  angular.forEach($scope.usersToAdd, function(result, key) {
                        if (result.added) idList.push(result.id);
                  });
                  return idList;
            }

            var curCyleId = $routeParams.cycleid;
            $scope.disableIndex = 0;
            $scope.loadAddUserCycleSection();

            $scope.saveUsersForCycle = function() {
                  var users = $scope.makeIdListForUsers();
                  if (!users.length) { return; }
                  var cycles = [];
                  angular.forEach($scope.revisaos, function(item, key) {
                        cycles.push(item.id_revisao_ciclo);
                  });
                  console.log("save users:", users, cycles);
                  $('#save-peer').button('loading');
                  $cycleConfiguration['addUsersForCycle'](cycles, users).then(function(response) {
                        toastr.success('Par associado com sucesso.');
                        $('#save-peer').button('reset');
                        $("#addUsersForCycle").select2('destroy');
                        $scope.loadAddUserCycleSection();
                  });
            }
      } else {
            $cycleConfiguration['get']().then(function(cycleConfigList) {
                  $scope.cycleConfigList = cycleConfigList;
            });
      }
});
/**
 * Controller for CycleConfigurationEdit.
 *
 * @param many Factories
 *
 */
elofy.controller('cycleConfigeditorCtrl', function globalCtrl($scope, $timeout, $filter, $globals, $users, $cycles, $cycleConfiguration, $pesquisaseditor, $years, $translate, $location) {
      $scope.contentLoading = 0;
      var currentDate = moment(new Date()).format("YYYY-MM-DD");
      $scope.cyclesRows = [{
            value: null
      }];
      $scope.removeAddMoreButton = false;
      $scope.alreadyused = false;
      $scope.componentOptions = [{
                  "key": "O",
                  "value": "Resultados"
            },
            {
                  "key": "C",
                  "value": "Competências"
            },
            {
                  "key": "T",
                  "value": "Potencial"
            },
            {
                  "key": "V",
                  "value": "Valores"
            },
            {
                  "key": "S",
                  "value": "Feedback"
            }
      ];
      $scope.selectedComponent = [];
      if ($scope.$parent.currentYear) {
            $scope.selectedYear = $scope.selectedYear;
      } else {
            $scope.selectedYear = new Date().getFullYear();
      }

      $timeout(function() {
            $('#calc_rule').addClass('visible');
            $('#calc_rule').selectBoxIt();
      }, 100);
      /**
       * Function save Save Availacao Cycle Configuration
       *
       * @param null
       *
       * @return to List page with success message.
       */
      $scope.saveCycleConfiguration = function() {
            var data = $('#saveform1').serialize();
            var amostra = $scope.amostra;
            var all_members = 0;
            var userTeams = $scope.usersTeams;
            var $postTeams = [];
            if (userTeams) {
                  $.each(userTeams, function(index, value) {
                        delete value.$$hashKey;
                        $postTeams.push({
                              'id_usuario': value.id_usuario,
                              'id_revisao_ciclos_avaliacoes': value.id_revisao_ciclos_avaliacoes
                        });
                  });
            }
            $('.error-message').addClass('hide');
            $('#saveform1 .salvar').button('loading');
            $scope.$apply(function() {
                  //$scope.contentLoading++;
            });
            if (amostra == 0) {
                  $postTeams = [];
                  all_members = 1;
            }
            //$scope.contentLoading++;
            var tipo_nota_final = $scope.calc_rule[0];
            $cycleConfiguration['saveCycleConfiguration'](data, $postTeams, $scope.disable_form, all_members, tipo_nota_final).then(function(response) {
                  toastr.success('Configuração de Ciclo salva!');
                  
                  //$('#saveform1')[0].reset();
                  $('#saveform1 .salvar').button('reset');
                  //$scope.contentLoading--;
                  $timeout(function() {
                        //location.href = baseurl + 'cycleconfiguration';
                        location.href = baseurl + 'cycleconfiguration/' + value.id_revisao_ciclos_avaliacoes;
                        
                  }, 1000);
            });
      }
      $scope.updateSituation = function($id_revisao_ciclo, value) {
            $scope.contentLoading++;
            $('#saveform1 .updateSituacao').button('loading');
            $cycleConfiguration['updateSituacao']($id_revisao_ciclo, value).then(function(response) {
                  $scope.contentLoading--;
                  if (value){
                        toastr.success('Etapa de Feeback Iniciada!');
                  } else {
                        toastr.success('Etapa de Feeback Encerrada!');
                  }
                 
                  $('#saveform1 .updateSituacao').button('reset');
                  $cycleConfiguration['getById']($('#id_revisao_ciclo').val()).then(function(response) {
                        $scope.revisao_ciclo = response.ravisao_ciclo;
                  });
                  //window.document.location.reload(true);
            });
      }
      $scope.saveAutorizar = function($id_revisao_ciclo) {
            $scope.contentLoading++;
            $('#saveform1 .saveautorizar').button('loading');
            $cycleConfiguration['saveAutorizar']($id_revisao_ciclo).then(function(response) {
                  $scope.contentLoading--;
                  toastr.success('Revisão de Ciclo Iniciada!');
                  $('#saveform1 .saveautorizar').button('reset');
                  $cycleConfiguration['getById']($('#id_revisao_ciclo').val()).then(function(response) {
                        $scope.revisao_ciclo = response.ravisao_ciclo;
                  });
                  $scope.disable_form = 1;
                  //window.document.location.reload(true);
            });
      }
      $scope.saveDeautorizar = function($id_revisao_ciclo) {
            $scope.contentLoading++;
            $('#saveform1 .savedeautorizar').button('loading');
            $cycleConfiguration['saveDeautorizar']($id_revisao_ciclo).then(function(response) {
                  $scope.contentLoading--;
                  toastr.success('Revisão de Ciclo Interrompida!');
                  $('#saveform1 .savedeautorizar').button('reset');
                  $cycleConfiguration['getById']($('#id_revisao_ciclo').val()).then(function(response) {
                        $scope.revisao_ciclo = response.ravisao_ciclo;
                  });
                  //$scope.disable_form = ($scope.revisao_ciclo) ? $scope.revisao_ciclo.liberado : 0;
                  $scope.disable_form = 0;
                  //window.document.location.reload(true);
            });
      }
      /**
       * Validation for Form
       *
       * @param null
       *
       */
      $('#saveform1').validate({
            //ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .times-edit',
            ignore: [],
            rules: {
                  nome_pesquisa: {
                        'greaterThanZero': true
                  },
                  id_tipo_pesquisa: 'required',
                  escala: 'required',
                  id_janela: 'required',
                  id_ciclo_ini: 'required',
                  Id_ciclo_fim: 'required',
                  public_mode: 'required',
                  ativo: 'required',
                  send_message: 'required',
                  // 'nome_fase[]': 'required',
                  // 'componente[]': 'required',
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            invalidHandler: function() {
                  $('.error-message').removeClass('hide');
            },
            submitHandler: function(form) {
                  var validated = true;
                  if (!$scope.alreadyused) {
                        $("[id^=nome_fase_]").each(function() {
                              $(this).removeClass('error');
                              $(this).parent().removeClass('validate-has-error');
                              if ($.trim($(this).val()) == "") {
                                    validated = false;
                                    $(this).addClass('error');
                                    $(this).parent().addClass('validate-has-error');
                              }
                        });
                        console.log("save here:", $('#numero_pares').val(), $('#numero_pares_maximo').val());
                        if (parseInt($('#numero_pares').val()) > parseInt($('#numero_pares_maximo').val())) {
                              alert("Numero Mínimo deve ser menor que Número Máximo");
                              return;
                        }
                        if (validated) {
                              $scope.saveCycleConfiguration();
                        } else {
                              $('.error-message').removeClass('hide');
                        }
                  } else {
                        $('.error-message').removeClass('hide');
                  }
            }
      });
      $scope.disable_form = 0;
      $scope.checkEscolhePar = function() {
            if ($scope.escolhe_par) {
                  $scope.showNumeroPares = true;
            } else {
                  $scope.showNumeroPares = false;
            }
      }
      /**
       * Function for use CyclesConfigurationList
       *
       * @param Ciclo Id
       *
       */
      $cycleConfiguration['getById']($('#id_revisao_ciclo').val()).then(function(response) {
            $scope.showNumeroPares = false;
            $scope.revisao_ciclo = response.ravisao_ciclo;
            $scope.disable_form = ($scope.revisao_ciclo) ? $scope.revisao_ciclo.liberado : 0;
            if ($('#calc_rule').hasClass('visible')) {
                  var selectBox = $('#calc_rule').data("selectBox-selectBoxIt");
                  $('#calc_rule').removeClass('visible');
                  selectBox.destroy();
            }
            if ($scope.revisao_ciclo) {
                  $scope.selectedYear = "number:" + response.ravisao_ciclo.inicio_vigencia.substr(0, 4);
                  $('#calc_rule').val($scope.revisao_ciclo.tipo_nota_final);
                  console.log("response.ravisao_ciclo", response.ravisao_ciclo);
                  console.log("$scope.selectedYear", $scope.selectedYear);
                  setTimeout(function() {
                        $('#id_janela').val($scope.selectedYear)
                  }, 1000);
                  setTimeout(function() {
                        $('#id_janela').trigger('change')
                  }, 2000);
                  setTimeout(function() {
                        $('#id_tipo_pesquisa').select2()
                  }, 400);
            }
            if (typeof response.ravisao_ciclo != "undefined" && $scope.revisao_ciclo.escolhe_par == 1) {
                  $scope.showNumeroPares = true;
            }
            $scope.availicao_user_data = response.availicao_user_data;
            // if (response.availicao_user_data.length > 0) {
            //     $.each(response.availicao_user_data, function(index, user_apprisial) {
            //         if (user_apprisial.valores == '1' || user_apprisial.competencias == '1' || user_apprisial.resultados == '1' || user_apprisial.potencial == '1' || user_apprisial.survey == '1') {
            //             $scope.disable_form = 1;
            //         }
            //     })
            // }
            if (typeof response.ravisao_ciclo == "undefined") {
                  $scope.amostra = 0;
                  $scope.send_message = 0;
            } else {
                  $scope.amostra = response.ravisao_ciclo.amostra;
                  $scope.send_message = response.ravisao_ciclo.send_message;
            }
            $scope.cyclesRows = response.fase_data;
            $scope.availicao_user_data = response.availicao_user_data;
            if ($scope.cyclesRows.length == 0) {
                  $scope.cyclesRows = [{
                        value: null
                  }];
            }
            $('.componente').select2('destroy');
            $('.questionario').select2('destroy');
            $('#ativo').select2('destroy');
            $timeout(function() {
                  $($scope.cyclesRows).each(function(index, element) {
                        if (element.componente == 'P') {
                              $('#autavalida_block_' + index).hide();
                              $('#avaliacao_de_pares_block_' + index).hide();
                        } else if (element.componente == 'V') {
                              $('#autavalida_block_' + index).show();
                              $('#avaliacao_de_pares_block_' + index).show();
                        } else if (element.componente == 'C') {
                              $('#autavalida_block_' + index).show();
                              $('#avaliacao_de_pares_block_' + index).show();
                        } else if (element.componente == 'T') {
                              $('#autavalida_block_' + index).show();
                              $('#avaliacao_de_pares_block_' + index).show();
                        }
                        var component_val = element.componente
                        $scope.selectedComponent.push({
                              component_val
                        });
                        $timeout(function() {
                              $('#final_' + index).select2();
                        }, 600);
                  });
                  $scope.showRemoveButton = true;
                  $('.componente').select2();
                  $('.questionario').select2();
                  $('#ativo').select2();
                  $('#id_tipo_pesquisa').select2();
                  $('.mediafinalclass').select2();
                  $scope.datafunction(); // Calling Date Function.
                  $('#calc_rule').addClass('visible');
                  $('#calc_rule').selectBoxIt();
            }, 400);
      });
      /**
       * Function for use Years Data
       *
       * @param null
       *
       */
      $years['get']().then(function(years) {
            $scope.years = years;
            $timeout(function() {
                  $('#id_janela').select2();
            }, 400);
      });
      /**
       * Function calls when change component values
       *
       * @param null
       *
       * Change questionare options and checkboxes. 
       */
      $scope.changeComponent = function(index) {
            var face_dv = $('#fase_dv_' + index);
            var componente_val = $('#componente_' + index).val();
            $('[id^=componente_]').prev('.select2-container.componente').removeClass('error');
            $('[id^=componente_]').parent().find('span.error').remove();
            $scope.alreadyused = false;
            $('[id^=componente_]').each(function(cindex) {
                  if ($(this).val() == componente_val && cindex != index) {
                        // $('#componente_'+index).val('');
                        // $('#componente_'+index).trigger('change');
                        $('#componente_' + index).prev('.select2-container.componente').addClass('error');
                        $('#componente_' + index).after('<span class="error">Este componente já foi adicionado.</span>');
                        $scope.alreadyused = true;
                  }
            });
            if ($scope.alreadyused) {
                  return false;
            }
            if (componente_val != "") {
                  $('#ordem_' + index).val('');
                  $('#ordem_' + index).removeAttr('readonly');
                  if (componente_val == 'O') {
                        $('#questionario_block_' + index).show();
                        $('#autavalida_block_' + index).show();
                        $('#avaliacao_de_pares_block_' + index).show();
                  } else if (componente_val == 'V') {
                        $('#questionario_block_' + index).hide();
                        $('#autavalida_block_' + index).show();
                        $('#avaliacao_de_pares_block_' + index).show();
                  } else if (componente_val == 'C') {
                        $('#questionario_block_' + index).hide();
                        $('#autavalida_block_' + index).show();
                        $('#avaliacao_de_pares_block_' + index).show();
                  } else if (componente_val == 'T') {
                        $('#questionario_block_' + index).show();
                        $('#autavalida_block_' + index).show();
                        $('#avaliacao_de_pares_block_' + index).show();
                  } else if (componente_val == 'S') {
                        $('#questionario_block_' + index).show();
                        $('#autavalida_block_' + index).show();
                        $('#avaliacao_de_pares_block_' + index).show();
                  }
                  // $scope.checkSelectedComponent(componente_val);
            }
            $timeout(function() {
                  $('#final_' + index).select2();
            }, 600);
      }
      $scope.checkAutaovalia = function(index) {
            if ($('#autavalia_' + index).is(":checked")) {
                  $('#autavaliaHidden_' + index).val(1);
            } else {
                  $('#autavaliaHidden_' + index).val(0);
            }
      }
      $scope.checkPares = function(index) {
            if ($('#pares_' + index).is(":checked")) {
                  $('#paresHidden_' + index).val(1);
            } else {
                  $('#paresHidden_' + index).val(0);
            }
      }
      $scope.checkGestor = function(index) {
            if ($('#gestor_' + index).is(":checked")) {
                  $('#gestorHidden_' + index).val(1);
            } else {
                  $('#gestorHidden_' + index).val(0);
            }
      }
      $scope.checkEquipe = function(index) {
            if ($('#equipe_' + index).is(":checked")) {
                  $('#equipeHidden_' + index).val(1);
            } else {
                  $('#equipeHidden_' + index).val(0);
            }
      }
      $scope.checkGrafico = function(index) {
            if ($('#grafico_' + index).is(":checked")) {
                  $('#graficoHidden_' + index).val(1);
            } else {
                  $('#graficoHidden_' + index).val(0);
            }
      }
      $scope.checkExibirGrafico = function(index) {
            if ($('#exibir_grafico_' + index).is(":checked")) {
                  $('#exibirGraficoHidden_' + index).val(1);
            } else {
                  $('#exibirGraficoHidden_' + index).val(0);
            }
      }
      
      $scope.validateCheckComment = function(index){
            console.log('AQUI');
            //eval( "var result = obj." + propname );
            //if(eval("comment_")){}
            if ($('#commentHidden_' + index).val()) {
                  $('#div_campo_obrigatorio_' + index).addClass("exibe");
                  $('#div_campo_obrigatorio_' + index).removeClass("oculta"); 
                  onsole.log('AQUI1 >',$('#comment_' + index).val());
            } else {
                  $('#div_campo_obrigatorio_' + index).addClass("oculta");
                  $('#div_campo_obrigatorio_' + index).removeClass("exibe");
                  console.log('AQUI2');
            }
      }
      $scope.checkComment = function(index) {
            if ($('#comment_' + index).is(":checked")) {
                  $('#commentHidden_' + index).val(1);
                  $('#div_campo_obrigatorio_' + index).addClass("exibe");
                  $('#div_campo_obrigatorio_' + index).removeClass("oculta");
            } else {
                  $('#commentHidden_' + index).val(0);
                  $('#div_campo_obrigatorio_' + index).addClass("oculta");
                  $('#commentRequiredHidden_' + index).val(0);
                  $('#commentRequiredHidden_' + index).val(0);
                  $('#div_campo_obrigatorio_' + index).removeClass("exibe");
            }
      }
      $scope.checkCommentRequired = function(index) {
            if ($('#commentRequired_' + index).is(":checked")) {
                  $('#commentRequiredHidden_' + index).val(1);
            } else {
                  $('#commentRequiredHidden_' + index).val(0);
            }
      }
      $scope.check_nine_x = function(index) {
            if ($('#checkbox_nine_x_' + index).is(":checked")) {
                  $("[id^=checkbox_nine_x_]").each(function() {
                        $(this).prop('checked', false);
                        $(this).prev().val(0);
                  });
                  $('#checkbox_nine_hidden_x_' + index).val(1);
                  $('#checkbox_nine_x_' + index).prop('checked', true);
            } else {
                  $('#checkbox_nine_hidden_x_' + index).val(0);
                  $('#checkbox_nine_x_' + index).prop('checked', false);
            }
      }
      $scope.check_nine_y = function(index) {
            if ($('#checkbox_nine_y_' + index).is(":checked")) {
                  $("[id^=checkbox_nine_y_]").each(function() {
                        $(this).prop('checked', false);
                        $(this).prev().val(0);
                  });
                  $('#checkbox_nine_hidden_y_' + index).val(1);
                  $('#checkbox_nine_y_' + index).prop('checked', true);
            } else {
                  $('#checkbox_nine_hidden_y_' + index).val(0);
                  $('#checkbox_nine_y_' + index).prop('checked', false);
            }
      }
      /**
       * Function for get Cycles data from Selected Year
       *
       * @param SelectedYear
       *
       * Insert Cycles into Scope Object 
       */
      $scope.getCycle = function() {
            $cycles['getByYear']($scope.selectedYear).then(function(response) {
                  $scope.cycles = response;
                  $scope.loadCycles();
            });
      }
      $scope.getCycle();
      /**
       * Function for use LoadCycles
       *
       * @param null
       *
       */
      $scope.loadCycles = function() {
            var formCycles = $('#saveform1 .filters_view');
            $('.trimestres').select2('val', '');
            if ($scope.selectedYear) {
                  $cycles['getByYear']($scope.selectedYear).then(function(response) {
                        $scope.cycles = response;
                        $timeout(function() {
                              $('#id_ciclo_ini').select2();
                              $('#Id_ciclo_fim').select2();
                        }, 10);
                  });
            }
      }
      /**
       * Function for use DatePicker
       *
       * @param null
       *
       */
      $scope.datafunction = function() {
            $timeout(function() {
                  if ($.isFunction($.fn.datepicker)) {
                        $(".data").each(function(i, el) {
                              var $this = $(this),
                                    opts = {
                                          format: attrDefault($this, 'format', 'dd/mm/yyyy'),
                                          startDate: attrDefault($this, 'startDate', ''),
                                          endDate: attrDefault($this, 'endDate', ''),
                                          daysOfWeekDisabled: attrDefault($this, 'disabledDays', ''),
                                          startView: attrDefault($this, 'startView', 0),
                                          language: 'pt-BR',
                                          rtl: rtl()
                                    },
                                    $n = $this.next(),
                                    $p = $this.prev();
                              $this.datepicker(opts);
                              if ($n.is('.input-group-addon') && $n.has('a')) {
                                    $n.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                              if ($p.is('.input-group-addon') && $p.has('a')) {
                                    $p.on('click', function(ev) {
                                          ev.preventDefault();
                                          $this.datepicker('show');
                                    });
                              }
                        });
                  }
            }, 100);
      }
      $scope.teamUsers = [];
      $scope.byUsers = [];
      $scope.byTeams = [];
      $scope.usersTeams = [];
      $('#selected_user_type').change(function() {

            $users['getByTypeOrLevel']($('#selected_user_type').val()).then(function(response) {
                  $scope.typeUsers = response;
                  $('#selected_user_type').select2('enable');
                  $scope.previewUserList();
            });
      });
      $('#selected_user_level').change(function() {
            $users['getByTypeOrLevel'](null, $('#selected_user_level').val()).then(function(response) {
                  $scope.levelUsers = response;
                  $('#selected_user_level').select2('enable');
                  $scope.previewUserList();
            });
      });
      $('#selectd_team').change(function() {
            $('#selectd_team').select2('disable');
            $scope.teamUsers = [];
            $("#selectd_users").select2("val", []).trigger("change");
            $('#chk_all_user').prop('checked', false);
            $users['get']().then(function(users) {
                  $scope.users = users;
                  var arrTeams = [$('#selectd_team').val()];
                  var strTeams = "";
                  if (arrTeams == null) {
                        $('#selectd_team').select2('enable');
                        $scope.previewUserList();
                        return;
                  }
                  for (var i = 0; i < arrTeams.length; i++) {
                        strTeams += "," + arrTeams[i];
                  }
                  strTeams = strTeams.substring(1);
                  $pesquisaseditor['getUsersByTeams'](strTeams).then(function(response) {
                        $scope.teamUsers = [];
                        $scope.teamUsers = response;
                        for (var i = 0; i < response.length; i++) {
                              for (var j = 0; j < $scope.users.length; j++) {
                                    if (response[i].id_usuario == $scope.users[j].id) {
                                          $scope.users.splice(j, 1);
                                          break;
                                    }
                              }
                        }
                        $('#selectd_team').select2('enable');
                        $scope.previewUserList();
                  });
            });
      });
      $('#selectd_users').change(function() {
            $('#selectd_users').select2('disable');
            // $scope.byUsers = [];
            var arrUsers = [$('#selectd_users').val()];
            // if (!arrUsers || arrUsers.length ==0) {
            //     $('#selectd_users').select2('enable');
            //     $scope.previewUserList();
            //     return;
            // }
            var strUsers = "";
            for (var i = 0; i < arrUsers.length; i++) {
                  strUsers += "," + arrUsers[i];
            }
            strUsers = strUsers.substring(1);
            $pesquisaseditor['getUsersByIds'](strUsers).then(function(response) {
                  $scope.byUsers = response;
                  $('#selectd_users').select2('enable');
                  $scope.previewUserList();
            });
      });
      $scope.cleanAmostra = function() {
            $('#selectd_users').val(null);
            $('#selectd_team').val(null);
            $('#selected_user_type').val(null);
            $('#selected_user_level').val(null);
            $('#selectd_users').select2();
            $('#selectd_team').select2();
            $('#selected_user_type').select2();
            $('#selected_user_level').select2();
            $('#chk_all_user').prop('checked', false);
            $('#chk_all_team').prop('checked', false);
            $scope.usersTeams = [];
            $scope.teamUsers = [];
            $scope.byUsers = [];
            $scope.typeUsers = [];
            $scope.levelUsers = [];
      }

      function testIfUserInArray(user, arr) {
            if (!arr) return false;
            for (var i = 0; i < arr.length; i++) {
                  if (arr[i].id_usuario == user.id_usuario) return true;
            }
            return false;
      }
      $scope.previewUserList = function() {
            if ($scope.teamUsers) {
                  for (var i = 0; i < $scope.teamUsers.length; i++) {
                        if (!testIfUserInArray($scope.teamUsers[i], $scope.usersTeams)) $scope.usersTeams.push($scope.teamUsers[i]);
                  }
            }
            if ($scope.byUsers) {
                  for (var i = 0; i < $scope.byUsers.length; i++) {
                        if (!testIfUserInArray($scope.byUsers[i], $scope.usersTeams)) $scope.usersTeams.push($scope.byUsers[i]);
                  }
            }
            if ($scope.typeUsers) {
                  for (var i = 0; i < $scope.typeUsers.length; i++) {
                        if (!testIfUserInArray($scope.typeUsers[i], $scope.usersTeams)) $scope.usersTeams.push($scope.typeUsers[i]);
                  }
            }
            if ($scope.levelUsers) {
                  for (var i = 0; i < $scope.levelUsers.length; i++) {
                        if (!testIfUserInArray($scope.levelUsers[i], $scope.usersTeams)) $scope.usersTeams.push($scope.levelUsers[i]);
                  }
            }


            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 1000);
      }
      $scope.deleteUser = function(time_id, user_id) {
            for (var i = 0; i < $scope.usersTeams.length; i++) {
                  if ($scope.usersTeams[i].id_usuario == user_id) {
                        $scope.usersTeams.splice(i, 1);
                        break;
                  }
            }
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      }
      /**
       * Function for get Questionarios
       *
       * @param null
       *
       */
      $pesquisaseditor['getQuestionarios']().then(function(questionarios) {
            $scope.questionarios = questionarios;
      });
      /**
       * Function for get Users.
       *
       * @param null
       *
       * @return Users into Scope    
       */
      $users['get']().then(function(users) {
            $scope.users = users;
      });
      /**
       * Function for when select user.
       *
       * @param null
       *
       * @return changes the table values.
       */
      $('#selectd_users').change(function() {
            $('#selectd_users').select2('disable');
            $scope.byUsers = [];
            var arrUsers = $('#selectd_users').val();
            if (arrUsers == null) {
                  $('#selectd_users').select2('enable');
                  $scope.previewUserList();
                  return;
            }
            var strUsers = "";
            for (var i = 0; i < arrUsers.length; i++) {
                  strUsers += "," + arrUsers[i];
            }
            strUsers = strUsers.substring(1);
            $pesquisaseditor['getUsersByIds'](strUsers).then(function(response) {
                  $scope.byUsers = response;
                  $('#selectd_users').select2('enable');
                  $scope.previewUserList();
            });
      });
      $scope.mailsending = false;
      $scope.sendEmail = function() {
            if ($('#corpo_email').val() == "") {
                  toastr.error('Mail content not found');
            } else {
                  if (!$scope.mailsending) {
                        var $postUsers = [];
                        if ($scope.usersTeams) {
                              $.each($scope.usersTeams, function(index, value) {
                                    delete value.$$hashKey;
                                    $postUsers.push(value);
                              });
                              $("#sendemailtouser").text('Sending..');
                              $("#sendemailtouser").attr('disabled', true);
                              $cycleConfiguration['sendCycleEmailToUsers']($('#id_revisao_ciclo').val(), $postUsers, $scope.revisao_ciclo.email).then(function(response) {
                                    toastr.success('Mail Sent');
                                    $("#sendemailtouser").text('Send Email');
                                    $("#sendemailtouser").attr('disabled', false);
                                    $scope.mailsending = true;
                              });
                        }
                  }
            }
      }
      $timeout(function() {
            if ($('#public_mode1').attr('checked') ? true : false) {
                  $cycleConfiguration['getUsersByCycleConfig']($('#id_revisao_ciclo').val()).then(function(response) {
                        $scope.usersTeams = [];
                        $scope.byUsers = response;
                        $scope.usersTeams = $scope.teamUsers.concat($scope.byUsers);
                        $timeout(function() {
                              $('.overflow_dv').getNiceScroll().resize();
                        }, 1000);
                  });
            }
      }, 500);
      /**
       * Function for searching Users.
       *
       * @param null
       *
       * @return search results.
       */
      $('#search_text').keydown(function() {
            $('.users-group-item').each(function() {
                  $(this).show();
            });
            var search = $(this).val();
            for (var i = 0; i < $scope.usersTeams.length; i++) {
                  if (($scope.usersTeams[i].nome_usuario != null && $scope.usersTeams[i].nome_usuario.indexOf(search) < 0) && ($scope.usersTeams[i].nome_unidade != null && $scope.usersTeams[i].nome_unidade.indexOf(search) < 0) && ($scope.usersTeams[i].email_usuario != null && $scope.usersTeams[i].email_usuario.indexOf(search) < 0)) {
                        var id_time = $scope.usersTeams[i].id_time;
                        var id_usuario = $scope.usersTeams[i].id_usuario;
                        $('div[data-id=' + id_time + '_' + id_usuario + ']').hide();
                  }
            }
            $timeout(function() {
                  $('.overflow_dv').getNiceScroll().resize();
            }, 100);
      });
      /**
       * Function for add more cycles data
       *
       * @param specific Id
       *
       * @return New Row of Cycle.
       */
      $scope.addMoreCycles = function(index, totalLength) {
            $scope.removeAddMoreButton = false;
            if (parseInt(totalLength) == 0) {
                  $scope.showRemoveButton = false;
            } else {
                  $scope.showRemoveButton = true;
            }
            if (parseInt(index) <= 3) {
                  $scope.cyclesRows.push({
                        value: null
                  });
                  $timeout(function() {
                        var new_index = parseInt(index) + parseInt(1);
                        $('#componente_' + new_index).select2();
                        $('#questionario_' + new_index).select2();
                  }, 200);
                  if (parseInt(index) == 3) {
                        $scope.removeAddMoreButton = true;
                  }
            } else {
                  $scope.removeAddMoreButton = true;
            }
            $timeout(function() {
                  $('.mediafinalclass').select2();
            }, 100);
      }
      /**
       * Function for remove addmoreCycles
       *
       * @param specific Id
       *
       * @return null
       */
      $scope.removeCycles = function(index, totalLength) {
            if (confirm("Are you sure you want to delete this row!")) {
                  $scope.cyclesRows.splice(index, 1);
                  if (parseInt(index) < 5) {
                        $scope.removeAddMoreButton = false;
                  }
            }
            if (parseInt(totalLength) == 2) {
                  $scope.showRemoveButton = false;
            } else {
                  $scope.showRemoveButton = true;
            }
            return false;
      }
      $timeout(function() {
            $('.mediafinalclass').select2();
            $('#linearsel').select2();
      }, 200);
      $cycleConfiguration['getTipoFaseById']($('#id_revisao_ciclo').val()).then(function(response) {
            var i = 0;
            var fase_id = [];
            var len = response.length;
            $scope.fase = response;
            while (i < len) {
                  fase_id.push(response[i].id_revisao_ciclo_fases);
                  i++;
            }
            $cycleConfiguration['getTipoFaseScoreById'](fase_id).then(function(res) {
                  $scope.tiposcore = res;
            });
            $cycleConfiguration['getEscalaByEmpresaId']().then(function(res) {
                  $scope.available_scales = res;
                  setTimeout(function() {
                        $('#id_tipo_pesquisa').select2()
                  }, 400);
            });
            $cycleConfiguration['getNineBoxes']().then(function(res) {
                  $scope.nboxes = res;
                  setTimeout(function() {
                        $('#id_nbox').select2()
                  }, 400);
            });
            $cycleConfiguration['getRevisoesByEmpresaId']().then(function(res) {
                  $scope.revisoes = res;
                  setTimeout(function() {
                        $('#id_revisao').select2();
                  }, 400);
            });
            $cycleConfiguration['getNiveisByEmpresaId']().then(function(res) {
                  $scope.niveis = res;
                  setTimeout(function() {
                        $('#selected_user_level').select2();
                  }, 400);
            });
            $scope.newCicle = function() {
                  $('#add-cicle').modal('show', {
                        backdrop: 'static'
                  });
            }
            $('#new-cicle').validate({
                  //ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .times-edit',
                  rules: {
                        category_name: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('.error-message').removeClass('hide');
                  },
                  submitHandler: function(form) {
                        //data teste
                        var data = {
                              name: $('#new-cicle #cicle_name').val()
                        };
                        $('.error-message').addClass('hide');
                        $('#new-cicle .salvar').button('loading');
                        $cycleConfiguration['insertCycle'](data).then(function(response) {
                              toastr.success("Ciclo adicionado com sucesso!");
                              $cycleConfiguration['getRevisoesByEmpresaId']().then(function(res) {
                                    $scope.revisoes = res;
                                    setTimeout(function() {
                                          $('#id_revisao').select2()
                                    }, 400);
                              });
                              $('#new-cicle')[0].reset();
                              $('#new-cicle .salvar').button('reset');
                              $('#add-cicle').modal('hide');
                        });
                  }
            });
      });
      $scope.checktableauto = function(componente, nomefase, index, type) {
            if (type == 'tipo') {
                  if ($('#' + componente + '_auto').is(":checked")) {
                        if ($('#' + componente + '_checkpeso0').val() == '') {
                              $('#' + componente + '_checkpeso0').val('1');
                        }
                        $('#' + componente + '_checkpeso0').attr("required", true);
                        return 0;
                  } else {
                        $('#' + componente + '_checkpeso0').removeAttr('required');
                        $('#' + componente + '_checkpeso0').val('');
                        return 1;
                  }
            } else {
                  if ($('#' + componente + '_auto').is(":checked")) {
                        return 0;
                  } else {
                        return 1;
                  }
            }
      }
      $scope.checktablegestor = function(componente, nomefase, index, type) {
            if (type == 'tipo') {
                  if ($('#' + componente + '_gestor').is(":checked")) {
                        if ($('#' + componente + '_checkpeso1').val() == '') {
                              $('#' + componente + '_checkpeso1').val('1');
                        }
                        $('#' + componente + '_checkpeso1').attr("required", true);
                        return 0;
                  } else {
                        $('#' + componente + '_checkpeso1').removeAttr('required');
                        $('#' + componente + '_checkpeso1').val('');
                        return 1;
                  }
            } else {
                  if ($('#' + componente + '_gestor').is(":checked")) {
                        return 0;
                  } else {
                        return 1;
                  }
            }
      }
      $scope.checktablepares = function(componente, nomefase, index, type) {
            if (type == 'tipo') {
                  if ($('#' + componente + '_pares').is(":checked")) {
                        if ($('#' + componente + '_checkpeso2').val() == '') {
                              $('#' + componente + '_checkpeso2').val('1');
                        }
                        $('#' + componente + '_checkpeso2').attr("required", true);
                        return 0;
                  } else {
                        $('#' + componente + '_checkpeso2').removeAttr('required');
                        $('#' + componente + '_checkpeso2').val('');
                        return 1;
                  }
            } else {
                  if ($('#' + componente + '_pares').is(":checked")) {
                        return 0;
                  } else {
                        return 1;
                  }
            }
      }
      $scope.checktableequipe = function(componente, nomefase, index, type) {
            if (type == 'tipo') {
                  if ($('#' + componente + '_equipe').is(":checked")) {
                        if ($('#' + componente + '_checkpeso3').val() == '') {
                              $('#' + componente + '_checkpeso3').val('1');
                        }
                        $('#' + componente + '_checkpeso3').attr("required", true);
                        return 0;
                  } else {
                        $('#' + componente + '_checkpeso3').removeAttr('required');
                        $('#' + componente + '_checkpeso3').val('');
                        return 1;
                  }
            } else {
                  if ($('#' + componente + '_equipe').is(":checked")) {
                        return 0;
                  } else {
                        return 1;
                  }
            }
      }
      /**  function for media final */
      $scope.check_media_final = function(index, type) {
            if (type == 'mediafinal') {
                  if ($('#final_' + index).val() == 1) {
                        $("#linear_" + index).attr("required", true);
                        if ($("#linear_" + index).val() == '') {
                              $("#linear_" + index).val(1);
                        }
                        return 1;
                  } else {
                        //$("#linear_"+index).val('');
                        $("#linear_" + index).removeAttr('required');
                        $("#linear_" + index).val('');
                        return 0;
                  }
            } else {
                  if ($('#final_' + index).val() == 1) {
                        return 1;
                  } else {
                        return 0;
                  }
            }
      }
      /** function ended */
});
/**
 * Controller for Category.
 *
 * @param many Factories
 *
 */
elofy.controller('CategoryCtrl', function globalCtrl($scope, $rootScope, $timeout, $filter, $globals, $users, $category, $translate) {
      /**
       * Function For get Categories
       *
       * @param null
       *
       * @return to response.
       */
      $scope.getCategories = function() {
            $category['get']().then(function(response) {
                  $scope.compcategories = response;
                  $scope.compcategories;
            });
      }
      $scope.getCategories(); // Calls function for show Categories on page load.
      /**
       * Function For Save Category
       *
       * @param null
       *
       * @return to response.
       */
      $scope.saveCategory = function() {
            var data = $('#form-category').serialize();
            $category['saveCategory'](data).then(function(response) {
                  toastr.success('Category de salva!');
                  $scope.categoryData = [];
                  $('#form-category')[0].reset();
                  $('#ativo').select2('val', '');
                  $('#peso').val('');
                  $('#form-category .salvar').button('reset');
                  $scope.getCategories();
            });
      }
      /**
       * Function For Edit/update Category
       *
       * @param category_id
       *
       * @return to calls function for listing updated categories.
       */
      $scope.editCategory = function(id) {
            $('#ativo').select2('val', '');
            $('#peso').val('');
            $category['getById'](id).then(function(response) {
                  $scope.categoryData = response;
                  $('#ativo').select2('val', response.ativo);
                  $('#peso').val(response.peso);
                  if (response.controle == 1) {
                        $('#checkbox_Control').prop('checked', true);
                  } else {
                        $('#checkbox_Control').prop('checked', false);
                  }
                  if (response.time == 1) {
                        $('#checkbox_Time').prop('checked', true);
                  } else {
                        $('#checkbox_Time').prop('checked', false);
                  }
                  if (response.gestor == 1) {
                        $('#checkbox_gestor').prop('checked', true);
                  } else {
                        $('#checkbox_gestor').prop('checked', false);
                  }
            });
      }
      /**
       * Validation for Form
       *
       * @param null
       *
       */
      $('#form-category').validate({
            //ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .times-edit',
            ignore: [],
            rules: {
                  nome_categoria: 'required',
                  //descricao_categoria: 'required',
            },
            success: function(label, element) {
                  $(element).parent('div').removeClass('validate-has-error');
            },
            errorPlacement: function(error, element) {
                  $(element).parent('div').addClass('validate-has-error');
            },
            invalidHandler: function() {
                  $('.error-message').removeClass('hide');
            },
            submitHandler: function(form) {
                  var validated = true;
                  if (validated) {
                        $scope.saveCategory();
                  } else {
                        $('.error-message').removeClass('hide');
                  }
            }
      });
      $timeout(function() {
            $('#ativo').select2();
            $('#peso').val('');
      }, 100);
      $scope.changeControl = function() {
            $('.groupbyTime').removeClass("disabled-content");
            $('.groupbyCargo').removeClass("disabled-content");
            if (!$('#checkbox_Control').is(":checked")) {
                  $('.groupbyTime').addClass("disabled-content");
                  $('.groupbyCargo').addClass("disabled-content");
                  $("#checkbox_Time").removeAttr("checked");
                  $("#checkbox_gestor").removeAttr("checked");
            }
      }
});
/**
 * Controller for Competencias.
 *
 * @param many Factories
 *
 */
elofy.controller('CompetenciasCtrl', function globalCtrl($scope, $timeout, $filter, $globals, $users, $competencias, $category, $teams, $translate, $cargos) {
      $scope.scroollToTop = function() {
            $("html, body").animate({
                  scrollTop: 0
            }, "slow");
      }
      $scope.showSelectedTeams = function(teamId) {
            var flag = false;
            angular.forEach($scope.SelectedTeams, function(SelectedTeam) {
                  if (SelectedTeam.id == teamId) {
                        flag = true;
                  } else {
                        return false;
                  }
            });
            return flag;
      };
      $scope.initializeCompoptionsFilter = function() {
            $timeout(function() {
                  $('#search_nome_categoria').select2();
                  $('#search_tipo_competencia').select2();
                  $('#search_ativo').select2();
                  $('#reviewed').select2();
            }, 200);
      }
      /**
       * Function For Search Competencias
       *
       * @param null
       *
       * @return to calls function for Searched Records.
       */
      $scope.searchCompetencia = function() {
            $scope.competencias = [];
            var search_nome = $('#search_nome').val();
            var category = $('#search_nome_categoria').val();
            var tipo = $('#search_tipo_competencia').val();
            var ativo = $('#search_ativo').val();
            var search_team = $('#search_nome_team').val();
            var search_cargo = $('#search_nome_cargo').val();
            var reviewed = $('#reviewed').val();
            var groupBy = '';
            if (jQuery("#checkbox_groupbyCargo").is(':checked')) {
                  groupBy = 'cargo';
            } else if (jQuery("#checkbox_groupbyTime").is(':checked')) {
                  groupBy = 'time';
            }
            console.log(groupBy);
            $timeout(function() {
                  $("#custom_datatables").niceScroll({
                        horizrailenabled: false,
                        cursorcolor: "#3FB9EA"
                  });
            }, 500);
            $('.competencia_datatable').DataTable().clear().destroy();
            $competencias['search'](category, tipo, ativo, reviewed, groupBy, search_team, search_cargo, search_nome).then(function(response) {
                  $scope.competencias = response;
                  console.log($scope.competencias);
                  if (groupBy != '') {
                        $scope.searched = 1;
                  } else {
                        $scope.searched = 0;
                  }
                  if (groupBy == "cargo") {
                        $timeout(function() {
                              var groupColumn = 0;
                              var groupColumn1 = 1;
                              //$('.competencia_datatable').DataTable().ajax.reload();
                              if ($.fn.DataTable.isDataTable('.competencia_datatable')) {
                                    // $('.competencia_datatable').DataTable().destroy();
                              }
                              if (!$.fn.dataTable.isDataTable('.competencia_datatable')) {
                                    var table = $('.competencia_datatable').DataTable({
                                          "columnDefs": [{
                                                "visible": true,
                                                "targets": groupColumn1
                                          }],
                                          "order": [
                                                [groupColumn1, 'asc']
                                          ],
                                          "displayLength": 25,
                                          "bFilter": false,
                                          "oLanguage": {
                                                "sLengthMenu": "Exibição _MENU_ registros",
                                                "sZeroRecords": "Nada encontrado - desculpe",
                                                "sInfo": "Mostrando _START_ para _END_ do _TOTAL_ registros",
                                                "sInfoEmpty": "Mostrando 0 para 0 do 0 registros",
                                                "sInfoFiltered": "(filtrado de _MAX_ total registros)"
                                          },
                                          "drawCallback": function(settings) {
                                                var api = this.api();
                                                var rows = api.rows({
                                                      page: 'current'
                                                }).nodes();
                                                var last = null;
                                                var pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');
                                                pagination.toggle(this.api().page.info().pages > 1);
                                                api.column(groupColumn1, {
                                                      page: 'current'
                                                }).data().each(function(group, i) {
                                                      if (last !== group) {
                                                            $(rows).eq(i).before('<tr class="group"><td></td><td colspan="7">' + group + '</td></tr>');
                                                            last = group;
                                                      }
                                                });
                                                $('.competencia_datatable').find('tr td.crgoes').css('opacity', '0');
                                          }
                                    });
                              }
                              // Order by the grouping
                              $('.competencia_datatable tbody').on('click', 'tr.group', function() {
                                    var currentOrder = table.order()[0];
                                    if (currentOrder[0] === groupColumn && currentOrder[1] === 'asc') {
                                          table.order([groupColumn, 'desc']).draw();
                                    } else {
                                          table.order([groupColumn, 'asc']).draw();
                                    }
                              });
                        }, 500);
                  } else if (groupBy == "time") {
                        $timeout(function() {
                              var groupColumn1 = 0;
                              //$('.competencia_datatable').DataTable().ajax.reload();
                              if ($.fn.DataTable.isDataTable('.competencia_datatable')) {
                                    // $('.competencia_datatable').DataTable().destroy();
                              }
                              if (!$.fn.dataTable.isDataTable('.competencia_datatable')) {
                                    var table = $('.competencia_datatable').DataTable({
                                          "columnDefs": [{
                                                "visible": true,
                                                "targets": groupColumn1
                                          }],
                                          "order": [
                                                [groupColumn1, 'asc']
                                          ],
                                          "displayLength": 25,
                                          "bFilter": false,
                                          "oLanguage": {
                                                "sLengthMenu": "Exibição _MENU_ registros",
                                                "sZeroRecords": "Nada encontrado - desculpe",
                                                "sInfo": "Mostrando _START_ para _END_ do _TOTAL_ registros",
                                                "sInfoEmpty": "Mostrando 0 para 0 do 0 registros",
                                                "sInfoFiltered": "(filtrado de _MAX_ total registros)"
                                          },
                                          "drawCallback": function(settings) {
                                                var api = this.api();
                                                var rows = api.rows({
                                                      page: 'current'
                                                }).nodes();
                                                var last = null;
                                                var pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');
                                                pagination.toggle(this.api().page.info().pages > 1);
                                                api.column(groupColumn1, {
                                                      page: 'current'
                                                }).data().each(function(group, i) {
                                                      if (last !== group) {
                                                            $(rows).eq(i).before('<tr class="group"><td colspan="8">' + group + '</td></tr>');
                                                            last = group;
                                                      }
                                                });
                                                $('.competencia_datatable').find('tr td.teams').css('opacity', '0');
                                          }
                                    });
                              }
                              // Order by the grouping
                              $('.competencia_datatable tbody').on('click', 'tr.group', function() {
                                    var currentOrder = table.order()[0];
                                    if (currentOrder[0] === groupColumn && currentOrder[1] === 'asc') {
                                          table.order([groupColumn, 'desc']).draw();
                                    } else {
                                          table.order([groupColumn, 'asc']).draw();
                                    }
                              });
                        }, 500);
                  } else {
                        $timeout(function() {
                              //$('.competencia_datatable').DataTable().ajax.reload();
                              if ($.fn.DataTable.isDataTable('.competencia_datatable')) {
                                    // $('.competencia_datatable').DataTable().destroy();
                              }
                              if (!$.fn.dataTable.isDataTable('.competencia_datatable')) {
                                    var table = $('.competencia_datatable').DataTable({
                                          "displayLength": 25,
                                          "bFilter": false,
                                          "oLanguage": {
                                                "sLengthMenu": "Exibição _MENU_ registros",
                                                "sZeroRecords": "Nothing found - sorry",
                                                "sInfo": "Showing _START_ to _END_ of _TOTAL_ records",
                                                "sInfoEmpty": "Showing 0 to 0 of 0 records",
                                                "sInfoFiltered": "(filtered from _MAX_ total records)"
                                          },
                                          "drawCallback": function(settings) {
                                                var api = this.api();
                                                var rows = api.rows({
                                                      page: 'current'
                                                }).nodes();
                                                var last = null;
                                                var rows = api.rows({
                                                      page: 'current'
                                                }).nodes();
                                                var pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');
                                                pagination.toggle(this.api().page.info().pages > 1);
                                          }
                                    });
                              }
                        }, 500);
                  }
            });
      }
      /**
       * Function For get Competencias
       *
       * @param null
       *
       * @return to response.
       */
      $scope.getCompetencias = function() {
            $scope.searchCompetencia();
      }
      $scope.getCompetencias(); // Calls function for show Competencias on page load.
      $scope.competenciatab = 1;
      $scope.CadastroTab = function() {
            $scope.competenciatab = 1;
            $scope.getCompetencias();
            $scope.initializeCompoptionsFilter();
            $cargos['get']().then(function(response) {
                  $scope.cargos = response;
                  $scope.CargosNotAdded = response;
            });
            $timeout(function() {
                  //$('#second_box .slidetabs').css({"margin-top": "49px"});
                  $scope.selectedTeamNotAdded = [];
                  $scope.teamsNotAddedSelected = [];
                  $scope.selectedCargoNotAdded = [];
                  $scope.cargosNotAddedSelected = [];
                  $('#search_cargo').select2();
                  $('#id_team').select2();
                  $('#userTipoCargo').select2();
                  $('#tipo_competencia').select2();
                  $('#id_categoria_competencia').select2();
                  $('#search_cargo').change(function(e) {
                        $.each($scope.CargosNotAdded, function(i) {
                              $timeout(function() {
                                    if ($scope.CargosNotAdded[i].id === $(e.currentTarget).val()) {
                                          var spliced = $scope.CargosNotAdded.splice(i, 1)[0];
                                          $scope.cargosNotAddedSelected.push(spliced);
                                          return false;
                                    }
                              }, 100);
                        });
                  });
                  $scope.removeAddedCargo = function(ur, justRemove = true) {
                        $.each($scope.cargosNotAddedSelected, function(i) {
                              if ($scope.cargosNotAddedSelected[i].id === ur.id) {
                                    var spliced = $scope.cargosNotAddedSelected.splice(i, 1)[0];
                                    if (justRemove) $scope.CargosNotAdded.push(spliced);
                                    return false;
                              }
                        });
                  }
                  $scope.removeUserAndRefreshCargo = function(ur) {
                        $('#search_cargo .select2').select2("val", "");
                        $scope.removeAddedCargo(ur);
                  };
                  $('#id_team').change(function(e) {
                        //alert($scope.teamsNotAdded.length);
                        $.each($scope.teamsNotAdded, function(i) {
                              $timeout(function() {
                                    if ($scope.teamsNotAdded[i].id === $(e.currentTarget).val()) {
                                          var spliced = $scope.teamsNotAdded.splice(i, 1)[0];
                                          $scope.teamsNotAddedSelected.push(spliced);
                                          //$('#id_team').select2('val','');
                                          return false;
                                    }
                              }, 200);
                        });
                  });
                  $scope.removeAddedTeam = function(ur, justRemove = true) {
                        $.each($scope.teamsNotAddedSelected, function(i) {
                              if ($scope.teamsNotAddedSelected[i].id === ur.id) {
                                    var spliced = $scope.teamsNotAddedSelected.splice(i, 1)[0];
                                    if (justRemove) $scope.teamsNotAdded.push(spliced);
                                    return false;
                              }
                        });
                  }
                  $scope.removeUserAndRefreshTeam = function(ur) {
                        $('#id_team .select2').select2("val", "");
                        $scope.removeAddedTeam(ur);
                  };
            }, 500);
      }
      $scope.CadastroTab();
      /**
       * Function For get AllTeams
       *
       * @param null
       *
       * @return to response.
       */
      $scope.getTeams = function() {
            $teams['getAllTeams']().then(function(response) {
                  $scope.teams = response;
                  $scope.teamsNotAdded = response;
            });
      }
      $scope.getTeams();
      /**
       * Function For get Categories
       *
       * @param null
       *
       * @return to response.
       */
      $scope.getCategories = function() {
            $category['get']().then(function(response) {
                  $scope.categories = response;
            });
            $timeout(function() {
                  $('#search_ativo').select2("val", 1);
            }, 500);
      }
      $scope.getCategories(); // Calls function for show Categories on page load.
      /**
       * Function For Save Competencia
       *
       * @param null
       *
       * @return to response.
       */
      $scope.saveCompetencia = function() {
            $('#form-category-competencia').validate({
                  ignore: '.select2-focusser, .tt-hint, .tt-input, .input-tags, .times-edit',
                  //ignore: [],
                  rules: {
                        nome_competencia: 'required',
                        id_categoria_competencia: 'required',
                  },
                  success: function(label, element) {
                        $(element).parent('div').removeClass('validate-has-error');
                  },
                  errorPlacement: function(error, element) {
                        $(element).parent('div').addClass('validate-has-error');
                  },
                  invalidHandler: function() {
                        $('.error-message').removeClass('hide');
                  },
                  submitHandler: function(form) {
                        var data = $('#form-category-competencia').serialize();
                        data = data + "&descricao=" + $scope.competenciaData.descricao;
                        data = data + "&comportamento_esperado=" + $scope.competenciaData.comportamento_esperado;
                        data = data + "&atitudes_positivas=" + $scope.competenciaData.atitudes_positivas;
                        data = data + "&atitudes_negativas=" + $scope.competenciaData.atitudes_negativas;
                        $('.error-message').addClass('hide');
                        $('#form-category-competencia .salvar').button('loading');
                        $competencias['Save'](data).then(function(response) {
                              toastr.success('Competencia de salva!');
                              //alert($('#id_competencia').val());return false;
                              $scope.getTeams(); //fix disappearing team content
                              $timeout(function() {
                                    if ($scope.editcompId != '') {
                                          $competencias['search']().then(function(response) {
                                                $.each(response, function(key, val) {
                                                      // alert($scope.editcompId);
                                                      if (val.id_competencia == $scope.editcompId) {
                                                            $scope.competencias[key].team_name = val.team_name;
                                                            $scope.competencias[key].cargo_name = val.cargo_name;
                                                            $scope.competencias[key].nome_competencia = val.nome_competencia;
                                                            $scope.competencias[key].nome_categoria = val.nome_categoria;
                                                            $scope.competencias[key].competencias_tipos = val.competencias_tipos;
                                                            $scope.competencias[key].tipo_competencia = val.tipo_competencia;
                                                            $scope.competencias[key].descricao = val.descricao;
                                                            $scope.competencias[key].ativo = val.ativo;
                                                            $scope.competencias[key].reviewed = val.reviewed;
                                                            $scope.competencias[key].todos = val.todos;
                                                      }
                                                      console.log($scope.competencias);
                                                });
                                          });
                                    }
                                    $scope.competenciaData = [];
                                    $('#form-category-competencia .salvar').button('reset');
                                    $('#form-category-competencia')[0].reset();
                                    $scope.selectedTeamNotAdded = [];
                                    $scope.teamsNotAddedSelected = [];
                                    $scope.selectedCargoNotAdded = [];
                                    $scope.cargosNotAddedSelected = [];
                                    // $('#id_team').val('');
                                    // $('#ativo').val('');
                                    // $('#tipo_competencia').val('');
                                    // $('#id_categoria_competencia').val('');
                                    $('#id_categoria_competencia').select2('destroy');
                                    $('#tipo_competencia').select2('destroy');
                                    $('#id_team').select2('destroy');
                                    $('#userTipoCargo').select2('destroy');
                                    $('#search_cargo').select2('destroy');
                              }, 300);
                              $timeout(function() {
                                    $('#id_categoria_competencia').select2();
                                    $('#tipo_competencia').select2();
                                    $('#id_team').select2();
                                    $('#userTipoCargo').select2();
                                    $('#search_cargo').select2();
                                    if ($scope.editcompId == '') {
                                          $("tab1").trigger("click");
                                          $scope.competenciatab = 1;
                                          $scope.CadastroTab();
                                    }
                              }, 500);
                              //$scope.getCompetencias();
                              $timeout(function() {
                                    //location.reload();
                                    $scope.openSideBarMenucompetencia = 0;
                              }, 200);
                        });
                  }
            });
      }
      $competencias['GetAllCompetenciasTipos']().then(function(res) {
            $scope.competencias_tipos = res;
      });
      $scope.addMoreCompetencia = function() {
            $('#action-competencia').modal();
            $('#new_tipo_to_add').val('');
            $('#new .form-control ').css("border", " 1px solid #dcdcdc");
            $competencias['GetAllCompetenciasTipos']().then(function(res) {
                  $scope.competencias_tipos = res;
            });
      }
      $scope.abcd = '';
      $scope.resetCompetencia = function() {
            $scope.getCompetencias();
            $scope.getTeams(); //fix disappearing team content
            $scope.selectedTeamNotAdded = [];
            $scope.teamsNotAddedSelected = [];
            $scope.selectedCargoNotAdded = [];
            $scope.cargosNotAddedSelected = [];
            $('#id_categoria_competencia').select2('destroy');
            $('#tipo_competencia').select2('destroy');
            $('#id_team').select2('destroy');
            $('#userTipoCargo').select2('destroy');
            $('#search_cargo').select2('destroy');
            $("input[name='teamselected']").val('');
            $("input[name='cargosselected']").val('');
            $('#id_categoria_competencia').removeAttr("selected", "selected");
            //$('#search_nome_categoria').select2('destroy');
            //$('#search_tipo_competencia').select2('destroy');
            //$('#search_ativo').select2('destroy');
            // $('#reviewed').select2('destroy');
            $timeout(function() {
                  $('#id_categoria_competencia').select2();
                  $('#tipo_competencia').select2();
                  $('#id_team').select2();
                  $('#userTipoCargo').select2();
                  $('#search_cargo').select2();
                  $('#search_nome_categoria').select2("val", "");
                  $('#search_tipo_competencia').select2("val", "");
                  $('#search_ativo').select2("val", "");
                  $('#reviewed').select2("val", "");
                  $('#search_ativo').select2("val", 1);
                  $('#id_team').select2('val', '');
                  $('#userTipoCargo').select2('val', '');
                  $('#search_cargo').select2('val', '');
            }, 300);
      }
      $scope.compensiaFormReset = function() {
            $('#form-category-competencia')[0].reset();
            $scope.competenciaData.descricao = '';
      }
      /**
       * Function For Edit/update Competencia
       *
       * @param Id
       *
       * @return to calls function for listing updated categories.
       */
      $scope.editCompetencia = function(id, index) {
            $scope.editcomp = index;
            $scope.editcompId = id;
            $scope.competenciatab = 1;
            $scope.openSideBarMenucompetencia = false;
            $scope.competenciaData = [];
            $scope.SelectedTeams = [];
            $scope.userTipoCargo = false;
            $('#userTipoCargo').select2('destroy');
            $scope.SelectedCategory = [];
            $scope.SelectedTipoCompetencia = [];
            $cargos['get']().then(function(response) {
                  $scope.cargos = response;
                  $scope.CargosNotAdded = response;
            });
            $scope.getTeams();
            $competencias['getById'](id).then(function(response) {
                  $timeout(function() {
                        $scope.openSideBarMenucompetencia = 1;
                  }, 700);
                  $('#second_box .slidetabs').css({
                        "margin-top": "49px"
                  });
                  $scope.competenciaData = response;
                  $scope.SelectedTeams = response.teams;
                  $scope.teamsNotAddedSelected = response.teams;
                  $scope.userTipoCargo = response.userTipoCargo;
                  $scope.cargosNotAddedSelected = response.cargos;
                  $scope.SelectedCategory = response.id_categoria_competencia;
                  $scope.SelectedTipoCompetencia = response.tipo_competencia;
                  if (response.reviewed == 1) {
                        $('#reviewed_chk').prop('checked', true);
                  }
                  if (response.ativo == 1) {
                        $('#ativo').prop('checked', true);
                  }
                  if (response.todos == 1) {
                        $('#todos').prop('checked', true);
                  }
                  if ($scope.cargosNotAddedSelected.length > 0) {
                        var cargoArr = $scope.CargosNotAdded;
                        $.each($scope.cargosNotAddedSelected, function(i, val) {
                              for (var i = cargoArr.length - 1; i >= 0; --i) {
                                    if (cargoArr[i].id == val.id) {
                                          cargoArr.splice(i, 1);
                                    }
                              }
                        });
                  }
                  if ($scope.teamsNotAddedSelected.length > 0) {
                        var teamsNotAdded = $scope.teamsNotAdded;
                        $.each($scope.teamsNotAddedSelected, function(i, val) {
                              for (var i = teamsNotAdded.length - 1; i >= 0; --i) {
                                    if (teamsNotAdded[i].id == val.id) {
                                          teamsNotAdded.splice(i, 1);
                                    }
                              }
                        });
                  }
                  $("input[name='teamselected']").val(response.teams);
                  $("input[name='cargosselected']").val(response.cargos);
                  $('#id_categoria_competencia').select2('destroy');
                  $('#id_categoria_competencia').removeAttr("selected", "selected");
                  $('#id_team').select2('destroy');
                  $('#tipo_competencia').select2('destroy');
                  $('#search_cargo').select2('destroy');
                  $timeout(function() {
                        $('#id_categoria_competencia').select2();
                        $('#id_team').select2();
                        $('#userTipoCargo').select2();
                        $('#search_cargo').select2();
                        $('#tipo_competencia').select2();
                        $('#tab2').removeClass('additional actives active_bitton_links_dv');
                        $('#tab1').addClass('additional actives active_bitton_links_dv');
                        $('#id_team').select2('val', '');
                        // $('#userTipoCargo').select2('val','0');
                        $('#search_cargo').select2('val', '');
                  }, 200);
            });
            $scope.openSideBarMenucompetencia = 1;
      }
      /**
       * Validation for Form
       *
       * @param null
       *
       */
      $timeout(function() {
            $('.search_select').select2();
            $('#ativo').select2();
            $('#id_categoria_competencia').select2();
            $('#id_team').select2();
            $('#userTipoCargo').select2();
            $('#tipo_competencia').select2();
      }, 100);
      $scope.edit_tipo = function(index) {
            $("#nome_tipo" + index).css("display", "none");
            $("#edit" + index).css("display", "none");
            $("#nome" + index).css("display", "block");
            $("#save" + index).css("display", "");
      }
      $scope.save_tipo = function(index) {
            var new_tipo = $("#new_tipo" + index).val();
            $competencias['update_tipo'](index, new_tipo).then(function(response) {
                  if (response != 0) {
                        $scope.competencias_tipos = response;
                        toastr.success('você atualizou com sucesso o tipo!!');
                        $("#nome" + index).css("display", "none");
                        $("#save" + index).css("display", "none");
                        $("#nome_tipo" + index).css("display", "block");
                        $("#edit" + index).css("display", "");
                  } else {
                        toastr.error('insira um tipo a ser inserido');
                        $("#nome" + index + " .form-control").css("border", " 1px solid red");
                  }
            });
      }
      $scope.add_new_tipo = function() {
            var add_tipo = $('#new_tipo_to_add').val();
            $competencias['add_tipo'](add_tipo).then(function(response) {
                  if (response != 0) {
                        toastr.success('você adicionou com sucesso o tipo!!');
                        $scope.competencias_tipos = response;
                        $('#new_tipo_to_add').val('');
                        $('#new .form-control ').css("border", " 1px solid #dcdcdc");
                  } else {
                        $('#new .form-control ').css("border", " 1px solid red");
                        toastr.error('insira um tipo a ser inserido');
                  }
            });
      }
      $scope.checkCargo = function() {
            if ($('#checkbox_groupbyCargo').is(":checked")) {
                  console.log('cargo');
                  $("#checkbox_groupbyTime").prop('checked', false);
                  $('#checkbox_groupby_hidden').val("cargo");
                  $('#checkbox_groupbyCargo').prop('checked', true);
            } else {
                  $('#checkbox_groupby_hidden').val("");
                  $('#checkbox_groupbyCargo').prop('checked', false);
            }
      }
      $scope.checkTipo = function() {
            if ($('#checkbox_groupbyTime').is(":checked")) {
                  console.log('time');
                  $("#checkbox_groupbyCargo").prop('checked', false);
                  $('#checkbox_groupby_hidden').val("time");
                  $('#checkbox_groupbyTime').prop('checked', true);
            } else {
                  $('#checkbox_groupby_hidden').val("");
                  $('#checkbox_groupbyTime').prop('checked', false);
            }
      }
      $scope.closeSidebarcompetencia = function() {
            $scope.openSideBarMenucompetencia = 0;
            $("#nome_competencia").parent('div').removeClass('validate-has-error');
            $("#id_categoria_competencia").parent('div').removeClass('validate-has-error');
      }
      $scope.addcompetencia = function() {
            $scope.editcomp = false;
            $scope.editcompId = false;
            $scope.openSideBarMenucompetencia = 1;
            $scope.competenciaData = null;
            $scope.resetCompetencia();
            $('#ativo').prop('checked', true);
            $timeout(function() {
                  $('#id_team').select2('val', '');
                  $('#userTipoCargo').select2('val', '');
                  $('#search_cargo').select2('val', '');
            }, 300);
      }
      $scope.toggleAdvanceFilter = function() {
            $('#comp_advance_filter').toggleClass('show');
      }
});